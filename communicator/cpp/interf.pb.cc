// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace communicator {
class Basic_ctrlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Basic_ctrl> {
} _Basic_ctrl_default_instance_;
class Phy_tx_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Phy_tx_stat> {
} _Phy_tx_stat_default_instance_;
class Phy_rx_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Phy_rx_stat> {
} _Phy_rx_stat_default_instance_;
class Phy_sensing_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Phy_sensing_stat> {
} _Phy_sensing_stat_default_instance_;
class Phy_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Phy_stat> {
  public:
  const ::communicator::Phy_tx_stat* tx_stat_;
  const ::communicator::Phy_rx_stat* rx_stat_;
  const ::communicator::Phy_sensing_stat* sensing_stat_;
} _Phy_stat_default_instance_;
class Mac_ack_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_ack_stat> {
} _Mac_ack_stat_default_instance_;
class Mac_tx_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_tx_stat> {
} _Mac_tx_stat_default_instance_;
class Mac_rx_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_rx_stat> {
} _Mac_rx_stat_default_instance_;
class Mac_queue_stat_QueueInfEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_queue_stat::Mac_queue_stat_QueueInfEntry> {
} _Mac_queue_stat_QueueInfEntry_default_instance_;
class Mac_queue_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_queue_stat> {
} _Mac_queue_stat_default_instance_;
class Mac_stat_Cell_informationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_stat_Cell_information> {
  public:
  const ::communicator::Mac_tx_stat* tx_stat_;
  const ::communicator::Mac_rx_stat* rx_stat_;
} _Mac_stat_Cell_information_default_instance_;
class Mac_stat_Mac_send_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_stat_Mac_send_stat> {
} _Mac_stat_Mac_send_stat_default_instance_;
class Mac_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mac_stat> {
  public:
  const ::communicator::Mac_stat_Cell_information* rx_tx_stat_;
  const ::communicator::Mac_queue_stat* queue_stat_;
  const ::communicator::Mac_stat_Mac_send_stat* send_stat_;
} _Mac_stat_default_instance_;
class RF_timeslot_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RF_timeslot_stat> {
} _RF_timeslot_stat_default_instance_;
class RF_statDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RF_stat> {
} _RF_stat_default_instance_;
class Application_dataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Application_data> {
} _Application_data_default_instance_;
class Link_MCS_TxGain_BWDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Link_MCS_TxGain_BW> {
} _Link_MCS_TxGain_BW_default_instance_;
class MFTDMA_SlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MFTDMA_Slot> {
} _MFTDMA_Slot_default_instance_;
class Proposed_Slots_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proposed_Slots_Request> {
} _Proposed_Slots_Request_default_instance_;
class Proposed_SlotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proposed_Slots> {
} _Proposed_Slots_default_instance_;
class Proposed_Move_SlotsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proposed_Move_Slots> {
} _Proposed_Move_Slots_default_instance_;
class Selected_SlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Selected_Slot> {
} _Selected_Slot_default_instance_;
class Selected_Move_SlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Selected_Move_Slot> {
} _Selected_Move_Slot_default_instance_;
class External_Slot_AllocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<External_Slot_Allocation> {
} _External_Slot_Allocation_default_instance_;
class External_Slot_RemovalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<External_Slot_Removal> {
} _External_Slot_Removal_default_instance_;
class BC_Slots_AnnouncementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BC_Slots_Announcement> {
} _BC_Slots_Announcement_default_instance_;
class Slot_AllocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Slot_Allocation> {
} _Slot_Allocation_default_instance_;
class Slot_RemovalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Slot_Removal> {
} _Slot_Removal_default_instance_;
class Slot_MoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Slot_Move> {
} _Slot_Move_default_instance_;
class External_Slot_MoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<External_Slot_Move> {
} _External_Slot_Move_default_instance_;
class GetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Get> {
  public:
  const ::communicator::Proposed_Slots_Request* slot_request_;
  const ::communicator::Proposed_Slots* proposed_slots_;
  const ::communicator::Proposed_Move_Slots* proposed_move_slots_;
} _Get_default_instance_;
class Get_rDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Get_r> {
  public:
  const ::communicator::Mac_stat* mac_stat_;
  const ::communicator::Basic_ctrl* basic_ctrl_;
  const ::communicator::Proposed_Slots* proposed_slots_;
  const ::communicator::Selected_Slot* selected_slot_;
  const ::communicator::Selected_Move_Slot* selected_move_slot_;
} _Get_r_default_instance_;
class SetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Set> {
  public:
  const ::communicator::Link_MCS_TxGain_BW* mcs_txgain_bw_;
  ::google::protobuf::uint32 ch_;
  const ::communicator::External_Slot_Allocation* external_slot_allocation_;
  const ::communicator::External_Slot_Removal* external_slot_removal_;
  const ::communicator::Slot_Allocation* slot_allocation_;
  const ::communicator::Slot_Removal* slot_removal_;
  const ::communicator::BC_Slots_Announcement* bc_slots_announcement_;
  bool outcomes_updated_;
  const ::communicator::External_Slot_Move* external_slot_move_;
  const ::communicator::Proposed_Move_Slots* proposed_move_slots_;
  const ::communicator::Slot_Move* slot_move_;
} _Set_default_instance_;
class Set_rDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Set_r> {
} _Set_r_default_instance_;
class SendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Send> {
} _Send_default_instance_;
class Send_rDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Send_r> {
  public:
  const ::communicator::Phy_stat* phy_stat_;
  const ::communicator::Mac_stat* mac_result_;
} _Send_r_default_instance_;
class ReceiveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Receive> {
  public:
  const ::communicator::Basic_ctrl* basic_ctrl_;
  ::google::protobuf::internal::ArenaStringPtr data_;
} _Receive_default_instance_;
class Receive_rDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Receive_r> {
} _Receive_r_default_instance_;
class StatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stats> {
} _Stats_default_instance_;
class InternalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Internal> {
  public:
  const ::communicator::Get* get_;
  const ::communicator::Get_r* getr_;
  const ::communicator::Set* set_;
  const ::communicator::Set_r* setr_;
  const ::communicator::Send* send_;
  const ::communicator::Send_r* sendr_;
  const ::communicator::Receive* receive_;
  const ::communicator::Receive_r* receiver_;
  const ::communicator::Stats* stats_;
  const ::aiCommunicator::InternalAI* externalaimessage_;
} _Internal_default_instance_;

namespace protobuf_interf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[40];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, trx_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, send_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, bw_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, rf_boost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Basic_ctrl, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, channel_free_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, channel_busy_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, free_energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, busy_energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, total_dropped_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, coding_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_tx_stat, rf_boost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, rsrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, sinr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, detection_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, decoding_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, filler_bits_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, nof_cbs_exceeds_softbuffer_size_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, rate_matching_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, cb_crc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, tb_crc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, peak_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, noise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, decoded_cfi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, found_dci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, last_noi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, total_packets_synchronized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_rx_stat, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, rssi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_sensing_stat, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, host_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, fpga_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, num_cb_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, num_cb_err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, wrong_decoding_counter_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Phy_stat_default_instance_), tx_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Phy_stat_default_instance_), rx_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Phy_stat_default_instance_), sensing_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Phy_stat, stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, destination_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, tx_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, payload_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, tx_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, slot_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, max_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, num_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, bytes_transmitted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_ack_stat, receiver_stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_tx_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_tx_stat, ack_stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_rx_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_rx_stat, num_byte_overflow_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_rx_stat, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_rx_stat, tx_channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_rx_stat, slot_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, high_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, high_messages_in_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, high_pkts_lost_overflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, high_average_queue_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, low_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, low_messages_in_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, low_pkts_lost_overflow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, low_average_queue_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_queue_stat, queue_inf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, num_byte_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, num_byte_crc_drop_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mac_stat_Cell_information_default_instance_), tx_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mac_stat_Cell_information_default_instance_), rx_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Cell_information, rx_tx_stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Mac_send_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Mac_send_stat, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Mac_send_stat, packet_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat_Mac_send_stat, ch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, average_mac_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, pkts_lost_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, host_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, fpga_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, frame_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mac_stat_default_instance_), rx_tx_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mac_stat_default_instance_), queue_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Mac_stat_default_instance_), send_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mac_stat, stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, host_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, fpga_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_timeslot_stat, rssi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RF_stat, stats_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, next_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, destination_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, packet_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, traffic_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application_data, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link_MCS_TxGain_BW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link_MCS_TxGain_BW, destination_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link_MCS_TxGain_BW, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link_MCS_TxGain_BW, tx_gain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link_MCS_TxGain_BW, bw_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFTDMA_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFTDMA_Slot, frequency_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MFTDMA_Slot, timeslot_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots_Request, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots_Request, num_slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Slots, slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Move_Slots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Move_Slots, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Move_Slots, old_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proposed_Move_Slots, slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Slot, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Slot, slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Move_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Move_Slot, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Move_Slot, old_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Selected_Move_Slot, new_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Allocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Allocation, src_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Allocation, dst_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Allocation, slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Removal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Removal, src_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Removal, dst_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Removal, slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BC_Slots_Announcement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BC_Slots_Announcement, slots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Allocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Allocation, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Allocation, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Allocation, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Removal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Removal, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Removal, slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Move, mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Move, old_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Move, new_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot_Move, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Move, src_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Move, dst_mac_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Move, old_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(External_Slot_Move, new_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, attribute_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_default_instance_), slot_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_default_instance_), proposed_slots_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_default_instance_), proposed_move_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get_r, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get_r, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_r_default_instance_), mac_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_r_default_instance_), basic_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_r_default_instance_), proposed_slots_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_r_default_instance_), selected_slot_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Get_r_default_instance_), selected_move_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Get_r, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), mcs_txgain_bw_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), ch_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), external_slot_allocation_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), external_slot_removal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), slot_allocation_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), slot_removal_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), bc_slots_announcement_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), outcomes_updated_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), external_slot_move_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), proposed_move_slots_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Set_default_instance_), slot_move_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Set_r, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send, app_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send, basic_ctrl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send_r, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send_r, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send_r, result_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Send_r_default_instance_), phy_stat_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Send_r_default_instance_), mac_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Send_r, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Receive_default_instance_), basic_ctrl_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Receive_default_instance_), data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive_r, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive_r, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive_r, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Receive_r, stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, mac_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, phy_stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stats, mac_stat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Internal, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Internal, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Internal, transaction_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Internal, owner_module_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), get_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), getr_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), set_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), setr_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), send_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), sendr_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), receive_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), receiver_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), stats_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Internal_default_instance_), externalaimessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Internal, payload_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Basic_ctrl)},
  { 16, -1, sizeof(Phy_tx_stat)},
  { 29, -1, sizeof(Phy_rx_stat)},
  { 54, -1, sizeof(Phy_sensing_stat)},
  { 64, -1, sizeof(Phy_stat)},
  { 82, -1, sizeof(Mac_ack_stat)},
  { 99, -1, sizeof(Mac_tx_stat)},
  { 105, -1, sizeof(Mac_rx_stat)},
  { 114, -1, sizeof(Mac_queue_stat)},
  { 128, -1, sizeof(Mac_stat_Cell_information)},
  { 140, -1, sizeof(Mac_stat_Mac_send_stat)},
  { 148, -1, sizeof(Mac_stat)},
  { 162, -1, sizeof(RF_timeslot_stat)},
  { 172, -1, sizeof(RF_stat)},
  { 178, -1, sizeof(Application_data)},
  { 190, -1, sizeof(Link_MCS_TxGain_BW)},
  { 199, -1, sizeof(MFTDMA_Slot)},
  { 206, -1, sizeof(Proposed_Slots_Request)},
  { 213, -1, sizeof(Proposed_Slots)},
  { 220, -1, sizeof(Proposed_Move_Slots)},
  { 228, -1, sizeof(Selected_Slot)},
  { 235, -1, sizeof(Selected_Move_Slot)},
  { 243, -1, sizeof(External_Slot_Allocation)},
  { 251, -1, sizeof(External_Slot_Removal)},
  { 259, -1, sizeof(BC_Slots_Announcement)},
  { 265, -1, sizeof(Slot_Allocation)},
  { 273, -1, sizeof(Slot_Removal)},
  { 280, -1, sizeof(Slot_Move)},
  { 289, -1, sizeof(External_Slot_Move)},
  { 298, -1, sizeof(Get)},
  { 308, -1, sizeof(Get_r)},
  { 319, -1, sizeof(Set)},
  { 336, -1, sizeof(Set_r)},
  { 342, -1, sizeof(Send)},
  { 349, -1, sizeof(Send_r)},
  { 358, -1, sizeof(Receive)},
  { 366, -1, sizeof(Receive_r)},
  { 374, -1, sizeof(Stats)},
  { 382, -1, sizeof(Internal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Basic_ctrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phy_tx_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phy_rx_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phy_sensing_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Phy_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_ack_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_tx_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_rx_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_queue_stat_QueueInfEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_queue_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_stat_Cell_information_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_stat_Mac_send_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mac_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RF_timeslot_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RF_stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Application_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Link_MCS_TxGain_BW_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MFTDMA_Slot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proposed_Slots_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proposed_Slots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proposed_Move_Slots_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Selected_Slot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Selected_Move_Slot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_External_Slot_Allocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_External_Slot_Removal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BC_Slots_Announcement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Slot_Allocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Slot_Removal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Slot_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_External_Slot_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Get_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Get_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Set_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Set_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Send_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Send_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Receive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Receive_r_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Internal_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "interf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[8].reflection = Mac_queue_stat::Mac_queue_stat_QueueInfEntry::CreateReflection(file_level_metadata[8].descriptor, _Mac_queue_stat_QueueInfEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 40);
}

}  // namespace

void TableStruct::Shutdown() {
  _Basic_ctrl_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Phy_tx_stat_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Phy_rx_stat_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Phy_sensing_stat_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Phy_stat_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Mac_ack_stat_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Mac_tx_stat_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Mac_rx_stat_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Mac_queue_stat_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Mac_stat_Cell_information_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Mac_stat_Mac_send_stat_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Mac_stat_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RF_timeslot_stat_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _RF_stat_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Application_data_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Link_MCS_TxGain_BW_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _MFTDMA_Slot_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Proposed_Slots_Request_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Proposed_Slots_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Proposed_Move_Slots_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _Selected_Slot_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Selected_Move_Slot_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _External_Slot_Allocation_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _External_Slot_Removal_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _BC_Slots_Announcement_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _Slot_Allocation_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _Slot_Removal_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _Slot_Move_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _External_Slot_Move_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _Get_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Get_r_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _Set_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _Set_r_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _Send_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _Send_r_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _Receive_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _Receive_r_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _Stats_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _Internal_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::aiCommunicator::protobuf_interAI_2eproto::InitDefaults();
  _Basic_ctrl_default_instance_.DefaultConstruct();
  _Phy_tx_stat_default_instance_.DefaultConstruct();
  _Phy_rx_stat_default_instance_.DefaultConstruct();
  _Phy_sensing_stat_default_instance_.DefaultConstruct();
  _Phy_stat_default_instance_.DefaultConstruct();
  _Mac_ack_stat_default_instance_.DefaultConstruct();
  _Mac_tx_stat_default_instance_.DefaultConstruct();
  _Mac_rx_stat_default_instance_.DefaultConstruct();
  _Mac_queue_stat_QueueInfEntry_default_instance_.DefaultConstruct();
  _Mac_queue_stat_default_instance_.DefaultConstruct();
  _Mac_stat_Cell_information_default_instance_.DefaultConstruct();
  _Mac_stat_Mac_send_stat_default_instance_.DefaultConstruct();
  _Mac_stat_default_instance_.DefaultConstruct();
  _RF_timeslot_stat_default_instance_.DefaultConstruct();
  _RF_stat_default_instance_.DefaultConstruct();
  _Application_data_default_instance_.DefaultConstruct();
  _Link_MCS_TxGain_BW_default_instance_.DefaultConstruct();
  _MFTDMA_Slot_default_instance_.DefaultConstruct();
  _Proposed_Slots_Request_default_instance_.DefaultConstruct();
  _Proposed_Slots_default_instance_.DefaultConstruct();
  _Proposed_Move_Slots_default_instance_.DefaultConstruct();
  _Selected_Slot_default_instance_.DefaultConstruct();
  _Selected_Move_Slot_default_instance_.DefaultConstruct();
  _External_Slot_Allocation_default_instance_.DefaultConstruct();
  _External_Slot_Removal_default_instance_.DefaultConstruct();
  _BC_Slots_Announcement_default_instance_.DefaultConstruct();
  _Slot_Allocation_default_instance_.DefaultConstruct();
  _Slot_Removal_default_instance_.DefaultConstruct();
  _Slot_Move_default_instance_.DefaultConstruct();
  _External_Slot_Move_default_instance_.DefaultConstruct();
  _Get_default_instance_.DefaultConstruct();
  _Get_r_default_instance_.DefaultConstruct();
  _Set_default_instance_.DefaultConstruct();
  _Set_r_default_instance_.DefaultConstruct();
  _Send_default_instance_.DefaultConstruct();
  _Send_r_default_instance_.DefaultConstruct();
  _Receive_default_instance_.DefaultConstruct();
  _Receive_r_default_instance_.DefaultConstruct();
  _Stats_default_instance_.DefaultConstruct();
  _Internal_default_instance_.DefaultConstruct();
  _Phy_stat_default_instance_.tx_stat_ = const_cast< ::communicator::Phy_tx_stat*>(
      ::communicator::Phy_tx_stat::internal_default_instance());
  _Phy_stat_default_instance_.rx_stat_ = const_cast< ::communicator::Phy_rx_stat*>(
      ::communicator::Phy_rx_stat::internal_default_instance());
  _Phy_stat_default_instance_.sensing_stat_ = const_cast< ::communicator::Phy_sensing_stat*>(
      ::communicator::Phy_sensing_stat::internal_default_instance());
  _Mac_ack_stat_default_instance_.get_mutable()->receiver_stats_ = const_cast< ::communicator::Phy_rx_stat*>(
      ::communicator::Phy_rx_stat::internal_default_instance());
  _Mac_queue_stat_QueueInfEntry_default_instance_.get_mutable()->set_default_instance(_Mac_queue_stat_QueueInfEntry_default_instance_.get_mutable());
  _Mac_queue_stat_QueueInfEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Mac_stat_Cell_information_default_instance_.tx_stat_ = const_cast< ::communicator::Mac_tx_stat*>(
      ::communicator::Mac_tx_stat::internal_default_instance());
  _Mac_stat_Cell_information_default_instance_.rx_stat_ = const_cast< ::communicator::Mac_rx_stat*>(
      ::communicator::Mac_rx_stat::internal_default_instance());
  _Mac_stat_default_instance_.rx_tx_stat_ = const_cast< ::communicator::Mac_stat_Cell_information*>(
      ::communicator::Mac_stat_Cell_information::internal_default_instance());
  _Mac_stat_default_instance_.queue_stat_ = const_cast< ::communicator::Mac_queue_stat*>(
      ::communicator::Mac_queue_stat::internal_default_instance());
  _Mac_stat_default_instance_.send_stat_ = const_cast< ::communicator::Mac_stat_Mac_send_stat*>(
      ::communicator::Mac_stat_Mac_send_stat::internal_default_instance());
  _Proposed_Move_Slots_default_instance_.get_mutable()->old_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Selected_Slot_default_instance_.get_mutable()->slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Selected_Move_Slot_default_instance_.get_mutable()->old_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Selected_Move_Slot_default_instance_.get_mutable()->new_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _External_Slot_Allocation_default_instance_.get_mutable()->slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _External_Slot_Removal_default_instance_.get_mutable()->slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Slot_Allocation_default_instance_.get_mutable()->slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Slot_Removal_default_instance_.get_mutable()->slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Slot_Move_default_instance_.get_mutable()->old_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Slot_Move_default_instance_.get_mutable()->new_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _External_Slot_Move_default_instance_.get_mutable()->old_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _External_Slot_Move_default_instance_.get_mutable()->new_slot_ = const_cast< ::communicator::MFTDMA_Slot*>(
      ::communicator::MFTDMA_Slot::internal_default_instance());
  _Get_default_instance_.slot_request_ = const_cast< ::communicator::Proposed_Slots_Request*>(
      ::communicator::Proposed_Slots_Request::internal_default_instance());
  _Get_default_instance_.proposed_slots_ = const_cast< ::communicator::Proposed_Slots*>(
      ::communicator::Proposed_Slots::internal_default_instance());
  _Get_default_instance_.proposed_move_slots_ = const_cast< ::communicator::Proposed_Move_Slots*>(
      ::communicator::Proposed_Move_Slots::internal_default_instance());
  _Get_r_default_instance_.mac_stat_ = const_cast< ::communicator::Mac_stat*>(
      ::communicator::Mac_stat::internal_default_instance());
  _Get_r_default_instance_.basic_ctrl_ = const_cast< ::communicator::Basic_ctrl*>(
      ::communicator::Basic_ctrl::internal_default_instance());
  _Get_r_default_instance_.proposed_slots_ = const_cast< ::communicator::Proposed_Slots*>(
      ::communicator::Proposed_Slots::internal_default_instance());
  _Get_r_default_instance_.selected_slot_ = const_cast< ::communicator::Selected_Slot*>(
      ::communicator::Selected_Slot::internal_default_instance());
  _Get_r_default_instance_.selected_move_slot_ = const_cast< ::communicator::Selected_Move_Slot*>(
      ::communicator::Selected_Move_Slot::internal_default_instance());
  _Set_default_instance_.mcs_txgain_bw_ = const_cast< ::communicator::Link_MCS_TxGain_BW*>(
      ::communicator::Link_MCS_TxGain_BW::internal_default_instance());
  _Set_default_instance_.ch_ = 0u;
  _Set_default_instance_.external_slot_allocation_ = const_cast< ::communicator::External_Slot_Allocation*>(
      ::communicator::External_Slot_Allocation::internal_default_instance());
  _Set_default_instance_.external_slot_removal_ = const_cast< ::communicator::External_Slot_Removal*>(
      ::communicator::External_Slot_Removal::internal_default_instance());
  _Set_default_instance_.slot_allocation_ = const_cast< ::communicator::Slot_Allocation*>(
      ::communicator::Slot_Allocation::internal_default_instance());
  _Set_default_instance_.slot_removal_ = const_cast< ::communicator::Slot_Removal*>(
      ::communicator::Slot_Removal::internal_default_instance());
  _Set_default_instance_.bc_slots_announcement_ = const_cast< ::communicator::BC_Slots_Announcement*>(
      ::communicator::BC_Slots_Announcement::internal_default_instance());
  _Set_default_instance_.outcomes_updated_ = false;
  _Set_default_instance_.external_slot_move_ = const_cast< ::communicator::External_Slot_Move*>(
      ::communicator::External_Slot_Move::internal_default_instance());
  _Set_default_instance_.proposed_move_slots_ = const_cast< ::communicator::Proposed_Move_Slots*>(
      ::communicator::Proposed_Move_Slots::internal_default_instance());
  _Set_default_instance_.slot_move_ = const_cast< ::communicator::Slot_Move*>(
      ::communicator::Slot_Move::internal_default_instance());
  _Send_default_instance_.get_mutable()->app_data_ = const_cast< ::communicator::Application_data*>(
      ::communicator::Application_data::internal_default_instance());
  _Send_default_instance_.get_mutable()->basic_ctrl_ = const_cast< ::communicator::Basic_ctrl*>(
      ::communicator::Basic_ctrl::internal_default_instance());
  _Send_r_default_instance_.phy_stat_ = const_cast< ::communicator::Phy_stat*>(
      ::communicator::Phy_stat::internal_default_instance());
  _Send_r_default_instance_.mac_result_ = const_cast< ::communicator::Mac_stat*>(
      ::communicator::Mac_stat::internal_default_instance());
  _Receive_default_instance_.basic_ctrl_ = const_cast< ::communicator::Basic_ctrl*>(
      ::communicator::Basic_ctrl::internal_default_instance());
  _Receive_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _Receive_r_default_instance_.get_mutable()->stat_ = const_cast< ::communicator::Phy_stat*>(
      ::communicator::Phy_stat::internal_default_instance());
  _Stats_default_instance_.get_mutable()->phy_stat_ = const_cast< ::communicator::Phy_stat*>(
      ::communicator::Phy_stat::internal_default_instance());
  _Stats_default_instance_.get_mutable()->mac_stat_ = const_cast< ::communicator::Mac_stat*>(
      ::communicator::Mac_stat::internal_default_instance());
  _Internal_default_instance_.get_ = const_cast< ::communicator::Get*>(
      ::communicator::Get::internal_default_instance());
  _Internal_default_instance_.getr_ = const_cast< ::communicator::Get_r*>(
      ::communicator::Get_r::internal_default_instance());
  _Internal_default_instance_.set_ = const_cast< ::communicator::Set*>(
      ::communicator::Set::internal_default_instance());
  _Internal_default_instance_.setr_ = const_cast< ::communicator::Set_r*>(
      ::communicator::Set_r::internal_default_instance());
  _Internal_default_instance_.send_ = const_cast< ::communicator::Send*>(
      ::communicator::Send::internal_default_instance());
  _Internal_default_instance_.sendr_ = const_cast< ::communicator::Send_r*>(
      ::communicator::Send_r::internal_default_instance());
  _Internal_default_instance_.receive_ = const_cast< ::communicator::Receive*>(
      ::communicator::Receive::internal_default_instance());
  _Internal_default_instance_.receiver_ = const_cast< ::communicator::Receive_r*>(
      ::communicator::Receive_r::internal_default_instance());
  _Internal_default_instance_.stats_ = const_cast< ::communicator::Stats*>(
      ::communicator::Stats::internal_default_instance());
  _Internal_default_instance_.externalaimessage_ = const_cast< ::aiCommunicator::InternalAI*>(
      ::aiCommunicator::InternalAI::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014interf.proto\022\014communicator\032\rinterAI.pr"
      "oto\"\230\002\n\nBasic_ctrl\022.\n\010trx_flag\030\001 \001(\0162\034.c"
      "ommunicator.Basic_ctrl.TRX\022\017\n\007send_to\030\002 "
      "\001(\r\022(\n\010bw_index\030\003 \001(\0162\026.communicator.BW_"
      "INDEX\022\n\n\002ch\030\004 \001(\r\022\r\n\005frame\030\005 \001(\r\022\014\n\004slot"
      "\030\006 \001(\r\022\021\n\ttimestamp\030\007 \001(\004\022\013\n\003mcs\030\010 \001(\r\022\014"
      "\n\004gain\030\t \001(\005\022\020\n\010rf_boost\030\n \001(\002\022\016\n\006length"
      "\030\013 \001(\r\"&\n\003TRX\022\017\n\013TRX_UNKNOWN\020\000\022\006\n\002RX\020\001\022\006"
      "\n\002TX\020\002\"\276\001\n\013Phy_tx_stat\022\r\n\005power\030\001 \001(\005\022\030\n"
      "\020channel_free_cnt\030\002 \001(\004\022\030\n\020channel_busy_"
      "cnt\030\003 \001(\004\022\023\n\013free_energy\030\004 \001(\002\022\023\n\013busy_e"
      "nergy\030\005 \001(\002\022\033\n\023total_dropped_slots\030\006 \001(\004"
      "\022\023\n\013coding_time\030\007 \001(\002\022\020\n\010rf_boost\030\010 \001(\002\""
      "\267\003\n\013Phy_rx_stat\022\014\n\004gain\030\001 \001(\005\022\013\n\003cqi\030\002 \001"
      "(\r\022\014\n\004rssi\030\003 \001(\002\022\014\n\004rsrp\030\004 \001(\002\022\014\n\004rsrq\030\005"
      " \001(\002\022\014\n\004sinr\030\006 \001(\002\022\030\n\020detection_errors\030\007"
      " \001(\004\022\027\n\017decoding_errors\030\010 \001(\004\022\031\n\021filler_"
      "bits_error\030\t \001(\004\022-\n%nof_cbs_exceeds_soft"
      "buffer_size_error\030\n \001(\004\022\033\n\023rate_matching"
      "_error\030\013 \001(\004\022\024\n\014cb_crc_error\030\014 \001(\004\022\024\n\014tb"
      "_crc_error\030\r \001(\004\022\022\n\npeak_value\030\016 \001(\002\022\r\n\005"
      "noise\030\017 \001(\002\022\023\n\013decoded_cfi\030\020 \001(\r\022\021\n\tfoun"
      "d_dci\030\021 \001(\010\022\020\n\010last_noi\030\022 \001(\r\022\"\n\032total_p"
      "ackets_synchronized\030\023 \001(\004\022\016\n\006length\030\024 \001("
      "\005\"f\n\020Phy_sensing_stat\022\021\n\tfrequency\030\001 \001(\002"
      "\022\023\n\013sample_rate\030\002 \001(\002\022\014\n\004gain\030\003 \001(\002\022\014\n\004r"
      "ssi\030\004 \001(\002\022\016\n\006length\030\005 \001(\005\"\326\002\n\010Phy_stat\022\026"
      "\n\016host_timestamp\030\001 \001(\004\022\026\n\016fpga_timestamp"
      "\030\002 \001(\004\022\r\n\005frame\030\003 \001(\r\022\014\n\004slot\030\004 \001(\r\022\n\n\002c"
      "h\030\005 \001(\r\022\013\n\003mcs\030\006 \001(\r\022\024\n\014num_cb_total\030\007 \001"
      "(\r\022\022\n\nnum_cb_err\030\010 \001(\r\022\036\n\026wrong_decoding"
      "_counter\030\t \001(\r\022,\n\007tx_stat\030\n \001(\0132\031.commun"
      "icator.Phy_tx_statH\000\022,\n\007rx_stat\030\013 \001(\0132\031."
      "communicator.Phy_rx_statH\000\0226\n\014sensing_st"
      "at\030\014 \001(\0132\036.communicator.Phy_sensing_stat"
      "H\000B\006\n\004stat\"\224\003\n\014Mac_ack_stat\022\033\n\023destinati"
      "on_address\030\001 \001(\004\0224\n\006status\030\002 \001(\0162$.commu"
      "nicator.Mac_ack_stat.AckStatus\022\013\n\003mcs\030\003 "
      "\001(\r\022\017\n\007tx_gain\030\004 \001(\r\022\014\n\004port\030\005 \001(\r\022\024\n\014pa"
      "yload_size\030\006 \001(\r\022\022\n\ntx_channel\030\007 \001(\r\022\022\n\n"
      "slot_index\030\010 \001(\r\022\023\n\013max_retries\030\t \001(\r\022\023\n"
      "\013num_retries\030\n \001(\r\022\031\n\021bytes_transmitted\030"
      "\013 \001(\004\0221\n\016receiver_stats\030\014 \001(\0132\031.communic"
      "ator.Phy_rx_stat\"O\n\tAckStatus\022\025\n\021ACKSTAT"
      "US_UNKNOWN\020\000\022\025\n\021ACKSTATUS_SUCCESS\020\001\022\024\n\020A"
      "CKSTATUS_FAILED\020\002\";\n\013Mac_tx_stat\022,\n\010ack_"
      "stat\030\001 \003(\0132\032.communicator.Mac_ack_stat\"b"
      "\n\013Mac_rx_stat\022\036\n\026num_byte_overflow_drop\030"
      "\001 \001(\r\022\013\n\003crc\030\002 \001(\010\022\022\n\ntx_channel\030\003 \001(\r\022\022"
      "\n\nslot_index\030\004 \001(\r\"\364\002\n\016Mac_queue_stat\022\027\n"
      "\017high_queue_size\030\001 \001(\r\022\036\n\026high_messages_"
      "in_queue\030\002 \001(\r\022\037\n\027high_pkts_lost_overflo"
      "w\030\003 \001(\r\022 \n\030high_average_queue_delay\030\004 \001("
      "\r\022\026\n\016low_queue_size\030\005 \001(\r\022\035\n\025low_message"
      "s_in_queue\030\006 \001(\r\022\036\n\026low_pkts_lost_overfl"
      "ow\030\007 \001(\r\022\037\n\027low_average_queue_delay\030\010 \001("
      "\r\022=\n\tqueue_inf\030\t \003(\0132*.communicator.Mac_"
      "queue_stat.QueueInfEntry\032/\n\rQueueInfEntr"
      "y\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\r:\0028\001\"\311\004\n\010Ma"
      "c_stat\022\031\n\021average_mac_delay\030\001 \001(\r\022\025\n\rpkt"
      "s_lost_mac\030\002 \001(\r\022\026\n\016host_timestamp\030\003 \001(\004"
      "\022\026\n\016fpga_timestamp\030\004 \001(\004\022\r\n\005frame\030\005 \001(\004\022"
      "=\n\nrx_tx_stat\030\006 \001(\0132\'.communicator.Mac_s"
      "tat.Cell_informationH\000\0222\n\nqueue_stat\030\007 \001"
      "(\0132\034.communicator.Mac_queue_statH\000\0229\n\tse"
      "nd_stat\030\010 \001(\0132$.communicator.Mac_stat.Ma"
      "c_send_statH\000\032\311\001\n\020Cell_information\022\n\n\002ch"
      "\030\001 \001(\r\022\014\n\004slot\030\002 \001(\r\022\026\n\016num_byte_total\030\003"
      " \001(\r\022\031\n\021num_byte_crc_drop\030\004 \001(\r\022,\n\007tx_st"
      "at\030\005 \001(\0132\031.communicator.Mac_tx_statH\000\022,\n"
      "\007rx_stat\030\006 \001(\0132\031.communicator.Mac_rx_sta"
      "tH\000B\014\n\nrx_tx_stat\032J\n\rMac_send_stat\022\027\n\017st"
      "art_timestamp\030\001 \001(\004\022\024\n\014packet_count\030\002 \001("
      "\r\022\n\n\002ch\030\003 \001(\rB\006\n\004stat\"m\n\020RF_timeslot_sta"
      "t\022\026\n\016host_timestamp\030\001 \001(\004\022\026\n\016fpga_timest"
      "amp\030\002 \001(\004\022\r\n\005frame\030\003 \001(\004\022\014\n\004slot\030\004 \001(\r\022\014"
      "\n\004rssi\030\005 \003(\001\"8\n\007RF_stat\022-\n\005stats\030\001 \003(\0132\036"
      ".communicator.RF_timeslot_stat\"\217\003\n\020Appli"
      "cation_data\022\020\n\010next_mac\030\001 \001(\004\022\026\n\016destina"
      "tion_ip\030\002 \001(\007\022\?\n\013packet_type\030\003 \001(\0162*.com"
      "municator.Application_data.PACKET_TYPE\022C"
      "\n\rtraffic_class\030\004 \001(\0162,.communicator.App"
      "lication_data.TRAFFIC_CLASS\022\020\n\010priority\030"
      "\005 \001(\r\022\014\n\004data\030\006 \001(\014\022\021\n\ttimestamp\030\007 \001(\004\";"
      "\n\013PACKET_TYPE\022\027\n\023PACKET_TYPE_UNKNOWN\020\000\022\t"
      "\n\004IPv4\020\200\020\022\010\n\003ARP\020\206\020\"[\n\rTRAFFIC_CLASS\022\030\n\024"
      "TRAFFIC_CLASS_UNKOWN\020\000\022\010\n\004VoIP\020\001\022\007\n\003FTP\020"
      "\002\022\010\n\004HTTP\020\003\022\006\n\002AI\020\016\022\013\n\007CONTROL\020\017\"u\n\022Link"
      "_MCS_TxGain_BW\022\027\n\017destination_mac\030\001 \001(\004\022"
      "\013\n\003mcs\030\002 \001(\r\022\017\n\007tx_gain\030\003 \001(\r\022(\n\010bw_inde"
      "x\030\004 \001(\0162\026.communicator.BW_INDEX\":\n\013MFTDM"
      "A_Slot\022\025\n\rfrequency_num\030\001 \001(\r\022\024\n\014timeslo"
      "t_num\030\002 \001(\r\"8\n\026Proposed_Slots_Request\022\013\n"
      "\003mac\030\001 \001(\004\022\021\n\tnum_slots\030\002 \001(\r\"G\n\016Propose"
      "d_Slots\022\013\n\003mac\030\001 \001(\004\022(\n\005slots\030\002 \003(\0132\031.co"
      "mmunicator.MFTDMA_Slot\"y\n\023Proposed_Move_"
      "Slots\022\013\n\003mac\030\001 \001(\004\022+\n\010old_slot\030\002 \001(\0132\031.c"
      "ommunicator.MFTDMA_Slot\022(\n\005slots\030\003 \003(\0132\031"
      ".communicator.MFTDMA_Slot\"E\n\rSelected_Sl"
      "ot\022\013\n\003mac\030\001 \001(\004\022\'\n\004slot\030\002 \001(\0132\031.communic"
      "ator.MFTDMA_Slot\"{\n\022Selected_Move_Slot\022\013"
      "\n\003mac\030\001 \001(\004\022+\n\010old_slot\030\002 \001(\0132\031.communic"
      "ator.MFTDMA_Slot\022+\n\010new_slot\030\003 \001(\0132\031.com"
      "municator.MFTDMA_Slot\"e\n\030External_Slot_A"
      "llocation\022\017\n\007src_mac\030\001 \001(\004\022\017\n\007dst_mac\030\002 "
      "\001(\004\022\'\n\004slot\030\003 \001(\0132\031.communicator.MFTDMA_"
      "Slot\"b\n\025External_Slot_Removal\022\017\n\007src_mac"
      "\030\001 \001(\004\022\017\n\007dst_mac\030\002 \001(\004\022\'\n\004slot\030\003 \001(\0132\031."
      "communicator.MFTDMA_Slot\"A\n\025BC_Slots_Ann"
      "ouncement\022(\n\005slots\030\001 \003(\0132\031.communicator."
      "MFTDMA_Slot\"n\n\017Slot_Allocation\022\013\n\003mac\030\001 "
      "\001(\004\022\'\n\004slot\030\002 \001(\0132\031.communicator.MFTDMA_"
      "Slot\022%\n\004mode\030\003 \001(\0162\027.communicator.SLOT_M"
      "ODE\"D\n\014Slot_Removal\022\013\n\003mac\030\001 \001(\004\022\'\n\004slot"
      "\030\002 \001(\0132\031.communicator.MFTDMA_Slot\"\231\001\n\tSl"
      "ot_Move\022\013\n\003mac\030\001 \001(\004\022+\n\010old_slot\030\002 \001(\0132\031"
      ".communicator.MFTDMA_Slot\022+\n\010new_slot\030\003 "
      "\001(\0132\031.communicator.MFTDMA_Slot\022%\n\004mode\030\004"
      " \001(\0162\027.communicator.SLOT_MODE\"\220\001\n\022Extern"
      "al_Slot_Move\022\017\n\007src_mac\030\001 \001(\004\022\017\n\007dst_mac"
      "\030\002 \001(\004\022+\n\010old_slot\030\003 \001(\0132\031.communicator."
      "MFTDMA_Slot\022+\n\010new_slot\030\004 \001(\0132\031.communic"
      "ator.MFTDMA_Slot\"\217\003\n\003Get\0222\n\tattribute\030\001 "
      "\001(\0162\037.communicator.Get.GET_ATTRIBUTE\022<\n\014"
      "slot_request\030\002 \001(\0132$.communicator.Propos"
      "ed_Slots_RequestH\000\0226\n\016proposed_slots\030\003 \001"
      "(\0132\034.communicator.Proposed_SlotsH\000\022@\n\023pr"
      "oposed_move_slots\030\004 \001(\0132!.communicator.P"
      "roposed_Move_SlotsH\000\"\220\001\n\rGET_ATTRIBUTE\022\025"
      "\n\021ATTRIBUTE_UNKNOWN\020\000\022\026\n\021PHY_BASIC_CONTR"
      "OL\020\201\002\022\016\n\tMAC_STATS\020\201\004\022\023\n\016PROPOSED_SLOTS\020"
      "\201\006\022\022\n\rSELECTED_SLOT\020\202\006\022\027\n\022SELECTED_MOVE_"
      "SLOT\020\203\006B\t\n\007payload\"\234\002\n\005Get_r\022*\n\010mac_stat"
      "\030\001 \001(\0132\026.communicator.Mac_statH\000\022.\n\nbasi"
      "c_ctrl\030\002 \001(\0132\030.communicator.Basic_ctrlH\000"
      "\0226\n\016proposed_slots\030\003 \001(\0132\034.communicator."
      "Proposed_SlotsH\000\0224\n\rselected_slot\030\004 \001(\0132"
      "\033.communicator.Selected_SlotH\000\022>\n\022select"
      "ed_move_slot\030\005 \001(\0132 .communicator.Select"
      "ed_Move_SlotH\000B\t\n\007payload\"\353\004\n\003Set\0229\n\rmcs"
      "_txgain_bw\030\001 \001(\0132 .communicator.Link_MCS"
      "_TxGain_BWH\000\022\014\n\002ch\030\002 \001(\rH\000\022J\n\030external_s"
      "lot_allocation\030\003 \001(\0132&.communicator.Exte"
      "rnal_Slot_AllocationH\000\022D\n\025external_slot_"
      "removal\030\004 \001(\0132#.communicator.External_Sl"
      "ot_RemovalH\000\0228\n\017slot_allocation\030\005 \001(\0132\035."
      "communicator.Slot_AllocationH\000\0222\n\014slot_r"
      "emoval\030\006 \001(\0132\032.communicator.Slot_Removal"
      "H\000\022D\n\025bc_slots_announcement\030\007 \001(\0132#.comm"
      "unicator.BC_Slots_AnnouncementH\000\022\032\n\020outc"
      "omes_updated\030\010 \001(\010H\000\022>\n\022external_slot_mo"
      "ve\030\t \001(\0132 .communicator.External_Slot_Mo"
      "veH\000\022@\n\023proposed_move_slots\030\n \001(\0132!.comm"
      "unicator.Proposed_Move_SlotsH\000\022,\n\tslot_m"
      "ove\030\013 \001(\0132\027.communicator.Slot_MoveH\000B\t\n\007"
      "payload\"9\n\005Set_r\0220\n\006result\030\001 \001(\0162 .commu"
      "nicator.TRANSACTION_RESULT\"f\n\004Send\0220\n\010ap"
      "p_data\030\001 \001(\0132\036.communicator.Application_"
      "data\022,\n\nbasic_ctrl\030\002 \001(\0132\030.communicator."
      "Basic_ctrl\"\237\001\n\006Send_r\0220\n\006result\030\001 \001(\0162 ."
      "communicator.TRANSACTION_RESULT\022*\n\010phy_s"
      "tat\030\002 \001(\0132\026.communicator.Phy_statH\000\022,\n\nm"
      "ac_result\030\003 \001(\0132\026.communicator.Mac_statH"
      "\000B\t\n\007payload\"T\n\007Receive\022.\n\nbasic_ctrl\030\001 "
      "\001(\0132\030.communicator.Basic_ctrlH\000\022\016\n\004data\030"
      "\002 \001(\014H\000B\t\n\007payload\"q\n\tReceive_r\0220\n\006resul"
      "t\030\001 \001(\0162 .communicator.TRANSACTION_RESUL"
      "T\022\014\n\004data\030\002 \001(\014\022$\n\004stat\030\003 \001(\0132\026.communic"
      "ator.Phy_stat\"p\n\005Stats\022\023\n\013mac_address\030\001 "
      "\001(\004\022(\n\010phy_stat\030\002 \001(\0132\026.communicator.Phy"
      "_stat\022(\n\010mac_stat\030\003 \001(\0132\026.communicator.M"
      "ac_stat\"\353\003\n\010Internal\022\031\n\021transaction_inde"
      "x\030\001 \001(\004\022*\n\014owner_module\030\002 \001(\0162\024.communic"
      "ator.MODULE\022 \n\003get\030\003 \001(\0132\021.communicator."
      "GetH\000\022#\n\004getr\030\004 \001(\0132\023.communicator.Get_r"
      "H\000\022 \n\003set\030\005 \001(\0132\021.communicator.SetH\000\022#\n\004"
      "setr\030\006 \001(\0132\023.communicator.Set_rH\000\022\"\n\004sen"
      "d\030\007 \001(\0132\022.communicator.SendH\000\022%\n\005sendr\030\010"
      " \001(\0132\024.communicator.Send_rH\000\022(\n\007receive\030"
      "\t \001(\0132\025.communicator.ReceiveH\000\022+\n\010receiv"
      "er\030\n \001(\0132\027.communicator.Receive_rH\000\022$\n\005s"
      "tats\030\013 \001(\0132\023.communicator.StatsH\000\0227\n\021ext"
      "ernalAImessage\030\014 \001(\0132\032.aiCommunicator.In"
      "ternalAIH\000B\t\n\007payload*\255\002\n\006MODULE\022\022\n\016MODU"
      "LE_UNKNOWN\020\000\022\016\n\nMODULE_PHY\020\001\022\016\n\nMODULE_M"
      "AC\020\002\022\r\n\tMODULE_AI\020\003\022\021\n\rMODULE_RF_MON\020\004\022\016"
      "\n\nMODULE_APP\020\005\022\026\n\022MODULE_PHY_DEBUG_1\020\006\022\026"
      "\n\022MODULE_PHY_DEBUG_2\020\007\022\026\n\022MODULE_MAC_DEB"
      "UG_1\020\010\022\026\n\022MODULE_MAC_DEBUG_2\020\t\022\024\n\020MODULE"
      "_RADIO_API\020\n\022\024\n\020MODULE_NODE_COMM\020\013\022\027\n\023MO"
      "DULE_GATEWAY_COMM\020\014\022\030\n\024MODULE_COLLAB_CLI"
      "ENT\020\r*c\n\022TRANSACTION_RESULT\022\036\n\032TRANSACTI"
      "ON_RESULT_UNKNOWN\020\000\022\006\n\002OK\020d\022\007\n\003NOK\020e\022\013\n\007"
      "TIMEOUT\020f\022\017\n\013LBT_TIMEOUT\020g*g\n\010BW_INDEX\022\024"
      "\n\020BW_INDEX_UNKNOWN\020\000\022\016\n\nOneDotFour\020\001\022\t\n\005"
      "Three\020\002\022\010\n\004Five\020\003\022\007\n\003Ten\020\004\022\013\n\007Fifteen\020\005\022"
      "\n\n\006Twenty\020\006*2\n\tSLOT_MODE\022\025\n\021SLOT_MODE_UN"
      "KNOWN\020\000\022\006\n\002RX\020\001\022\006\n\002TX\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7911);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interf.proto", &protobuf_RegisterTypes);
  ::aiCommunicator::protobuf_interAI_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_interf_2eproto

const ::google::protobuf::EnumDescriptor* Basic_ctrl_TRX_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[0];
}
bool Basic_ctrl_TRX_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Basic_ctrl_TRX Basic_ctrl::TRX_UNKNOWN;
const Basic_ctrl_TRX Basic_ctrl::RX;
const Basic_ctrl_TRX Basic_ctrl::TX;
const Basic_ctrl_TRX Basic_ctrl::TRX_MIN;
const Basic_ctrl_TRX Basic_ctrl::TRX_MAX;
const int Basic_ctrl::TRX_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mac_ack_stat_AckStatus_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[1];
}
bool Mac_ack_stat_AckStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mac_ack_stat_AckStatus Mac_ack_stat::ACKSTATUS_UNKNOWN;
const Mac_ack_stat_AckStatus Mac_ack_stat::ACKSTATUS_SUCCESS;
const Mac_ack_stat_AckStatus Mac_ack_stat::ACKSTATUS_FAILED;
const Mac_ack_stat_AckStatus Mac_ack_stat::AckStatus_MIN;
const Mac_ack_stat_AckStatus Mac_ack_stat::AckStatus_MAX;
const int Mac_ack_stat::AckStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Application_data_PACKET_TYPE_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[2];
}
bool Application_data_PACKET_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 2048:
    case 2054:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Application_data_PACKET_TYPE Application_data::PACKET_TYPE_UNKNOWN;
const Application_data_PACKET_TYPE Application_data::IPv4;
const Application_data_PACKET_TYPE Application_data::ARP;
const Application_data_PACKET_TYPE Application_data::PACKET_TYPE_MIN;
const Application_data_PACKET_TYPE Application_data::PACKET_TYPE_MAX;
const int Application_data::PACKET_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Application_data_TRAFFIC_CLASS_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[3];
}
bool Application_data_TRAFFIC_CLASS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Application_data_TRAFFIC_CLASS Application_data::TRAFFIC_CLASS_UNKOWN;
const Application_data_TRAFFIC_CLASS Application_data::VoIP;
const Application_data_TRAFFIC_CLASS Application_data::FTP;
const Application_data_TRAFFIC_CLASS Application_data::HTTP;
const Application_data_TRAFFIC_CLASS Application_data::AI;
const Application_data_TRAFFIC_CLASS Application_data::CONTROL;
const Application_data_TRAFFIC_CLASS Application_data::TRAFFIC_CLASS_MIN;
const Application_data_TRAFFIC_CLASS Application_data::TRAFFIC_CLASS_MAX;
const int Application_data::TRAFFIC_CLASS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Get_GET_ATTRIBUTE_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[4];
}
bool Get_GET_ATTRIBUTE_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 513:
    case 769:
    case 770:
    case 771:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Get_GET_ATTRIBUTE Get::ATTRIBUTE_UNKNOWN;
const Get_GET_ATTRIBUTE Get::PHY_BASIC_CONTROL;
const Get_GET_ATTRIBUTE Get::MAC_STATS;
const Get_GET_ATTRIBUTE Get::PROPOSED_SLOTS;
const Get_GET_ATTRIBUTE Get::SELECTED_SLOT;
const Get_GET_ATTRIBUTE Get::SELECTED_MOVE_SLOT;
const Get_GET_ATTRIBUTE Get::GET_ATTRIBUTE_MIN;
const Get_GET_ATTRIBUTE Get::GET_ATTRIBUTE_MAX;
const int Get::GET_ATTRIBUTE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MODULE_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[5];
}
bool MODULE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TRANSACTION_RESULT_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[6];
}
bool TRANSACTION_RESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BW_INDEX_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[7];
}
bool BW_INDEX_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SLOT_MODE_descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_enum_descriptors[8];
}
bool SLOT_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Basic_ctrl::kTrxFlagFieldNumber;
const int Basic_ctrl::kSendToFieldNumber;
const int Basic_ctrl::kBwIndexFieldNumber;
const int Basic_ctrl::kChFieldNumber;
const int Basic_ctrl::kFrameFieldNumber;
const int Basic_ctrl::kSlotFieldNumber;
const int Basic_ctrl::kTimestampFieldNumber;
const int Basic_ctrl::kMcsFieldNumber;
const int Basic_ctrl::kGainFieldNumber;
const int Basic_ctrl::kRfBoostFieldNumber;
const int Basic_ctrl::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Basic_ctrl::Basic_ctrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Basic_ctrl)
}
Basic_ctrl::Basic_ctrl(const Basic_ctrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trx_flag_, &from.trx_flag_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&trx_flag_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:communicator.Basic_ctrl)
}

void Basic_ctrl::SharedCtor() {
  ::memset(&trx_flag_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&trx_flag_) + sizeof(length_));
  _cached_size_ = 0;
}

Basic_ctrl::~Basic_ctrl() {
  // @@protoc_insertion_point(destructor:communicator.Basic_ctrl)
  SharedDtor();
}

void Basic_ctrl::SharedDtor() {
}

void Basic_ctrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Basic_ctrl::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Basic_ctrl& Basic_ctrl::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Basic_ctrl* Basic_ctrl::New(::google::protobuf::Arena* arena) const {
  Basic_ctrl* n = new Basic_ctrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Basic_ctrl::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Basic_ctrl)
  ::memset(&trx_flag_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&trx_flag_) + sizeof(length_));
}

bool Basic_ctrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Basic_ctrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Basic_ctrl.TRX trx_flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trx_flag(static_cast< ::communicator::Basic_ctrl_TRX >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 send_to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.BW_INDEX bw_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bw_index(static_cast< ::communicator::BW_INDEX >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gain = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rf_boost = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rf_boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Basic_ctrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Basic_ctrl)
  return false;
#undef DO_
}

void Basic_ctrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Basic_ctrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Basic_ctrl.TRX trx_flag = 1;
  if (this->trx_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trx_flag(), output);
  }

  // uint32 send_to = 2;
  if (this->send_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_to(), output);
  }

  // .communicator.BW_INDEX bw_index = 3;
  if (this->bw_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bw_index(), output);
  }

  // uint32 ch = 4;
  if (this->ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ch(), output);
  }

  // uint32 frame = 5;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->frame(), output);
  }

  // uint32 slot = 6;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slot(), output);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  // uint32 mcs = 8;
  if (this->mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mcs(), output);
  }

  // int32 gain = 9;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gain(), output);
  }

  // float rf_boost = 10;
  if (this->rf_boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->rf_boost(), output);
  }

  // uint32 length = 11;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Basic_ctrl)
}

::google::protobuf::uint8* Basic_ctrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Basic_ctrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Basic_ctrl.TRX trx_flag = 1;
  if (this->trx_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trx_flag(), target);
  }

  // uint32 send_to = 2;
  if (this->send_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_to(), target);
  }

  // .communicator.BW_INDEX bw_index = 3;
  if (this->bw_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bw_index(), target);
  }

  // uint32 ch = 4;
  if (this->ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ch(), target);
  }

  // uint32 frame = 5;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->frame(), target);
  }

  // uint32 slot = 6;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slot(), target);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  // uint32 mcs = 8;
  if (this->mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mcs(), target);
  }

  // int32 gain = 9;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gain(), target);
  }

  // float rf_boost = 10;
  if (this->rf_boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->rf_boost(), target);
  }

  // uint32 length = 11;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Basic_ctrl)
  return target;
}

size_t Basic_ctrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Basic_ctrl)
  size_t total_size = 0;

  // .communicator.Basic_ctrl.TRX trx_flag = 1;
  if (this->trx_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trx_flag());
  }

  // uint32 send_to = 2;
  if (this->send_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->send_to());
  }

  // .communicator.BW_INDEX bw_index = 3;
  if (this->bw_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bw_index());
  }

  // uint32 ch = 4;
  if (this->ch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ch());
  }

  // uint32 frame = 5;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame());
  }

  // uint32 slot = 6;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 mcs = 8;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcs());
  }

  // int32 gain = 9;
  if (this->gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gain());
  }

  // float rf_boost = 10;
  if (this->rf_boost() != 0) {
    total_size += 1 + 4;
  }

  // uint32 length = 11;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Basic_ctrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Basic_ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  const Basic_ctrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Basic_ctrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Basic_ctrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Basic_ctrl)
    MergeFrom(*source);
  }
}

void Basic_ctrl::MergeFrom(const Basic_ctrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Basic_ctrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trx_flag() != 0) {
    set_trx_flag(from.trx_flag());
  }
  if (from.send_to() != 0) {
    set_send_to(from.send_to());
  }
  if (from.bw_index() != 0) {
    set_bw_index(from.bw_index());
  }
  if (from.ch() != 0) {
    set_ch(from.ch());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.mcs() != 0) {
    set_mcs(from.mcs());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.rf_boost() != 0) {
    set_rf_boost(from.rf_boost());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Basic_ctrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Basic_ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Basic_ctrl::CopyFrom(const Basic_ctrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Basic_ctrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Basic_ctrl::IsInitialized() const {
  return true;
}

void Basic_ctrl::Swap(Basic_ctrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Basic_ctrl::InternalSwap(Basic_ctrl* other) {
  std::swap(trx_flag_, other->trx_flag_);
  std::swap(send_to_, other->send_to_);
  std::swap(bw_index_, other->bw_index_);
  std::swap(ch_, other->ch_);
  std::swap(frame_, other->frame_);
  std::swap(slot_, other->slot_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(mcs_, other->mcs_);
  std::swap(gain_, other->gain_);
  std::swap(rf_boost_, other->rf_boost_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Basic_ctrl::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Basic_ctrl

// .communicator.Basic_ctrl.TRX trx_flag = 1;
void Basic_ctrl::clear_trx_flag() {
  trx_flag_ = 0;
}
::communicator::Basic_ctrl_TRX Basic_ctrl::trx_flag() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.trx_flag)
  return static_cast< ::communicator::Basic_ctrl_TRX >(trx_flag_);
}
void Basic_ctrl::set_trx_flag(::communicator::Basic_ctrl_TRX value) {
  
  trx_flag_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.trx_flag)
}

// uint32 send_to = 2;
void Basic_ctrl::clear_send_to() {
  send_to_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::send_to() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.send_to)
  return send_to_;
}
void Basic_ctrl::set_send_to(::google::protobuf::uint32 value) {
  
  send_to_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.send_to)
}

// .communicator.BW_INDEX bw_index = 3;
void Basic_ctrl::clear_bw_index() {
  bw_index_ = 0;
}
::communicator::BW_INDEX Basic_ctrl::bw_index() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.bw_index)
  return static_cast< ::communicator::BW_INDEX >(bw_index_);
}
void Basic_ctrl::set_bw_index(::communicator::BW_INDEX value) {
  
  bw_index_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.bw_index)
}

// uint32 ch = 4;
void Basic_ctrl::clear_ch() {
  ch_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::ch() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.ch)
  return ch_;
}
void Basic_ctrl::set_ch(::google::protobuf::uint32 value) {
  
  ch_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.ch)
}

// uint32 frame = 5;
void Basic_ctrl::clear_frame() {
  frame_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::frame() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.frame)
  return frame_;
}
void Basic_ctrl::set_frame(::google::protobuf::uint32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.frame)
}

// uint32 slot = 6;
void Basic_ctrl::clear_slot() {
  slot_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.slot)
  return slot_;
}
void Basic_ctrl::set_slot(::google::protobuf::uint32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.slot)
}

// uint64 timestamp = 7;
void Basic_ctrl::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Basic_ctrl::timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.timestamp)
  return timestamp_;
}
void Basic_ctrl::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.timestamp)
}

// uint32 mcs = 8;
void Basic_ctrl::clear_mcs() {
  mcs_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::mcs() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.mcs)
  return mcs_;
}
void Basic_ctrl::set_mcs(::google::protobuf::uint32 value) {
  
  mcs_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.mcs)
}

// int32 gain = 9;
void Basic_ctrl::clear_gain() {
  gain_ = 0;
}
::google::protobuf::int32 Basic_ctrl::gain() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.gain)
  return gain_;
}
void Basic_ctrl::set_gain(::google::protobuf::int32 value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.gain)
}

// float rf_boost = 10;
void Basic_ctrl::clear_rf_boost() {
  rf_boost_ = 0;
}
float Basic_ctrl::rf_boost() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.rf_boost)
  return rf_boost_;
}
void Basic_ctrl::set_rf_boost(float value) {
  
  rf_boost_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.rf_boost)
}

// uint32 length = 11;
void Basic_ctrl::clear_length() {
  length_ = 0u;
}
::google::protobuf::uint32 Basic_ctrl::length() const {
  // @@protoc_insertion_point(field_get:communicator.Basic_ctrl.length)
  return length_;
}
void Basic_ctrl::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:communicator.Basic_ctrl.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phy_tx_stat::kPowerFieldNumber;
const int Phy_tx_stat::kChannelFreeCntFieldNumber;
const int Phy_tx_stat::kChannelBusyCntFieldNumber;
const int Phy_tx_stat::kFreeEnergyFieldNumber;
const int Phy_tx_stat::kBusyEnergyFieldNumber;
const int Phy_tx_stat::kTotalDroppedSlotsFieldNumber;
const int Phy_tx_stat::kCodingTimeFieldNumber;
const int Phy_tx_stat::kRfBoostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phy_tx_stat::Phy_tx_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Phy_tx_stat)
}
Phy_tx_stat::Phy_tx_stat(const Phy_tx_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_free_cnt_, &from.channel_free_cnt_,
    reinterpret_cast<char*>(&rf_boost_) -
    reinterpret_cast<char*>(&channel_free_cnt_) + sizeof(rf_boost_));
  // @@protoc_insertion_point(copy_constructor:communicator.Phy_tx_stat)
}

void Phy_tx_stat::SharedCtor() {
  ::memset(&channel_free_cnt_, 0, reinterpret_cast<char*>(&rf_boost_) -
    reinterpret_cast<char*>(&channel_free_cnt_) + sizeof(rf_boost_));
  _cached_size_ = 0;
}

Phy_tx_stat::~Phy_tx_stat() {
  // @@protoc_insertion_point(destructor:communicator.Phy_tx_stat)
  SharedDtor();
}

void Phy_tx_stat::SharedDtor() {
}

void Phy_tx_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phy_tx_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phy_tx_stat& Phy_tx_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phy_tx_stat* Phy_tx_stat::New(::google::protobuf::Arena* arena) const {
  Phy_tx_stat* n = new Phy_tx_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phy_tx_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Phy_tx_stat)
  ::memset(&channel_free_cnt_, 0, reinterpret_cast<char*>(&rf_boost_) -
    reinterpret_cast<char*>(&channel_free_cnt_) + sizeof(rf_boost_));
}

bool Phy_tx_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Phy_tx_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 power = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 channel_free_cnt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_free_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 channel_busy_cnt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_busy_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float free_energy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &free_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float busy_energy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &busy_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_dropped_slots = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_dropped_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coding_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coding_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rf_boost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rf_boost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Phy_tx_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Phy_tx_stat)
  return false;
#undef DO_
}

void Phy_tx_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Phy_tx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->power(), output);
  }

  // uint64 channel_free_cnt = 2;
  if (this->channel_free_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_free_cnt(), output);
  }

  // uint64 channel_busy_cnt = 3;
  if (this->channel_busy_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->channel_busy_cnt(), output);
  }

  // float free_energy = 4;
  if (this->free_energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->free_energy(), output);
  }

  // float busy_energy = 5;
  if (this->busy_energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->busy_energy(), output);
  }

  // uint64 total_dropped_slots = 6;
  if (this->total_dropped_slots() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->total_dropped_slots(), output);
  }

  // float coding_time = 7;
  if (this->coding_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->coding_time(), output);
  }

  // float rf_boost = 8;
  if (this->rf_boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rf_boost(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Phy_tx_stat)
}

::google::protobuf::uint8* Phy_tx_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Phy_tx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 power = 1;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->power(), target);
  }

  // uint64 channel_free_cnt = 2;
  if (this->channel_free_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_free_cnt(), target);
  }

  // uint64 channel_busy_cnt = 3;
  if (this->channel_busy_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->channel_busy_cnt(), target);
  }

  // float free_energy = 4;
  if (this->free_energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->free_energy(), target);
  }

  // float busy_energy = 5;
  if (this->busy_energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->busy_energy(), target);
  }

  // uint64 total_dropped_slots = 6;
  if (this->total_dropped_slots() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->total_dropped_slots(), target);
  }

  // float coding_time = 7;
  if (this->coding_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->coding_time(), target);
  }

  // float rf_boost = 8;
  if (this->rf_boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rf_boost(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Phy_tx_stat)
  return target;
}

size_t Phy_tx_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Phy_tx_stat)
  size_t total_size = 0;

  // uint64 channel_free_cnt = 2;
  if (this->channel_free_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->channel_free_cnt());
  }

  // int32 power = 1;
  if (this->power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->power());
  }

  // float free_energy = 4;
  if (this->free_energy() != 0) {
    total_size += 1 + 4;
  }

  // uint64 channel_busy_cnt = 3;
  if (this->channel_busy_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->channel_busy_cnt());
  }

  // uint64 total_dropped_slots = 6;
  if (this->total_dropped_slots() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_dropped_slots());
  }

  // float busy_energy = 5;
  if (this->busy_energy() != 0) {
    total_size += 1 + 4;
  }

  // float coding_time = 7;
  if (this->coding_time() != 0) {
    total_size += 1 + 4;
  }

  // float rf_boost = 8;
  if (this->rf_boost() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phy_tx_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Phy_tx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Phy_tx_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phy_tx_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Phy_tx_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Phy_tx_stat)
    MergeFrom(*source);
  }
}

void Phy_tx_stat::MergeFrom(const Phy_tx_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Phy_tx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_free_cnt() != 0) {
    set_channel_free_cnt(from.channel_free_cnt());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.free_energy() != 0) {
    set_free_energy(from.free_energy());
  }
  if (from.channel_busy_cnt() != 0) {
    set_channel_busy_cnt(from.channel_busy_cnt());
  }
  if (from.total_dropped_slots() != 0) {
    set_total_dropped_slots(from.total_dropped_slots());
  }
  if (from.busy_energy() != 0) {
    set_busy_energy(from.busy_energy());
  }
  if (from.coding_time() != 0) {
    set_coding_time(from.coding_time());
  }
  if (from.rf_boost() != 0) {
    set_rf_boost(from.rf_boost());
  }
}

void Phy_tx_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Phy_tx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phy_tx_stat::CopyFrom(const Phy_tx_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Phy_tx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phy_tx_stat::IsInitialized() const {
  return true;
}

void Phy_tx_stat::Swap(Phy_tx_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phy_tx_stat::InternalSwap(Phy_tx_stat* other) {
  std::swap(channel_free_cnt_, other->channel_free_cnt_);
  std::swap(power_, other->power_);
  std::swap(free_energy_, other->free_energy_);
  std::swap(channel_busy_cnt_, other->channel_busy_cnt_);
  std::swap(total_dropped_slots_, other->total_dropped_slots_);
  std::swap(busy_energy_, other->busy_energy_);
  std::swap(coding_time_, other->coding_time_);
  std::swap(rf_boost_, other->rf_boost_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phy_tx_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phy_tx_stat

// int32 power = 1;
void Phy_tx_stat::clear_power() {
  power_ = 0;
}
::google::protobuf::int32 Phy_tx_stat::power() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.power)
  return power_;
}
void Phy_tx_stat::set_power(::google::protobuf::int32 value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.power)
}

// uint64 channel_free_cnt = 2;
void Phy_tx_stat::clear_channel_free_cnt() {
  channel_free_cnt_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_tx_stat::channel_free_cnt() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.channel_free_cnt)
  return channel_free_cnt_;
}
void Phy_tx_stat::set_channel_free_cnt(::google::protobuf::uint64 value) {
  
  channel_free_cnt_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.channel_free_cnt)
}

// uint64 channel_busy_cnt = 3;
void Phy_tx_stat::clear_channel_busy_cnt() {
  channel_busy_cnt_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_tx_stat::channel_busy_cnt() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.channel_busy_cnt)
  return channel_busy_cnt_;
}
void Phy_tx_stat::set_channel_busy_cnt(::google::protobuf::uint64 value) {
  
  channel_busy_cnt_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.channel_busy_cnt)
}

// float free_energy = 4;
void Phy_tx_stat::clear_free_energy() {
  free_energy_ = 0;
}
float Phy_tx_stat::free_energy() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.free_energy)
  return free_energy_;
}
void Phy_tx_stat::set_free_energy(float value) {
  
  free_energy_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.free_energy)
}

// float busy_energy = 5;
void Phy_tx_stat::clear_busy_energy() {
  busy_energy_ = 0;
}
float Phy_tx_stat::busy_energy() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.busy_energy)
  return busy_energy_;
}
void Phy_tx_stat::set_busy_energy(float value) {
  
  busy_energy_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.busy_energy)
}

// uint64 total_dropped_slots = 6;
void Phy_tx_stat::clear_total_dropped_slots() {
  total_dropped_slots_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_tx_stat::total_dropped_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.total_dropped_slots)
  return total_dropped_slots_;
}
void Phy_tx_stat::set_total_dropped_slots(::google::protobuf::uint64 value) {
  
  total_dropped_slots_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.total_dropped_slots)
}

// float coding_time = 7;
void Phy_tx_stat::clear_coding_time() {
  coding_time_ = 0;
}
float Phy_tx_stat::coding_time() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.coding_time)
  return coding_time_;
}
void Phy_tx_stat::set_coding_time(float value) {
  
  coding_time_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.coding_time)
}

// float rf_boost = 8;
void Phy_tx_stat::clear_rf_boost() {
  rf_boost_ = 0;
}
float Phy_tx_stat::rf_boost() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_tx_stat.rf_boost)
  return rf_boost_;
}
void Phy_tx_stat::set_rf_boost(float value) {
  
  rf_boost_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_tx_stat.rf_boost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phy_rx_stat::kGainFieldNumber;
const int Phy_rx_stat::kCqiFieldNumber;
const int Phy_rx_stat::kRssiFieldNumber;
const int Phy_rx_stat::kRsrpFieldNumber;
const int Phy_rx_stat::kRsrqFieldNumber;
const int Phy_rx_stat::kSinrFieldNumber;
const int Phy_rx_stat::kDetectionErrorsFieldNumber;
const int Phy_rx_stat::kDecodingErrorsFieldNumber;
const int Phy_rx_stat::kFillerBitsErrorFieldNumber;
const int Phy_rx_stat::kNofCbsExceedsSoftbufferSizeErrorFieldNumber;
const int Phy_rx_stat::kRateMatchingErrorFieldNumber;
const int Phy_rx_stat::kCbCrcErrorFieldNumber;
const int Phy_rx_stat::kTbCrcErrorFieldNumber;
const int Phy_rx_stat::kPeakValueFieldNumber;
const int Phy_rx_stat::kNoiseFieldNumber;
const int Phy_rx_stat::kDecodedCfiFieldNumber;
const int Phy_rx_stat::kFoundDciFieldNumber;
const int Phy_rx_stat::kLastNoiFieldNumber;
const int Phy_rx_stat::kTotalPacketsSynchronizedFieldNumber;
const int Phy_rx_stat::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phy_rx_stat::Phy_rx_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Phy_rx_stat)
}
Phy_rx_stat::Phy_rx_stat(const Phy_rx_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gain_, &from.gain_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&gain_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:communicator.Phy_rx_stat)
}

void Phy_rx_stat::SharedCtor() {
  ::memset(&gain_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&gain_) + sizeof(length_));
  _cached_size_ = 0;
}

Phy_rx_stat::~Phy_rx_stat() {
  // @@protoc_insertion_point(destructor:communicator.Phy_rx_stat)
  SharedDtor();
}

void Phy_rx_stat::SharedDtor() {
}

void Phy_rx_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phy_rx_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phy_rx_stat& Phy_rx_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phy_rx_stat* Phy_rx_stat::New(::google::protobuf::Arena* arena) const {
  Phy_rx_stat* n = new Phy_rx_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phy_rx_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Phy_rx_stat)
  ::memset(&gain_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&gain_) + sizeof(length_));
}

bool Phy_rx_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Phy_rx_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 gain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rssi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rsrp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rsrq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rsrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sinr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sinr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 detection_errors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &detection_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 decoding_errors = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &decoding_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 filler_bits_error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filler_bits_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nof_cbs_exceeds_softbuffer_size_error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nof_cbs_exceeds_softbuffer_size_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 rate_matching_error = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rate_matching_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cb_crc_error = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_crc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tb_crc_error = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tb_crc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float peak_value = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &peak_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float noise = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &noise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 decoded_cfi = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decoded_cfi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool found_dci = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_dci_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_noi = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_noi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_packets_synchronized = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_packets_synchronized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Phy_rx_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Phy_rx_stat)
  return false;
#undef DO_
}

void Phy_rx_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Phy_rx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gain = 1;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gain(), output);
  }

  // uint32 cqi = 2;
  if (this->cqi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cqi(), output);
  }

  // float rssi = 3;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rssi(), output);
  }

  // float rsrp = 4;
  if (this->rsrp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rsrp(), output);
  }

  // float rsrq = 5;
  if (this->rsrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rsrq(), output);
  }

  // float sinr = 6;
  if (this->sinr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sinr(), output);
  }

  // uint64 detection_errors = 7;
  if (this->detection_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->detection_errors(), output);
  }

  // uint64 decoding_errors = 8;
  if (this->decoding_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->decoding_errors(), output);
  }

  // uint64 filler_bits_error = 9;
  if (this->filler_bits_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->filler_bits_error(), output);
  }

  // uint64 nof_cbs_exceeds_softbuffer_size_error = 10;
  if (this->nof_cbs_exceeds_softbuffer_size_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->nof_cbs_exceeds_softbuffer_size_error(), output);
  }

  // uint64 rate_matching_error = 11;
  if (this->rate_matching_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->rate_matching_error(), output);
  }

  // uint64 cb_crc_error = 12;
  if (this->cb_crc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->cb_crc_error(), output);
  }

  // uint64 tb_crc_error = 13;
  if (this->tb_crc_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->tb_crc_error(), output);
  }

  // float peak_value = 14;
  if (this->peak_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->peak_value(), output);
  }

  // float noise = 15;
  if (this->noise() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->noise(), output);
  }

  // uint32 decoded_cfi = 16;
  if (this->decoded_cfi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->decoded_cfi(), output);
  }

  // bool found_dci = 17;
  if (this->found_dci() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->found_dci(), output);
  }

  // uint32 last_noi = 18;
  if (this->last_noi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->last_noi(), output);
  }

  // uint64 total_packets_synchronized = 19;
  if (this->total_packets_synchronized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->total_packets_synchronized(), output);
  }

  // int32 length = 20;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Phy_rx_stat)
}

::google::protobuf::uint8* Phy_rx_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Phy_rx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gain = 1;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gain(), target);
  }

  // uint32 cqi = 2;
  if (this->cqi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cqi(), target);
  }

  // float rssi = 3;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rssi(), target);
  }

  // float rsrp = 4;
  if (this->rsrp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rsrp(), target);
  }

  // float rsrq = 5;
  if (this->rsrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rsrq(), target);
  }

  // float sinr = 6;
  if (this->sinr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sinr(), target);
  }

  // uint64 detection_errors = 7;
  if (this->detection_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->detection_errors(), target);
  }

  // uint64 decoding_errors = 8;
  if (this->decoding_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->decoding_errors(), target);
  }

  // uint64 filler_bits_error = 9;
  if (this->filler_bits_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->filler_bits_error(), target);
  }

  // uint64 nof_cbs_exceeds_softbuffer_size_error = 10;
  if (this->nof_cbs_exceeds_softbuffer_size_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->nof_cbs_exceeds_softbuffer_size_error(), target);
  }

  // uint64 rate_matching_error = 11;
  if (this->rate_matching_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->rate_matching_error(), target);
  }

  // uint64 cb_crc_error = 12;
  if (this->cb_crc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->cb_crc_error(), target);
  }

  // uint64 tb_crc_error = 13;
  if (this->tb_crc_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->tb_crc_error(), target);
  }

  // float peak_value = 14;
  if (this->peak_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->peak_value(), target);
  }

  // float noise = 15;
  if (this->noise() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->noise(), target);
  }

  // uint32 decoded_cfi = 16;
  if (this->decoded_cfi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->decoded_cfi(), target);
  }

  // bool found_dci = 17;
  if (this->found_dci() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->found_dci(), target);
  }

  // uint32 last_noi = 18;
  if (this->last_noi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->last_noi(), target);
  }

  // uint64 total_packets_synchronized = 19;
  if (this->total_packets_synchronized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->total_packets_synchronized(), target);
  }

  // int32 length = 20;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Phy_rx_stat)
  return target;
}

size_t Phy_rx_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Phy_rx_stat)
  size_t total_size = 0;

  // int32 gain = 1;
  if (this->gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gain());
  }

  // uint32 cqi = 2;
  if (this->cqi() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cqi());
  }

  // float rssi = 3;
  if (this->rssi() != 0) {
    total_size += 1 + 4;
  }

  // float rsrp = 4;
  if (this->rsrp() != 0) {
    total_size += 1 + 4;
  }

  // float rsrq = 5;
  if (this->rsrq() != 0) {
    total_size += 1 + 4;
  }

  // float sinr = 6;
  if (this->sinr() != 0) {
    total_size += 1 + 4;
  }

  // uint64 detection_errors = 7;
  if (this->detection_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->detection_errors());
  }

  // uint64 decoding_errors = 8;
  if (this->decoding_errors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->decoding_errors());
  }

  // uint64 filler_bits_error = 9;
  if (this->filler_bits_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->filler_bits_error());
  }

  // uint64 nof_cbs_exceeds_softbuffer_size_error = 10;
  if (this->nof_cbs_exceeds_softbuffer_size_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nof_cbs_exceeds_softbuffer_size_error());
  }

  // uint64 rate_matching_error = 11;
  if (this->rate_matching_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->rate_matching_error());
  }

  // uint64 cb_crc_error = 12;
  if (this->cb_crc_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cb_crc_error());
  }

  // uint64 tb_crc_error = 13;
  if (this->tb_crc_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tb_crc_error());
  }

  // float peak_value = 14;
  if (this->peak_value() != 0) {
    total_size += 1 + 4;
  }

  // float noise = 15;
  if (this->noise() != 0) {
    total_size += 1 + 4;
  }

  // uint32 decoded_cfi = 16;
  if (this->decoded_cfi() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->decoded_cfi());
  }

  // bool found_dci = 17;
  if (this->found_dci() != 0) {
    total_size += 2 + 1;
  }

  // uint64 total_packets_synchronized = 19;
  if (this->total_packets_synchronized() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_packets_synchronized());
  }

  // uint32 last_noi = 18;
  if (this->last_noi() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_noi());
  }

  // int32 length = 20;
  if (this->length() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phy_rx_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Phy_rx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Phy_rx_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phy_rx_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Phy_rx_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Phy_rx_stat)
    MergeFrom(*source);
  }
}

void Phy_rx_stat::MergeFrom(const Phy_rx_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Phy_rx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.cqi() != 0) {
    set_cqi(from.cqi());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
  if (from.rsrp() != 0) {
    set_rsrp(from.rsrp());
  }
  if (from.rsrq() != 0) {
    set_rsrq(from.rsrq());
  }
  if (from.sinr() != 0) {
    set_sinr(from.sinr());
  }
  if (from.detection_errors() != 0) {
    set_detection_errors(from.detection_errors());
  }
  if (from.decoding_errors() != 0) {
    set_decoding_errors(from.decoding_errors());
  }
  if (from.filler_bits_error() != 0) {
    set_filler_bits_error(from.filler_bits_error());
  }
  if (from.nof_cbs_exceeds_softbuffer_size_error() != 0) {
    set_nof_cbs_exceeds_softbuffer_size_error(from.nof_cbs_exceeds_softbuffer_size_error());
  }
  if (from.rate_matching_error() != 0) {
    set_rate_matching_error(from.rate_matching_error());
  }
  if (from.cb_crc_error() != 0) {
    set_cb_crc_error(from.cb_crc_error());
  }
  if (from.tb_crc_error() != 0) {
    set_tb_crc_error(from.tb_crc_error());
  }
  if (from.peak_value() != 0) {
    set_peak_value(from.peak_value());
  }
  if (from.noise() != 0) {
    set_noise(from.noise());
  }
  if (from.decoded_cfi() != 0) {
    set_decoded_cfi(from.decoded_cfi());
  }
  if (from.found_dci() != 0) {
    set_found_dci(from.found_dci());
  }
  if (from.total_packets_synchronized() != 0) {
    set_total_packets_synchronized(from.total_packets_synchronized());
  }
  if (from.last_noi() != 0) {
    set_last_noi(from.last_noi());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Phy_rx_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Phy_rx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phy_rx_stat::CopyFrom(const Phy_rx_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Phy_rx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phy_rx_stat::IsInitialized() const {
  return true;
}

void Phy_rx_stat::Swap(Phy_rx_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phy_rx_stat::InternalSwap(Phy_rx_stat* other) {
  std::swap(gain_, other->gain_);
  std::swap(cqi_, other->cqi_);
  std::swap(rssi_, other->rssi_);
  std::swap(rsrp_, other->rsrp_);
  std::swap(rsrq_, other->rsrq_);
  std::swap(sinr_, other->sinr_);
  std::swap(detection_errors_, other->detection_errors_);
  std::swap(decoding_errors_, other->decoding_errors_);
  std::swap(filler_bits_error_, other->filler_bits_error_);
  std::swap(nof_cbs_exceeds_softbuffer_size_error_, other->nof_cbs_exceeds_softbuffer_size_error_);
  std::swap(rate_matching_error_, other->rate_matching_error_);
  std::swap(cb_crc_error_, other->cb_crc_error_);
  std::swap(tb_crc_error_, other->tb_crc_error_);
  std::swap(peak_value_, other->peak_value_);
  std::swap(noise_, other->noise_);
  std::swap(decoded_cfi_, other->decoded_cfi_);
  std::swap(found_dci_, other->found_dci_);
  std::swap(total_packets_synchronized_, other->total_packets_synchronized_);
  std::swap(last_noi_, other->last_noi_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phy_rx_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phy_rx_stat

// int32 gain = 1;
void Phy_rx_stat::clear_gain() {
  gain_ = 0;
}
::google::protobuf::int32 Phy_rx_stat::gain() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.gain)
  return gain_;
}
void Phy_rx_stat::set_gain(::google::protobuf::int32 value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.gain)
}

// uint32 cqi = 2;
void Phy_rx_stat::clear_cqi() {
  cqi_ = 0u;
}
::google::protobuf::uint32 Phy_rx_stat::cqi() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.cqi)
  return cqi_;
}
void Phy_rx_stat::set_cqi(::google::protobuf::uint32 value) {
  
  cqi_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.cqi)
}

// float rssi = 3;
void Phy_rx_stat::clear_rssi() {
  rssi_ = 0;
}
float Phy_rx_stat::rssi() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.rssi)
  return rssi_;
}
void Phy_rx_stat::set_rssi(float value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.rssi)
}

// float rsrp = 4;
void Phy_rx_stat::clear_rsrp() {
  rsrp_ = 0;
}
float Phy_rx_stat::rsrp() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.rsrp)
  return rsrp_;
}
void Phy_rx_stat::set_rsrp(float value) {
  
  rsrp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.rsrp)
}

// float rsrq = 5;
void Phy_rx_stat::clear_rsrq() {
  rsrq_ = 0;
}
float Phy_rx_stat::rsrq() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.rsrq)
  return rsrq_;
}
void Phy_rx_stat::set_rsrq(float value) {
  
  rsrq_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.rsrq)
}

// float sinr = 6;
void Phy_rx_stat::clear_sinr() {
  sinr_ = 0;
}
float Phy_rx_stat::sinr() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.sinr)
  return sinr_;
}
void Phy_rx_stat::set_sinr(float value) {
  
  sinr_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.sinr)
}

// uint64 detection_errors = 7;
void Phy_rx_stat::clear_detection_errors() {
  detection_errors_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::detection_errors() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.detection_errors)
  return detection_errors_;
}
void Phy_rx_stat::set_detection_errors(::google::protobuf::uint64 value) {
  
  detection_errors_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.detection_errors)
}

// uint64 decoding_errors = 8;
void Phy_rx_stat::clear_decoding_errors() {
  decoding_errors_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::decoding_errors() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.decoding_errors)
  return decoding_errors_;
}
void Phy_rx_stat::set_decoding_errors(::google::protobuf::uint64 value) {
  
  decoding_errors_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.decoding_errors)
}

// uint64 filler_bits_error = 9;
void Phy_rx_stat::clear_filler_bits_error() {
  filler_bits_error_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::filler_bits_error() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.filler_bits_error)
  return filler_bits_error_;
}
void Phy_rx_stat::set_filler_bits_error(::google::protobuf::uint64 value) {
  
  filler_bits_error_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.filler_bits_error)
}

// uint64 nof_cbs_exceeds_softbuffer_size_error = 10;
void Phy_rx_stat::clear_nof_cbs_exceeds_softbuffer_size_error() {
  nof_cbs_exceeds_softbuffer_size_error_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::nof_cbs_exceeds_softbuffer_size_error() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.nof_cbs_exceeds_softbuffer_size_error)
  return nof_cbs_exceeds_softbuffer_size_error_;
}
void Phy_rx_stat::set_nof_cbs_exceeds_softbuffer_size_error(::google::protobuf::uint64 value) {
  
  nof_cbs_exceeds_softbuffer_size_error_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.nof_cbs_exceeds_softbuffer_size_error)
}

// uint64 rate_matching_error = 11;
void Phy_rx_stat::clear_rate_matching_error() {
  rate_matching_error_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::rate_matching_error() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.rate_matching_error)
  return rate_matching_error_;
}
void Phy_rx_stat::set_rate_matching_error(::google::protobuf::uint64 value) {
  
  rate_matching_error_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.rate_matching_error)
}

// uint64 cb_crc_error = 12;
void Phy_rx_stat::clear_cb_crc_error() {
  cb_crc_error_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::cb_crc_error() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.cb_crc_error)
  return cb_crc_error_;
}
void Phy_rx_stat::set_cb_crc_error(::google::protobuf::uint64 value) {
  
  cb_crc_error_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.cb_crc_error)
}

// uint64 tb_crc_error = 13;
void Phy_rx_stat::clear_tb_crc_error() {
  tb_crc_error_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::tb_crc_error() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.tb_crc_error)
  return tb_crc_error_;
}
void Phy_rx_stat::set_tb_crc_error(::google::protobuf::uint64 value) {
  
  tb_crc_error_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.tb_crc_error)
}

// float peak_value = 14;
void Phy_rx_stat::clear_peak_value() {
  peak_value_ = 0;
}
float Phy_rx_stat::peak_value() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.peak_value)
  return peak_value_;
}
void Phy_rx_stat::set_peak_value(float value) {
  
  peak_value_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.peak_value)
}

// float noise = 15;
void Phy_rx_stat::clear_noise() {
  noise_ = 0;
}
float Phy_rx_stat::noise() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.noise)
  return noise_;
}
void Phy_rx_stat::set_noise(float value) {
  
  noise_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.noise)
}

// uint32 decoded_cfi = 16;
void Phy_rx_stat::clear_decoded_cfi() {
  decoded_cfi_ = 0u;
}
::google::protobuf::uint32 Phy_rx_stat::decoded_cfi() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.decoded_cfi)
  return decoded_cfi_;
}
void Phy_rx_stat::set_decoded_cfi(::google::protobuf::uint32 value) {
  
  decoded_cfi_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.decoded_cfi)
}

// bool found_dci = 17;
void Phy_rx_stat::clear_found_dci() {
  found_dci_ = false;
}
bool Phy_rx_stat::found_dci() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.found_dci)
  return found_dci_;
}
void Phy_rx_stat::set_found_dci(bool value) {
  
  found_dci_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.found_dci)
}

// uint32 last_noi = 18;
void Phy_rx_stat::clear_last_noi() {
  last_noi_ = 0u;
}
::google::protobuf::uint32 Phy_rx_stat::last_noi() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.last_noi)
  return last_noi_;
}
void Phy_rx_stat::set_last_noi(::google::protobuf::uint32 value) {
  
  last_noi_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.last_noi)
}

// uint64 total_packets_synchronized = 19;
void Phy_rx_stat::clear_total_packets_synchronized() {
  total_packets_synchronized_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_rx_stat::total_packets_synchronized() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.total_packets_synchronized)
  return total_packets_synchronized_;
}
void Phy_rx_stat::set_total_packets_synchronized(::google::protobuf::uint64 value) {
  
  total_packets_synchronized_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.total_packets_synchronized)
}

// int32 length = 20;
void Phy_rx_stat::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 Phy_rx_stat::length() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_rx_stat.length)
  return length_;
}
void Phy_rx_stat::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_rx_stat.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phy_sensing_stat::kFrequencyFieldNumber;
const int Phy_sensing_stat::kSampleRateFieldNumber;
const int Phy_sensing_stat::kGainFieldNumber;
const int Phy_sensing_stat::kRssiFieldNumber;
const int Phy_sensing_stat::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phy_sensing_stat::Phy_sensing_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Phy_sensing_stat)
}
Phy_sensing_stat::Phy_sensing_stat(const Phy_sensing_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_, &from.frequency_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:communicator.Phy_sensing_stat)
}

void Phy_sensing_stat::SharedCtor() {
  ::memset(&frequency_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(length_));
  _cached_size_ = 0;
}

Phy_sensing_stat::~Phy_sensing_stat() {
  // @@protoc_insertion_point(destructor:communicator.Phy_sensing_stat)
  SharedDtor();
}

void Phy_sensing_stat::SharedDtor() {
}

void Phy_sensing_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phy_sensing_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phy_sensing_stat& Phy_sensing_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phy_sensing_stat* Phy_sensing_stat::New(::google::protobuf::Arena* arena) const {
  Phy_sensing_stat* n = new Phy_sensing_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phy_sensing_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Phy_sensing_stat)
  ::memset(&frequency_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&frequency_) + sizeof(length_));
}

bool Phy_sensing_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Phy_sensing_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sample_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rssi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Phy_sensing_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Phy_sensing_stat)
  return false;
#undef DO_
}

void Phy_sensing_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Phy_sensing_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->frequency(), output);
  }

  // float sample_rate = 2;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sample_rate(), output);
  }

  // float gain = 3;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gain(), output);
  }

  // float rssi = 4;
  if (this->rssi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rssi(), output);
  }

  // int32 length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Phy_sensing_stat)
}

::google::protobuf::uint8* Phy_sensing_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Phy_sensing_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float frequency = 1;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->frequency(), target);
  }

  // float sample_rate = 2;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sample_rate(), target);
  }

  // float gain = 3;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gain(), target);
  }

  // float rssi = 4;
  if (this->rssi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rssi(), target);
  }

  // int32 length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Phy_sensing_stat)
  return target;
}

size_t Phy_sensing_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Phy_sensing_stat)
  size_t total_size = 0;

  // float frequency = 1;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  // float sample_rate = 2;
  if (this->sample_rate() != 0) {
    total_size += 1 + 4;
  }

  // float gain = 3;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  // float rssi = 4;
  if (this->rssi() != 0) {
    total_size += 1 + 4;
  }

  // int32 length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phy_sensing_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Phy_sensing_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Phy_sensing_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phy_sensing_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Phy_sensing_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Phy_sensing_stat)
    MergeFrom(*source);
  }
}

void Phy_sensing_stat::MergeFrom(const Phy_sensing_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Phy_sensing_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void Phy_sensing_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Phy_sensing_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phy_sensing_stat::CopyFrom(const Phy_sensing_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Phy_sensing_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phy_sensing_stat::IsInitialized() const {
  return true;
}

void Phy_sensing_stat::Swap(Phy_sensing_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phy_sensing_stat::InternalSwap(Phy_sensing_stat* other) {
  std::swap(frequency_, other->frequency_);
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(gain_, other->gain_);
  std::swap(rssi_, other->rssi_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phy_sensing_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phy_sensing_stat

// float frequency = 1;
void Phy_sensing_stat::clear_frequency() {
  frequency_ = 0;
}
float Phy_sensing_stat::frequency() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_sensing_stat.frequency)
  return frequency_;
}
void Phy_sensing_stat::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_sensing_stat.frequency)
}

// float sample_rate = 2;
void Phy_sensing_stat::clear_sample_rate() {
  sample_rate_ = 0;
}
float Phy_sensing_stat::sample_rate() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_sensing_stat.sample_rate)
  return sample_rate_;
}
void Phy_sensing_stat::set_sample_rate(float value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_sensing_stat.sample_rate)
}

// float gain = 3;
void Phy_sensing_stat::clear_gain() {
  gain_ = 0;
}
float Phy_sensing_stat::gain() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_sensing_stat.gain)
  return gain_;
}
void Phy_sensing_stat::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_sensing_stat.gain)
}

// float rssi = 4;
void Phy_sensing_stat::clear_rssi() {
  rssi_ = 0;
}
float Phy_sensing_stat::rssi() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_sensing_stat.rssi)
  return rssi_;
}
void Phy_sensing_stat::set_rssi(float value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_sensing_stat.rssi)
}

// int32 length = 5;
void Phy_sensing_stat::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 Phy_sensing_stat::length() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_sensing_stat.length)
  return length_;
}
void Phy_sensing_stat::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_sensing_stat.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Phy_stat::kHostTimestampFieldNumber;
const int Phy_stat::kFpgaTimestampFieldNumber;
const int Phy_stat::kFrameFieldNumber;
const int Phy_stat::kSlotFieldNumber;
const int Phy_stat::kChFieldNumber;
const int Phy_stat::kMcsFieldNumber;
const int Phy_stat::kNumCbTotalFieldNumber;
const int Phy_stat::kNumCbErrFieldNumber;
const int Phy_stat::kWrongDecodingCounterFieldNumber;
const int Phy_stat::kTxStatFieldNumber;
const int Phy_stat::kRxStatFieldNumber;
const int Phy_stat::kSensingStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Phy_stat::Phy_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Phy_stat)
}
Phy_stat::Phy_stat(const Phy_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&host_timestamp_, &from.host_timestamp_,
    reinterpret_cast<char*>(&wrong_decoding_counter_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(wrong_decoding_counter_));
  clear_has_stat();
  switch (from.stat_case()) {
    case kTxStat: {
      mutable_tx_stat()->::communicator::Phy_tx_stat::MergeFrom(from.tx_stat());
      break;
    }
    case kRxStat: {
      mutable_rx_stat()->::communicator::Phy_rx_stat::MergeFrom(from.rx_stat());
      break;
    }
    case kSensingStat: {
      mutable_sensing_stat()->::communicator::Phy_sensing_stat::MergeFrom(from.sensing_stat());
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Phy_stat)
}

void Phy_stat::SharedCtor() {
  ::memset(&host_timestamp_, 0, reinterpret_cast<char*>(&wrong_decoding_counter_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(wrong_decoding_counter_));
  clear_has_stat();
  _cached_size_ = 0;
}

Phy_stat::~Phy_stat() {
  // @@protoc_insertion_point(destructor:communicator.Phy_stat)
  SharedDtor();
}

void Phy_stat::SharedDtor() {
  if (has_stat()) {
    clear_stat();
  }
}

void Phy_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Phy_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Phy_stat& Phy_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Phy_stat* Phy_stat::New(::google::protobuf::Arena* arena) const {
  Phy_stat* n = new Phy_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Phy_stat::clear_stat() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Phy_stat)
  switch (stat_case()) {
    case kTxStat: {
      delete stat_.tx_stat_;
      break;
    }
    case kRxStat: {
      delete stat_.rx_stat_;
      break;
    }
    case kSensingStat: {
      delete stat_.sensing_stat_;
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAT_NOT_SET;
}


void Phy_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Phy_stat)
  ::memset(&host_timestamp_, 0, reinterpret_cast<char*>(&wrong_decoding_counter_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(wrong_decoding_counter_));
  clear_stat();
}

bool Phy_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Phy_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 host_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &host_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fpga_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fpga_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_cb_total = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cb_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_cb_err = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_cb_err_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wrong_decoding_counter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wrong_decoding_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_tx_stat tx_stat = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_rx_stat rx_stat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_sensing_stat sensing_stat = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensing_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Phy_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Phy_stat)
  return false;
#undef DO_
}

void Phy_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Phy_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->host_timestamp(), output);
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fpga_timestamp(), output);
  }

  // uint32 frame = 3;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame(), output);
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot(), output);
  }

  // uint32 ch = 5;
  if (this->ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ch(), output);
  }

  // uint32 mcs = 6;
  if (this->mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mcs(), output);
  }

  // uint32 num_cb_total = 7;
  if (this->num_cb_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_cb_total(), output);
  }

  // uint32 num_cb_err = 8;
  if (this->num_cb_err() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_cb_err(), output);
  }

  // uint32 wrong_decoding_counter = 9;
  if (this->wrong_decoding_counter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wrong_decoding_counter(), output);
  }

  // .communicator.Phy_tx_stat tx_stat = 10;
  if (has_tx_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *stat_.tx_stat_, output);
  }

  // .communicator.Phy_rx_stat rx_stat = 11;
  if (has_rx_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *stat_.rx_stat_, output);
  }

  // .communicator.Phy_sensing_stat sensing_stat = 12;
  if (has_sensing_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *stat_.sensing_stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Phy_stat)
}

::google::protobuf::uint8* Phy_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Phy_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->host_timestamp(), target);
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fpga_timestamp(), target);
  }

  // uint32 frame = 3;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame(), target);
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot(), target);
  }

  // uint32 ch = 5;
  if (this->ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ch(), target);
  }

  // uint32 mcs = 6;
  if (this->mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mcs(), target);
  }

  // uint32 num_cb_total = 7;
  if (this->num_cb_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_cb_total(), target);
  }

  // uint32 num_cb_err = 8;
  if (this->num_cb_err() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_cb_err(), target);
  }

  // uint32 wrong_decoding_counter = 9;
  if (this->wrong_decoding_counter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wrong_decoding_counter(), target);
  }

  // .communicator.Phy_tx_stat tx_stat = 10;
  if (has_tx_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *stat_.tx_stat_, deterministic, target);
  }

  // .communicator.Phy_rx_stat rx_stat = 11;
  if (has_rx_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *stat_.rx_stat_, deterministic, target);
  }

  // .communicator.Phy_sensing_stat sensing_stat = 12;
  if (has_sensing_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *stat_.sensing_stat_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Phy_stat)
  return target;
}

size_t Phy_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Phy_stat)
  size_t total_size = 0;

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->host_timestamp());
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fpga_timestamp());
  }

  // uint32 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame());
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  // uint32 ch = 5;
  if (this->ch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ch());
  }

  // uint32 mcs = 6;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcs());
  }

  // uint32 num_cb_total = 7;
  if (this->num_cb_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_cb_total());
  }

  // uint32 num_cb_err = 8;
  if (this->num_cb_err() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_cb_err());
  }

  // uint32 wrong_decoding_counter = 9;
  if (this->wrong_decoding_counter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wrong_decoding_counter());
  }

  switch (stat_case()) {
    // .communicator.Phy_tx_stat tx_stat = 10;
    case kTxStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.tx_stat_);
      break;
    }
    // .communicator.Phy_rx_stat rx_stat = 11;
    case kRxStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.rx_stat_);
      break;
    }
    // .communicator.Phy_sensing_stat sensing_stat = 12;
    case kSensingStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.sensing_stat_);
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Phy_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Phy_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Phy_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Phy_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Phy_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Phy_stat)
    MergeFrom(*source);
  }
}

void Phy_stat::MergeFrom(const Phy_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Phy_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_timestamp() != 0) {
    set_host_timestamp(from.host_timestamp());
  }
  if (from.fpga_timestamp() != 0) {
    set_fpga_timestamp(from.fpga_timestamp());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.ch() != 0) {
    set_ch(from.ch());
  }
  if (from.mcs() != 0) {
    set_mcs(from.mcs());
  }
  if (from.num_cb_total() != 0) {
    set_num_cb_total(from.num_cb_total());
  }
  if (from.num_cb_err() != 0) {
    set_num_cb_err(from.num_cb_err());
  }
  if (from.wrong_decoding_counter() != 0) {
    set_wrong_decoding_counter(from.wrong_decoding_counter());
  }
  switch (from.stat_case()) {
    case kTxStat: {
      mutable_tx_stat()->::communicator::Phy_tx_stat::MergeFrom(from.tx_stat());
      break;
    }
    case kRxStat: {
      mutable_rx_stat()->::communicator::Phy_rx_stat::MergeFrom(from.rx_stat());
      break;
    }
    case kSensingStat: {
      mutable_sensing_stat()->::communicator::Phy_sensing_stat::MergeFrom(from.sensing_stat());
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
}

void Phy_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Phy_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Phy_stat::CopyFrom(const Phy_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Phy_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Phy_stat::IsInitialized() const {
  return true;
}

void Phy_stat::Swap(Phy_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Phy_stat::InternalSwap(Phy_stat* other) {
  std::swap(host_timestamp_, other->host_timestamp_);
  std::swap(fpga_timestamp_, other->fpga_timestamp_);
  std::swap(frame_, other->frame_);
  std::swap(slot_, other->slot_);
  std::swap(ch_, other->ch_);
  std::swap(mcs_, other->mcs_);
  std::swap(num_cb_total_, other->num_cb_total_);
  std::swap(num_cb_err_, other->num_cb_err_);
  std::swap(wrong_decoding_counter_, other->wrong_decoding_counter_);
  std::swap(stat_, other->stat_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Phy_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Phy_stat

// uint64 host_timestamp = 1;
void Phy_stat::clear_host_timestamp() {
  host_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_stat::host_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.host_timestamp)
  return host_timestamp_;
}
void Phy_stat::set_host_timestamp(::google::protobuf::uint64 value) {
  
  host_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.host_timestamp)
}

// uint64 fpga_timestamp = 2;
void Phy_stat::clear_fpga_timestamp() {
  fpga_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Phy_stat::fpga_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.fpga_timestamp)
  return fpga_timestamp_;
}
void Phy_stat::set_fpga_timestamp(::google::protobuf::uint64 value) {
  
  fpga_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.fpga_timestamp)
}

// uint32 frame = 3;
void Phy_stat::clear_frame() {
  frame_ = 0u;
}
::google::protobuf::uint32 Phy_stat::frame() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.frame)
  return frame_;
}
void Phy_stat::set_frame(::google::protobuf::uint32 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.frame)
}

// uint32 slot = 4;
void Phy_stat::clear_slot() {
  slot_ = 0u;
}
::google::protobuf::uint32 Phy_stat::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.slot)
  return slot_;
}
void Phy_stat::set_slot(::google::protobuf::uint32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.slot)
}

// uint32 ch = 5;
void Phy_stat::clear_ch() {
  ch_ = 0u;
}
::google::protobuf::uint32 Phy_stat::ch() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.ch)
  return ch_;
}
void Phy_stat::set_ch(::google::protobuf::uint32 value) {
  
  ch_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.ch)
}

// uint32 mcs = 6;
void Phy_stat::clear_mcs() {
  mcs_ = 0u;
}
::google::protobuf::uint32 Phy_stat::mcs() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.mcs)
  return mcs_;
}
void Phy_stat::set_mcs(::google::protobuf::uint32 value) {
  
  mcs_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.mcs)
}

// uint32 num_cb_total = 7;
void Phy_stat::clear_num_cb_total() {
  num_cb_total_ = 0u;
}
::google::protobuf::uint32 Phy_stat::num_cb_total() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.num_cb_total)
  return num_cb_total_;
}
void Phy_stat::set_num_cb_total(::google::protobuf::uint32 value) {
  
  num_cb_total_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.num_cb_total)
}

// uint32 num_cb_err = 8;
void Phy_stat::clear_num_cb_err() {
  num_cb_err_ = 0u;
}
::google::protobuf::uint32 Phy_stat::num_cb_err() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.num_cb_err)
  return num_cb_err_;
}
void Phy_stat::set_num_cb_err(::google::protobuf::uint32 value) {
  
  num_cb_err_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.num_cb_err)
}

// uint32 wrong_decoding_counter = 9;
void Phy_stat::clear_wrong_decoding_counter() {
  wrong_decoding_counter_ = 0u;
}
::google::protobuf::uint32 Phy_stat::wrong_decoding_counter() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.wrong_decoding_counter)
  return wrong_decoding_counter_;
}
void Phy_stat::set_wrong_decoding_counter(::google::protobuf::uint32 value) {
  
  wrong_decoding_counter_ = value;
  // @@protoc_insertion_point(field_set:communicator.Phy_stat.wrong_decoding_counter)
}

// .communicator.Phy_tx_stat tx_stat = 10;
bool Phy_stat::has_tx_stat() const {
  return stat_case() == kTxStat;
}
void Phy_stat::set_has_tx_stat() {
  _oneof_case_[0] = kTxStat;
}
void Phy_stat::clear_tx_stat() {
  if (has_tx_stat()) {
    delete stat_.tx_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Phy_tx_stat& Phy_stat::tx_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.tx_stat)
  return has_tx_stat()
      ? *stat_.tx_stat_
      : ::communicator::Phy_tx_stat::default_instance();
}
::communicator::Phy_tx_stat* Phy_stat::mutable_tx_stat() {
  if (!has_tx_stat()) {
    clear_stat();
    set_has_tx_stat();
    stat_.tx_stat_ = new ::communicator::Phy_tx_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Phy_stat.tx_stat)
  return stat_.tx_stat_;
}
::communicator::Phy_tx_stat* Phy_stat::release_tx_stat() {
  // @@protoc_insertion_point(field_release:communicator.Phy_stat.tx_stat)
  if (has_tx_stat()) {
    clear_has_stat();
    ::communicator::Phy_tx_stat* temp = stat_.tx_stat_;
    stat_.tx_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Phy_stat::set_allocated_tx_stat(::communicator::Phy_tx_stat* tx_stat) {
  clear_stat();
  if (tx_stat) {
    set_has_tx_stat();
    stat_.tx_stat_ = tx_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Phy_stat.tx_stat)
}

// .communicator.Phy_rx_stat rx_stat = 11;
bool Phy_stat::has_rx_stat() const {
  return stat_case() == kRxStat;
}
void Phy_stat::set_has_rx_stat() {
  _oneof_case_[0] = kRxStat;
}
void Phy_stat::clear_rx_stat() {
  if (has_rx_stat()) {
    delete stat_.rx_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Phy_rx_stat& Phy_stat::rx_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.rx_stat)
  return has_rx_stat()
      ? *stat_.rx_stat_
      : ::communicator::Phy_rx_stat::default_instance();
}
::communicator::Phy_rx_stat* Phy_stat::mutable_rx_stat() {
  if (!has_rx_stat()) {
    clear_stat();
    set_has_rx_stat();
    stat_.rx_stat_ = new ::communicator::Phy_rx_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Phy_stat.rx_stat)
  return stat_.rx_stat_;
}
::communicator::Phy_rx_stat* Phy_stat::release_rx_stat() {
  // @@protoc_insertion_point(field_release:communicator.Phy_stat.rx_stat)
  if (has_rx_stat()) {
    clear_has_stat();
    ::communicator::Phy_rx_stat* temp = stat_.rx_stat_;
    stat_.rx_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Phy_stat::set_allocated_rx_stat(::communicator::Phy_rx_stat* rx_stat) {
  clear_stat();
  if (rx_stat) {
    set_has_rx_stat();
    stat_.rx_stat_ = rx_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Phy_stat.rx_stat)
}

// .communicator.Phy_sensing_stat sensing_stat = 12;
bool Phy_stat::has_sensing_stat() const {
  return stat_case() == kSensingStat;
}
void Phy_stat::set_has_sensing_stat() {
  _oneof_case_[0] = kSensingStat;
}
void Phy_stat::clear_sensing_stat() {
  if (has_sensing_stat()) {
    delete stat_.sensing_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Phy_sensing_stat& Phy_stat::sensing_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Phy_stat.sensing_stat)
  return has_sensing_stat()
      ? *stat_.sensing_stat_
      : ::communicator::Phy_sensing_stat::default_instance();
}
::communicator::Phy_sensing_stat* Phy_stat::mutable_sensing_stat() {
  if (!has_sensing_stat()) {
    clear_stat();
    set_has_sensing_stat();
    stat_.sensing_stat_ = new ::communicator::Phy_sensing_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Phy_stat.sensing_stat)
  return stat_.sensing_stat_;
}
::communicator::Phy_sensing_stat* Phy_stat::release_sensing_stat() {
  // @@protoc_insertion_point(field_release:communicator.Phy_stat.sensing_stat)
  if (has_sensing_stat()) {
    clear_has_stat();
    ::communicator::Phy_sensing_stat* temp = stat_.sensing_stat_;
    stat_.sensing_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Phy_stat::set_allocated_sensing_stat(::communicator::Phy_sensing_stat* sensing_stat) {
  clear_stat();
  if (sensing_stat) {
    set_has_sensing_stat();
    stat_.sensing_stat_ = sensing_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Phy_stat.sensing_stat)
}

bool Phy_stat::has_stat() const {
  return stat_case() != STAT_NOT_SET;
}
void Phy_stat::clear_has_stat() {
  _oneof_case_[0] = STAT_NOT_SET;
}
Phy_stat::StatCase Phy_stat::stat_case() const {
  return Phy_stat::StatCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_ack_stat::kDestinationAddressFieldNumber;
const int Mac_ack_stat::kStatusFieldNumber;
const int Mac_ack_stat::kMcsFieldNumber;
const int Mac_ack_stat::kTxGainFieldNumber;
const int Mac_ack_stat::kPortFieldNumber;
const int Mac_ack_stat::kPayloadSizeFieldNumber;
const int Mac_ack_stat::kTxChannelFieldNumber;
const int Mac_ack_stat::kSlotIndexFieldNumber;
const int Mac_ack_stat::kMaxRetriesFieldNumber;
const int Mac_ack_stat::kNumRetriesFieldNumber;
const int Mac_ack_stat::kBytesTransmittedFieldNumber;
const int Mac_ack_stat::kReceiverStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_ack_stat::Mac_ack_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_ack_stat)
}
Mac_ack_stat::Mac_ack_stat(const Mac_ack_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_receiver_stats()) {
    receiver_stats_ = new ::communicator::Phy_rx_stat(*from.receiver_stats_);
  } else {
    receiver_stats_ = NULL;
  }
  ::memcpy(&destination_address_, &from.destination_address_,
    reinterpret_cast<char*>(&num_retries_) -
    reinterpret_cast<char*>(&destination_address_) + sizeof(num_retries_));
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_ack_stat)
}

void Mac_ack_stat::SharedCtor() {
  ::memset(&receiver_stats_, 0, reinterpret_cast<char*>(&num_retries_) -
    reinterpret_cast<char*>(&receiver_stats_) + sizeof(num_retries_));
  _cached_size_ = 0;
}

Mac_ack_stat::~Mac_ack_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_ack_stat)
  SharedDtor();
}

void Mac_ack_stat::SharedDtor() {
  if (this != internal_default_instance()) {
    delete receiver_stats_;
  }
}

void Mac_ack_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_ack_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_ack_stat& Mac_ack_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_ack_stat* Mac_ack_stat::New(::google::protobuf::Arena* arena) const {
  Mac_ack_stat* n = new Mac_ack_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_ack_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_ack_stat)
  if (GetArenaNoVirtual() == NULL && receiver_stats_ != NULL) {
    delete receiver_stats_;
  }
  receiver_stats_ = NULL;
  ::memset(&destination_address_, 0, reinterpret_cast<char*>(&num_retries_) -
    reinterpret_cast<char*>(&destination_address_) + sizeof(num_retries_));
}

bool Mac_ack_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_ack_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 destination_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_ack_stat.AckStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::communicator::Mac_ack_stat_AckStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_gain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 payload_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_retries = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_retries = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes_transmitted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_transmitted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_rx_stat receiver_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_ack_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_ack_stat)
  return false;
#undef DO_
}

void Mac_ack_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_ack_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 destination_address = 1;
  if (this->destination_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->destination_address(), output);
  }

  // .communicator.Mac_ack_stat.AckStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // uint32 mcs = 3;
  if (this->mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mcs(), output);
  }

  // uint32 tx_gain = 4;
  if (this->tx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tx_gain(), output);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // uint32 payload_size = 6;
  if (this->payload_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->payload_size(), output);
  }

  // uint32 tx_channel = 7;
  if (this->tx_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_channel(), output);
  }

  // uint32 slot_index = 8;
  if (this->slot_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slot_index(), output);
  }

  // uint32 max_retries = 9;
  if (this->max_retries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_retries(), output);
  }

  // uint32 num_retries = 10;
  if (this->num_retries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num_retries(), output);
  }

  // uint64 bytes_transmitted = 11;
  if (this->bytes_transmitted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bytes_transmitted(), output);
  }

  // .communicator.Phy_rx_stat receiver_stats = 12;
  if (this->has_receiver_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->receiver_stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_ack_stat)
}

::google::protobuf::uint8* Mac_ack_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_ack_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 destination_address = 1;
  if (this->destination_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->destination_address(), target);
  }

  // .communicator.Mac_ack_stat.AckStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // uint32 mcs = 3;
  if (this->mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mcs(), target);
  }

  // uint32 tx_gain = 4;
  if (this->tx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tx_gain(), target);
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // uint32 payload_size = 6;
  if (this->payload_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->payload_size(), target);
  }

  // uint32 tx_channel = 7;
  if (this->tx_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_channel(), target);
  }

  // uint32 slot_index = 8;
  if (this->slot_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slot_index(), target);
  }

  // uint32 max_retries = 9;
  if (this->max_retries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_retries(), target);
  }

  // uint32 num_retries = 10;
  if (this->num_retries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_retries(), target);
  }

  // uint64 bytes_transmitted = 11;
  if (this->bytes_transmitted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bytes_transmitted(), target);
  }

  // .communicator.Phy_rx_stat receiver_stats = 12;
  if (this->has_receiver_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->receiver_stats_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_ack_stat)
  return target;
}

size_t Mac_ack_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_ack_stat)
  size_t total_size = 0;

  // .communicator.Phy_rx_stat receiver_stats = 12;
  if (this->has_receiver_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receiver_stats_);
  }

  // uint64 destination_address = 1;
  if (this->destination_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->destination_address());
  }

  // .communicator.Mac_ack_stat.AckStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // uint32 mcs = 3;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcs());
  }

  // uint32 tx_gain = 4;
  if (this->tx_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_gain());
  }

  // uint32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 payload_size = 6;
  if (this->payload_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->payload_size());
  }

  // uint32 tx_channel = 7;
  if (this->tx_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_channel());
  }

  // uint32 slot_index = 8;
  if (this->slot_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot_index());
  }

  // uint32 max_retries = 9;
  if (this->max_retries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_retries());
  }

  // uint64 bytes_transmitted = 11;
  if (this->bytes_transmitted() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_transmitted());
  }

  // uint32 num_retries = 10;
  if (this->num_retries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_retries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_ack_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_ack_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_ack_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_ack_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_ack_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_ack_stat)
    MergeFrom(*source);
  }
}

void Mac_ack_stat::MergeFrom(const Mac_ack_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_ack_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_receiver_stats()) {
    mutable_receiver_stats()->::communicator::Phy_rx_stat::MergeFrom(from.receiver_stats());
  }
  if (from.destination_address() != 0) {
    set_destination_address(from.destination_address());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.mcs() != 0) {
    set_mcs(from.mcs());
  }
  if (from.tx_gain() != 0) {
    set_tx_gain(from.tx_gain());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.payload_size() != 0) {
    set_payload_size(from.payload_size());
  }
  if (from.tx_channel() != 0) {
    set_tx_channel(from.tx_channel());
  }
  if (from.slot_index() != 0) {
    set_slot_index(from.slot_index());
  }
  if (from.max_retries() != 0) {
    set_max_retries(from.max_retries());
  }
  if (from.bytes_transmitted() != 0) {
    set_bytes_transmitted(from.bytes_transmitted());
  }
  if (from.num_retries() != 0) {
    set_num_retries(from.num_retries());
  }
}

void Mac_ack_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_ack_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_ack_stat::CopyFrom(const Mac_ack_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_ack_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_ack_stat::IsInitialized() const {
  return true;
}

void Mac_ack_stat::Swap(Mac_ack_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_ack_stat::InternalSwap(Mac_ack_stat* other) {
  std::swap(receiver_stats_, other->receiver_stats_);
  std::swap(destination_address_, other->destination_address_);
  std::swap(status_, other->status_);
  std::swap(mcs_, other->mcs_);
  std::swap(tx_gain_, other->tx_gain_);
  std::swap(port_, other->port_);
  std::swap(payload_size_, other->payload_size_);
  std::swap(tx_channel_, other->tx_channel_);
  std::swap(slot_index_, other->slot_index_);
  std::swap(max_retries_, other->max_retries_);
  std::swap(bytes_transmitted_, other->bytes_transmitted_);
  std::swap(num_retries_, other->num_retries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_ack_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_ack_stat

// uint64 destination_address = 1;
void Mac_ack_stat::clear_destination_address() {
  destination_address_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_ack_stat::destination_address() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.destination_address)
  return destination_address_;
}
void Mac_ack_stat::set_destination_address(::google::protobuf::uint64 value) {
  
  destination_address_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.destination_address)
}

// .communicator.Mac_ack_stat.AckStatus status = 2;
void Mac_ack_stat::clear_status() {
  status_ = 0;
}
::communicator::Mac_ack_stat_AckStatus Mac_ack_stat::status() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.status)
  return static_cast< ::communicator::Mac_ack_stat_AckStatus >(status_);
}
void Mac_ack_stat::set_status(::communicator::Mac_ack_stat_AckStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.status)
}

// uint32 mcs = 3;
void Mac_ack_stat::clear_mcs() {
  mcs_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::mcs() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.mcs)
  return mcs_;
}
void Mac_ack_stat::set_mcs(::google::protobuf::uint32 value) {
  
  mcs_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.mcs)
}

// uint32 tx_gain = 4;
void Mac_ack_stat::clear_tx_gain() {
  tx_gain_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::tx_gain() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.tx_gain)
  return tx_gain_;
}
void Mac_ack_stat::set_tx_gain(::google::protobuf::uint32 value) {
  
  tx_gain_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.tx_gain)
}

// uint32 port = 5;
void Mac_ack_stat::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::port() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.port)
  return port_;
}
void Mac_ack_stat::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.port)
}

// uint32 payload_size = 6;
void Mac_ack_stat::clear_payload_size() {
  payload_size_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::payload_size() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.payload_size)
  return payload_size_;
}
void Mac_ack_stat::set_payload_size(::google::protobuf::uint32 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.payload_size)
}

// uint32 tx_channel = 7;
void Mac_ack_stat::clear_tx_channel() {
  tx_channel_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::tx_channel() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.tx_channel)
  return tx_channel_;
}
void Mac_ack_stat::set_tx_channel(::google::protobuf::uint32 value) {
  
  tx_channel_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.tx_channel)
}

// uint32 slot_index = 8;
void Mac_ack_stat::clear_slot_index() {
  slot_index_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::slot_index() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.slot_index)
  return slot_index_;
}
void Mac_ack_stat::set_slot_index(::google::protobuf::uint32 value) {
  
  slot_index_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.slot_index)
}

// uint32 max_retries = 9;
void Mac_ack_stat::clear_max_retries() {
  max_retries_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::max_retries() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.max_retries)
  return max_retries_;
}
void Mac_ack_stat::set_max_retries(::google::protobuf::uint32 value) {
  
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.max_retries)
}

// uint32 num_retries = 10;
void Mac_ack_stat::clear_num_retries() {
  num_retries_ = 0u;
}
::google::protobuf::uint32 Mac_ack_stat::num_retries() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.num_retries)
  return num_retries_;
}
void Mac_ack_stat::set_num_retries(::google::protobuf::uint32 value) {
  
  num_retries_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.num_retries)
}

// uint64 bytes_transmitted = 11;
void Mac_ack_stat::clear_bytes_transmitted() {
  bytes_transmitted_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_ack_stat::bytes_transmitted() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.bytes_transmitted)
  return bytes_transmitted_;
}
void Mac_ack_stat::set_bytes_transmitted(::google::protobuf::uint64 value) {
  
  bytes_transmitted_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_ack_stat.bytes_transmitted)
}

// .communicator.Phy_rx_stat receiver_stats = 12;
bool Mac_ack_stat::has_receiver_stats() const {
  return this != internal_default_instance() && receiver_stats_ != NULL;
}
void Mac_ack_stat::clear_receiver_stats() {
  if (GetArenaNoVirtual() == NULL && receiver_stats_ != NULL) delete receiver_stats_;
  receiver_stats_ = NULL;
}
const ::communicator::Phy_rx_stat& Mac_ack_stat::receiver_stats() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_ack_stat.receiver_stats)
  return receiver_stats_ != NULL ? *receiver_stats_
                         : *::communicator::Phy_rx_stat::internal_default_instance();
}
::communicator::Phy_rx_stat* Mac_ack_stat::mutable_receiver_stats() {
  
  if (receiver_stats_ == NULL) {
    receiver_stats_ = new ::communicator::Phy_rx_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_ack_stat.receiver_stats)
  return receiver_stats_;
}
::communicator::Phy_rx_stat* Mac_ack_stat::release_receiver_stats() {
  // @@protoc_insertion_point(field_release:communicator.Mac_ack_stat.receiver_stats)
  
  ::communicator::Phy_rx_stat* temp = receiver_stats_;
  receiver_stats_ = NULL;
  return temp;
}
void Mac_ack_stat::set_allocated_receiver_stats(::communicator::Phy_rx_stat* receiver_stats) {
  delete receiver_stats_;
  receiver_stats_ = receiver_stats;
  if (receiver_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_ack_stat.receiver_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_tx_stat::kAckStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_tx_stat::Mac_tx_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_tx_stat)
}
Mac_tx_stat::Mac_tx_stat(const Mac_tx_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ack_stat_(from.ack_stat_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_tx_stat)
}

void Mac_tx_stat::SharedCtor() {
  _cached_size_ = 0;
}

Mac_tx_stat::~Mac_tx_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_tx_stat)
  SharedDtor();
}

void Mac_tx_stat::SharedDtor() {
}

void Mac_tx_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_tx_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_tx_stat& Mac_tx_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_tx_stat* Mac_tx_stat::New(::google::protobuf::Arena* arena) const {
  Mac_tx_stat* n = new Mac_tx_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_tx_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_tx_stat)
  ack_stat_.Clear();
}

bool Mac_tx_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_tx_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .communicator.Mac_ack_stat ack_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ack_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_tx_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_tx_stat)
  return false;
#undef DO_
}

void Mac_tx_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_tx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.Mac_ack_stat ack_stat = 1;
  for (unsigned int i = 0, n = this->ack_stat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ack_stat(i), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_tx_stat)
}

::google::protobuf::uint8* Mac_tx_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_tx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.Mac_ack_stat ack_stat = 1;
  for (unsigned int i = 0, n = this->ack_stat_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->ack_stat(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_tx_stat)
  return target;
}

size_t Mac_tx_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_tx_stat)
  size_t total_size = 0;

  // repeated .communicator.Mac_ack_stat ack_stat = 1;
  {
    unsigned int count = this->ack_stat_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack_stat(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_tx_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_tx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_tx_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_tx_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_tx_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_tx_stat)
    MergeFrom(*source);
  }
}

void Mac_tx_stat::MergeFrom(const Mac_tx_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_tx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_stat_.MergeFrom(from.ack_stat_);
}

void Mac_tx_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_tx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_tx_stat::CopyFrom(const Mac_tx_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_tx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_tx_stat::IsInitialized() const {
  return true;
}

void Mac_tx_stat::Swap(Mac_tx_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_tx_stat::InternalSwap(Mac_tx_stat* other) {
  ack_stat_.InternalSwap(&other->ack_stat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_tx_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_tx_stat

// repeated .communicator.Mac_ack_stat ack_stat = 1;
int Mac_tx_stat::ack_stat_size() const {
  return ack_stat_.size();
}
void Mac_tx_stat::clear_ack_stat() {
  ack_stat_.Clear();
}
const ::communicator::Mac_ack_stat& Mac_tx_stat::ack_stat(int index) const {
  // @@protoc_insertion_point(field_get:communicator.Mac_tx_stat.ack_stat)
  return ack_stat_.Get(index);
}
::communicator::Mac_ack_stat* Mac_tx_stat::mutable_ack_stat(int index) {
  // @@protoc_insertion_point(field_mutable:communicator.Mac_tx_stat.ack_stat)
  return ack_stat_.Mutable(index);
}
::communicator::Mac_ack_stat* Mac_tx_stat::add_ack_stat() {
  // @@protoc_insertion_point(field_add:communicator.Mac_tx_stat.ack_stat)
  return ack_stat_.Add();
}
::google::protobuf::RepeatedPtrField< ::communicator::Mac_ack_stat >*
Mac_tx_stat::mutable_ack_stat() {
  // @@protoc_insertion_point(field_mutable_list:communicator.Mac_tx_stat.ack_stat)
  return &ack_stat_;
}
const ::google::protobuf::RepeatedPtrField< ::communicator::Mac_ack_stat >&
Mac_tx_stat::ack_stat() const {
  // @@protoc_insertion_point(field_list:communicator.Mac_tx_stat.ack_stat)
  return ack_stat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_rx_stat::kNumByteOverflowDropFieldNumber;
const int Mac_rx_stat::kCrcFieldNumber;
const int Mac_rx_stat::kTxChannelFieldNumber;
const int Mac_rx_stat::kSlotIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_rx_stat::Mac_rx_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_rx_stat)
}
Mac_rx_stat::Mac_rx_stat(const Mac_rx_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_byte_overflow_drop_, &from.num_byte_overflow_drop_,
    reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&num_byte_overflow_drop_) + sizeof(slot_index_));
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_rx_stat)
}

void Mac_rx_stat::SharedCtor() {
  ::memset(&num_byte_overflow_drop_, 0, reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&num_byte_overflow_drop_) + sizeof(slot_index_));
  _cached_size_ = 0;
}

Mac_rx_stat::~Mac_rx_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_rx_stat)
  SharedDtor();
}

void Mac_rx_stat::SharedDtor() {
}

void Mac_rx_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_rx_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_rx_stat& Mac_rx_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_rx_stat* Mac_rx_stat::New(::google::protobuf::Arena* arena) const {
  Mac_rx_stat* n = new Mac_rx_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_rx_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_rx_stat)
  ::memset(&num_byte_overflow_drop_, 0, reinterpret_cast<char*>(&slot_index_) -
    reinterpret_cast<char*>(&num_byte_overflow_drop_) + sizeof(slot_index_));
}

bool Mac_rx_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_rx_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_byte_overflow_drop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_byte_overflow_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool crc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_rx_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_rx_stat)
  return false;
#undef DO_
}

void Mac_rx_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_rx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_byte_overflow_drop = 1;
  if (this->num_byte_overflow_drop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_byte_overflow_drop(), output);
  }

  // bool crc = 2;
  if (this->crc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->crc(), output);
  }

  // uint32 tx_channel = 3;
  if (this->tx_channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tx_channel(), output);
  }

  // uint32 slot_index = 4;
  if (this->slot_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_rx_stat)
}

::google::protobuf::uint8* Mac_rx_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_rx_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_byte_overflow_drop = 1;
  if (this->num_byte_overflow_drop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_byte_overflow_drop(), target);
  }

  // bool crc = 2;
  if (this->crc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->crc(), target);
  }

  // uint32 tx_channel = 3;
  if (this->tx_channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tx_channel(), target);
  }

  // uint32 slot_index = 4;
  if (this->slot_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_rx_stat)
  return target;
}

size_t Mac_rx_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_rx_stat)
  size_t total_size = 0;

  // uint32 num_byte_overflow_drop = 1;
  if (this->num_byte_overflow_drop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_byte_overflow_drop());
  }

  // bool crc = 2;
  if (this->crc() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tx_channel = 3;
  if (this->tx_channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_channel());
  }

  // uint32 slot_index = 4;
  if (this->slot_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_rx_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_rx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_rx_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_rx_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_rx_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_rx_stat)
    MergeFrom(*source);
  }
}

void Mac_rx_stat::MergeFrom(const Mac_rx_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_rx_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_byte_overflow_drop() != 0) {
    set_num_byte_overflow_drop(from.num_byte_overflow_drop());
  }
  if (from.crc() != 0) {
    set_crc(from.crc());
  }
  if (from.tx_channel() != 0) {
    set_tx_channel(from.tx_channel());
  }
  if (from.slot_index() != 0) {
    set_slot_index(from.slot_index());
  }
}

void Mac_rx_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_rx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_rx_stat::CopyFrom(const Mac_rx_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_rx_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_rx_stat::IsInitialized() const {
  return true;
}

void Mac_rx_stat::Swap(Mac_rx_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_rx_stat::InternalSwap(Mac_rx_stat* other) {
  std::swap(num_byte_overflow_drop_, other->num_byte_overflow_drop_);
  std::swap(crc_, other->crc_);
  std::swap(tx_channel_, other->tx_channel_);
  std::swap(slot_index_, other->slot_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_rx_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_rx_stat

// uint32 num_byte_overflow_drop = 1;
void Mac_rx_stat::clear_num_byte_overflow_drop() {
  num_byte_overflow_drop_ = 0u;
}
::google::protobuf::uint32 Mac_rx_stat::num_byte_overflow_drop() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_rx_stat.num_byte_overflow_drop)
  return num_byte_overflow_drop_;
}
void Mac_rx_stat::set_num_byte_overflow_drop(::google::protobuf::uint32 value) {
  
  num_byte_overflow_drop_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_rx_stat.num_byte_overflow_drop)
}

// bool crc = 2;
void Mac_rx_stat::clear_crc() {
  crc_ = false;
}
bool Mac_rx_stat::crc() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_rx_stat.crc)
  return crc_;
}
void Mac_rx_stat::set_crc(bool value) {
  
  crc_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_rx_stat.crc)
}

// uint32 tx_channel = 3;
void Mac_rx_stat::clear_tx_channel() {
  tx_channel_ = 0u;
}
::google::protobuf::uint32 Mac_rx_stat::tx_channel() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_rx_stat.tx_channel)
  return tx_channel_;
}
void Mac_rx_stat::set_tx_channel(::google::protobuf::uint32 value) {
  
  tx_channel_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_rx_stat.tx_channel)
}

// uint32 slot_index = 4;
void Mac_rx_stat::clear_slot_index() {
  slot_index_ = 0u;
}
::google::protobuf::uint32 Mac_rx_stat::slot_index() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_rx_stat.slot_index)
  return slot_index_;
}
void Mac_rx_stat::set_slot_index(::google::protobuf::uint32 value) {
  
  slot_index_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_rx_stat.slot_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Mac_queue_stat::Mac_queue_stat_QueueInfEntry::Mac_queue_stat_QueueInfEntry() {}
Mac_queue_stat::Mac_queue_stat_QueueInfEntry::Mac_queue_stat_QueueInfEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Mac_queue_stat::Mac_queue_stat_QueueInfEntry::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[8];
}
void Mac_queue_stat::Mac_queue_stat_QueueInfEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Mac_queue_stat::Mac_queue_stat_QueueInfEntry::MergeFrom(const Mac_queue_stat_QueueInfEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_queue_stat::kHighQueueSizeFieldNumber;
const int Mac_queue_stat::kHighMessagesInQueueFieldNumber;
const int Mac_queue_stat::kHighPktsLostOverflowFieldNumber;
const int Mac_queue_stat::kHighAverageQueueDelayFieldNumber;
const int Mac_queue_stat::kLowQueueSizeFieldNumber;
const int Mac_queue_stat::kLowMessagesInQueueFieldNumber;
const int Mac_queue_stat::kLowPktsLostOverflowFieldNumber;
const int Mac_queue_stat::kLowAverageQueueDelayFieldNumber;
const int Mac_queue_stat::kQueueInfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_queue_stat::Mac_queue_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_queue_stat)
}
Mac_queue_stat::Mac_queue_stat(const Mac_queue_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_inf_.MergeFrom(from.queue_inf_);
  ::memcpy(&high_queue_size_, &from.high_queue_size_,
    reinterpret_cast<char*>(&low_average_queue_delay_) -
    reinterpret_cast<char*>(&high_queue_size_) + sizeof(low_average_queue_delay_));
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_queue_stat)
}

void Mac_queue_stat::SharedCtor() {
  ::memset(&high_queue_size_, 0, reinterpret_cast<char*>(&low_average_queue_delay_) -
    reinterpret_cast<char*>(&high_queue_size_) + sizeof(low_average_queue_delay_));
  _cached_size_ = 0;
}

Mac_queue_stat::~Mac_queue_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_queue_stat)
  SharedDtor();
}

void Mac_queue_stat::SharedDtor() {
}

void Mac_queue_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_queue_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_queue_stat& Mac_queue_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_queue_stat* Mac_queue_stat::New(::google::protobuf::Arena* arena) const {
  Mac_queue_stat* n = new Mac_queue_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_queue_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_queue_stat)
  queue_inf_.Clear();
  ::memset(&high_queue_size_, 0, reinterpret_cast<char*>(&low_average_queue_delay_) -
    reinterpret_cast<char*>(&high_queue_size_) + sizeof(low_average_queue_delay_));
}

bool Mac_queue_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_queue_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 high_queue_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_messages_in_queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_messages_in_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_pkts_lost_overflow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_pkts_lost_overflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 high_average_queue_delay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_average_queue_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_queue_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_messages_in_queue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_messages_in_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_pkts_lost_overflow = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_pkts_lost_overflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 low_average_queue_delay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_average_queue_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, uint32> queue_inf = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          Mac_queue_stat_QueueInfEntry::Parser< ::google::protobuf::internal::MapField<
              Mac_queue_stat_QueueInfEntry,
              ::google::protobuf::uint64, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 > > parser(&queue_inf_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_queue_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_queue_stat)
  return false;
#undef DO_
}

void Mac_queue_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_queue_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 high_queue_size = 1;
  if (this->high_queue_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->high_queue_size(), output);
  }

  // uint32 high_messages_in_queue = 2;
  if (this->high_messages_in_queue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->high_messages_in_queue(), output);
  }

  // uint32 high_pkts_lost_overflow = 3;
  if (this->high_pkts_lost_overflow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->high_pkts_lost_overflow(), output);
  }

  // uint32 high_average_queue_delay = 4;
  if (this->high_average_queue_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_average_queue_delay(), output);
  }

  // uint32 low_queue_size = 5;
  if (this->low_queue_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->low_queue_size(), output);
  }

  // uint32 low_messages_in_queue = 6;
  if (this->low_messages_in_queue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->low_messages_in_queue(), output);
  }

  // uint32 low_pkts_lost_overflow = 7;
  if (this->low_pkts_lost_overflow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->low_pkts_lost_overflow(), output);
  }

  // uint32 low_average_queue_delay = 8;
  if (this->low_average_queue_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->low_average_queue_delay(), output);
  }

  // map<uint64, uint32> queue_inf = 9;
  if (!this->queue_inf().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->queue_inf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->queue_inf().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->queue_inf().begin();
          it != this->queue_inf().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Mac_queue_stat_QueueInfEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(queue_inf_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<Mac_queue_stat_QueueInfEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->queue_inf().begin();
          it != this->queue_inf().end(); ++it) {
        entry.reset(queue_inf_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_queue_stat)
}

::google::protobuf::uint8* Mac_queue_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_queue_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 high_queue_size = 1;
  if (this->high_queue_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->high_queue_size(), target);
  }

  // uint32 high_messages_in_queue = 2;
  if (this->high_messages_in_queue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->high_messages_in_queue(), target);
  }

  // uint32 high_pkts_lost_overflow = 3;
  if (this->high_pkts_lost_overflow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->high_pkts_lost_overflow(), target);
  }

  // uint32 high_average_queue_delay = 4;
  if (this->high_average_queue_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_average_queue_delay(), target);
  }

  // uint32 low_queue_size = 5;
  if (this->low_queue_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->low_queue_size(), target);
  }

  // uint32 low_messages_in_queue = 6;
  if (this->low_messages_in_queue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->low_messages_in_queue(), target);
  }

  // uint32 low_pkts_lost_overflow = 7;
  if (this->low_pkts_lost_overflow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->low_pkts_lost_overflow(), target);
  }

  // uint32 low_average_queue_delay = 8;
  if (this->low_average_queue_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->low_average_queue_delay(), target);
  }

  // map<uint64, uint32> queue_inf = 9;
  if (!this->queue_inf().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->queue_inf().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->queue_inf().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->queue_inf().begin();
          it != this->queue_inf().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Mac_queue_stat_QueueInfEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(queue_inf_.NewEntryWrapper(
            items[i].second->first, items[i].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<Mac_queue_stat_QueueInfEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
          it = this->queue_inf().begin();
          it != this->queue_inf().end(); ++it) {
        entry.reset(queue_inf_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_queue_stat)
  return target;
}

size_t Mac_queue_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_queue_stat)
  size_t total_size = 0;

  // map<uint64, uint32> queue_inf = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->queue_inf_size());
  {
    ::google::protobuf::scoped_ptr<Mac_queue_stat_QueueInfEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >::const_iterator
        it = this->queue_inf().begin();
        it != this->queue_inf().end(); ++it) {
      entry.reset(queue_inf_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 high_queue_size = 1;
  if (this->high_queue_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_queue_size());
  }

  // uint32 high_messages_in_queue = 2;
  if (this->high_messages_in_queue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_messages_in_queue());
  }

  // uint32 high_pkts_lost_overflow = 3;
  if (this->high_pkts_lost_overflow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_pkts_lost_overflow());
  }

  // uint32 high_average_queue_delay = 4;
  if (this->high_average_queue_delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high_average_queue_delay());
  }

  // uint32 low_queue_size = 5;
  if (this->low_queue_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_queue_size());
  }

  // uint32 low_messages_in_queue = 6;
  if (this->low_messages_in_queue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_messages_in_queue());
  }

  // uint32 low_pkts_lost_overflow = 7;
  if (this->low_pkts_lost_overflow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_pkts_lost_overflow());
  }

  // uint32 low_average_queue_delay = 8;
  if (this->low_average_queue_delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low_average_queue_delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_queue_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_queue_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_queue_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_queue_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_queue_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_queue_stat)
    MergeFrom(*source);
  }
}

void Mac_queue_stat::MergeFrom(const Mac_queue_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_queue_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queue_inf_.MergeFrom(from.queue_inf_);
  if (from.high_queue_size() != 0) {
    set_high_queue_size(from.high_queue_size());
  }
  if (from.high_messages_in_queue() != 0) {
    set_high_messages_in_queue(from.high_messages_in_queue());
  }
  if (from.high_pkts_lost_overflow() != 0) {
    set_high_pkts_lost_overflow(from.high_pkts_lost_overflow());
  }
  if (from.high_average_queue_delay() != 0) {
    set_high_average_queue_delay(from.high_average_queue_delay());
  }
  if (from.low_queue_size() != 0) {
    set_low_queue_size(from.low_queue_size());
  }
  if (from.low_messages_in_queue() != 0) {
    set_low_messages_in_queue(from.low_messages_in_queue());
  }
  if (from.low_pkts_lost_overflow() != 0) {
    set_low_pkts_lost_overflow(from.low_pkts_lost_overflow());
  }
  if (from.low_average_queue_delay() != 0) {
    set_low_average_queue_delay(from.low_average_queue_delay());
  }
}

void Mac_queue_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_queue_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_queue_stat::CopyFrom(const Mac_queue_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_queue_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_queue_stat::IsInitialized() const {
  return true;
}

void Mac_queue_stat::Swap(Mac_queue_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_queue_stat::InternalSwap(Mac_queue_stat* other) {
  queue_inf_.Swap(&other->queue_inf_);
  std::swap(high_queue_size_, other->high_queue_size_);
  std::swap(high_messages_in_queue_, other->high_messages_in_queue_);
  std::swap(high_pkts_lost_overflow_, other->high_pkts_lost_overflow_);
  std::swap(high_average_queue_delay_, other->high_average_queue_delay_);
  std::swap(low_queue_size_, other->low_queue_size_);
  std::swap(low_messages_in_queue_, other->low_messages_in_queue_);
  std::swap(low_pkts_lost_overflow_, other->low_pkts_lost_overflow_);
  std::swap(low_average_queue_delay_, other->low_average_queue_delay_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_queue_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_queue_stat

// uint32 high_queue_size = 1;
void Mac_queue_stat::clear_high_queue_size() {
  high_queue_size_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::high_queue_size() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.high_queue_size)
  return high_queue_size_;
}
void Mac_queue_stat::set_high_queue_size(::google::protobuf::uint32 value) {
  
  high_queue_size_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.high_queue_size)
}

// uint32 high_messages_in_queue = 2;
void Mac_queue_stat::clear_high_messages_in_queue() {
  high_messages_in_queue_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::high_messages_in_queue() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.high_messages_in_queue)
  return high_messages_in_queue_;
}
void Mac_queue_stat::set_high_messages_in_queue(::google::protobuf::uint32 value) {
  
  high_messages_in_queue_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.high_messages_in_queue)
}

// uint32 high_pkts_lost_overflow = 3;
void Mac_queue_stat::clear_high_pkts_lost_overflow() {
  high_pkts_lost_overflow_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::high_pkts_lost_overflow() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.high_pkts_lost_overflow)
  return high_pkts_lost_overflow_;
}
void Mac_queue_stat::set_high_pkts_lost_overflow(::google::protobuf::uint32 value) {
  
  high_pkts_lost_overflow_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.high_pkts_lost_overflow)
}

// uint32 high_average_queue_delay = 4;
void Mac_queue_stat::clear_high_average_queue_delay() {
  high_average_queue_delay_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::high_average_queue_delay() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.high_average_queue_delay)
  return high_average_queue_delay_;
}
void Mac_queue_stat::set_high_average_queue_delay(::google::protobuf::uint32 value) {
  
  high_average_queue_delay_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.high_average_queue_delay)
}

// uint32 low_queue_size = 5;
void Mac_queue_stat::clear_low_queue_size() {
  low_queue_size_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::low_queue_size() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.low_queue_size)
  return low_queue_size_;
}
void Mac_queue_stat::set_low_queue_size(::google::protobuf::uint32 value) {
  
  low_queue_size_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.low_queue_size)
}

// uint32 low_messages_in_queue = 6;
void Mac_queue_stat::clear_low_messages_in_queue() {
  low_messages_in_queue_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::low_messages_in_queue() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.low_messages_in_queue)
  return low_messages_in_queue_;
}
void Mac_queue_stat::set_low_messages_in_queue(::google::protobuf::uint32 value) {
  
  low_messages_in_queue_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.low_messages_in_queue)
}

// uint32 low_pkts_lost_overflow = 7;
void Mac_queue_stat::clear_low_pkts_lost_overflow() {
  low_pkts_lost_overflow_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::low_pkts_lost_overflow() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.low_pkts_lost_overflow)
  return low_pkts_lost_overflow_;
}
void Mac_queue_stat::set_low_pkts_lost_overflow(::google::protobuf::uint32 value) {
  
  low_pkts_lost_overflow_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.low_pkts_lost_overflow)
}

// uint32 low_average_queue_delay = 8;
void Mac_queue_stat::clear_low_average_queue_delay() {
  low_average_queue_delay_ = 0u;
}
::google::protobuf::uint32 Mac_queue_stat::low_average_queue_delay() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_queue_stat.low_average_queue_delay)
  return low_average_queue_delay_;
}
void Mac_queue_stat::set_low_average_queue_delay(::google::protobuf::uint32 value) {
  
  low_average_queue_delay_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_queue_stat.low_average_queue_delay)
}

// map<uint64, uint32> queue_inf = 9;
int Mac_queue_stat::queue_inf_size() const {
  return queue_inf_.size();
}
void Mac_queue_stat::clear_queue_inf() {
  queue_inf_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >&
Mac_queue_stat::queue_inf() const {
  // @@protoc_insertion_point(field_map:communicator.Mac_queue_stat.queue_inf)
  return queue_inf_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint64, ::google::protobuf::uint32 >*
Mac_queue_stat::mutable_queue_inf() {
  // @@protoc_insertion_point(field_mutable_map:communicator.Mac_queue_stat.queue_inf)
  return queue_inf_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_stat_Cell_information::kChFieldNumber;
const int Mac_stat_Cell_information::kSlotFieldNumber;
const int Mac_stat_Cell_information::kNumByteTotalFieldNumber;
const int Mac_stat_Cell_information::kNumByteCrcDropFieldNumber;
const int Mac_stat_Cell_information::kTxStatFieldNumber;
const int Mac_stat_Cell_information::kRxStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_stat_Cell_information::Mac_stat_Cell_information()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_stat.Cell_information)
}
Mac_stat_Cell_information::Mac_stat_Cell_information(const Mac_stat_Cell_information& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ch_, &from.ch_,
    reinterpret_cast<char*>(&num_byte_crc_drop_) -
    reinterpret_cast<char*>(&ch_) + sizeof(num_byte_crc_drop_));
  clear_has_rx_tx_stat();
  switch (from.rx_tx_stat_case()) {
    case kTxStat: {
      mutable_tx_stat()->::communicator::Mac_tx_stat::MergeFrom(from.tx_stat());
      break;
    }
    case kRxStat: {
      mutable_rx_stat()->::communicator::Mac_rx_stat::MergeFrom(from.rx_stat());
      break;
    }
    case RX_TX_STAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_stat.Cell_information)
}

void Mac_stat_Cell_information::SharedCtor() {
  ::memset(&ch_, 0, reinterpret_cast<char*>(&num_byte_crc_drop_) -
    reinterpret_cast<char*>(&ch_) + sizeof(num_byte_crc_drop_));
  clear_has_rx_tx_stat();
  _cached_size_ = 0;
}

Mac_stat_Cell_information::~Mac_stat_Cell_information() {
  // @@protoc_insertion_point(destructor:communicator.Mac_stat.Cell_information)
  SharedDtor();
}

void Mac_stat_Cell_information::SharedDtor() {
  if (has_rx_tx_stat()) {
    clear_rx_tx_stat();
  }
}

void Mac_stat_Cell_information::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_stat_Cell_information::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_stat_Cell_information& Mac_stat_Cell_information::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_stat_Cell_information* Mac_stat_Cell_information::New(::google::protobuf::Arena* arena) const {
  Mac_stat_Cell_information* n = new Mac_stat_Cell_information;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_stat_Cell_information::clear_rx_tx_stat() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Mac_stat.Cell_information)
  switch (rx_tx_stat_case()) {
    case kTxStat: {
      delete rx_tx_stat_.tx_stat_;
      break;
    }
    case kRxStat: {
      delete rx_tx_stat_.rx_stat_;
      break;
    }
    case RX_TX_STAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RX_TX_STAT_NOT_SET;
}


void Mac_stat_Cell_information::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_stat.Cell_information)
  ::memset(&ch_, 0, reinterpret_cast<char*>(&num_byte_crc_drop_) -
    reinterpret_cast<char*>(&ch_) + sizeof(num_byte_crc_drop_));
  clear_rx_tx_stat();
}

bool Mac_stat_Cell_information::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_stat.Cell_information)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_byte_total = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_byte_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_byte_crc_drop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_byte_crc_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_tx_stat tx_stat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tx_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_rx_stat rx_stat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_stat.Cell_information)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_stat.Cell_information)
  return false;
#undef DO_
}

void Mac_stat_Cell_information::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_stat.Cell_information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ch = 1;
  if (this->ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ch(), output);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // uint32 num_byte_total = 3;
  if (this->num_byte_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_byte_total(), output);
  }

  // uint32 num_byte_crc_drop = 4;
  if (this->num_byte_crc_drop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num_byte_crc_drop(), output);
  }

  // .communicator.Mac_tx_stat tx_stat = 5;
  if (has_tx_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *rx_tx_stat_.tx_stat_, output);
  }

  // .communicator.Mac_rx_stat rx_stat = 6;
  if (has_rx_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *rx_tx_stat_.rx_stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_stat.Cell_information)
}

::google::protobuf::uint8* Mac_stat_Cell_information::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_stat.Cell_information)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ch = 1;
  if (this->ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ch(), target);
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // uint32 num_byte_total = 3;
  if (this->num_byte_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_byte_total(), target);
  }

  // uint32 num_byte_crc_drop = 4;
  if (this->num_byte_crc_drop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num_byte_crc_drop(), target);
  }

  // .communicator.Mac_tx_stat tx_stat = 5;
  if (has_tx_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *rx_tx_stat_.tx_stat_, deterministic, target);
  }

  // .communicator.Mac_rx_stat rx_stat = 6;
  if (has_rx_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *rx_tx_stat_.rx_stat_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_stat.Cell_information)
  return target;
}

size_t Mac_stat_Cell_information::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_stat.Cell_information)
  size_t total_size = 0;

  // uint32 ch = 1;
  if (this->ch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ch());
  }

  // uint32 slot = 2;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  // uint32 num_byte_total = 3;
  if (this->num_byte_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_byte_total());
  }

  // uint32 num_byte_crc_drop = 4;
  if (this->num_byte_crc_drop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_byte_crc_drop());
  }

  switch (rx_tx_stat_case()) {
    // .communicator.Mac_tx_stat tx_stat = 5;
    case kTxStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rx_tx_stat_.tx_stat_);
      break;
    }
    // .communicator.Mac_rx_stat rx_stat = 6;
    case kRxStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *rx_tx_stat_.rx_stat_);
      break;
    }
    case RX_TX_STAT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_stat_Cell_information::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_stat.Cell_information)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_stat_Cell_information* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_stat_Cell_information>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_stat.Cell_information)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_stat.Cell_information)
    MergeFrom(*source);
  }
}

void Mac_stat_Cell_information::MergeFrom(const Mac_stat_Cell_information& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_stat.Cell_information)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ch() != 0) {
    set_ch(from.ch());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.num_byte_total() != 0) {
    set_num_byte_total(from.num_byte_total());
  }
  if (from.num_byte_crc_drop() != 0) {
    set_num_byte_crc_drop(from.num_byte_crc_drop());
  }
  switch (from.rx_tx_stat_case()) {
    case kTxStat: {
      mutable_tx_stat()->::communicator::Mac_tx_stat::MergeFrom(from.tx_stat());
      break;
    }
    case kRxStat: {
      mutable_rx_stat()->::communicator::Mac_rx_stat::MergeFrom(from.rx_stat());
      break;
    }
    case RX_TX_STAT_NOT_SET: {
      break;
    }
  }
}

void Mac_stat_Cell_information::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_stat.Cell_information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_stat_Cell_information::CopyFrom(const Mac_stat_Cell_information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_stat.Cell_information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_stat_Cell_information::IsInitialized() const {
  return true;
}

void Mac_stat_Cell_information::Swap(Mac_stat_Cell_information* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_stat_Cell_information::InternalSwap(Mac_stat_Cell_information* other) {
  std::swap(ch_, other->ch_);
  std::swap(slot_, other->slot_);
  std::swap(num_byte_total_, other->num_byte_total_);
  std::swap(num_byte_crc_drop_, other->num_byte_crc_drop_);
  std::swap(rx_tx_stat_, other->rx_tx_stat_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_stat_Cell_information::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_stat_Cell_information

// uint32 ch = 1;
void Mac_stat_Cell_information::clear_ch() {
  ch_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Cell_information::ch() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.ch)
  return ch_;
}
void Mac_stat_Cell_information::set_ch(::google::protobuf::uint32 value) {
  
  ch_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Cell_information.ch)
}

// uint32 slot = 2;
void Mac_stat_Cell_information::clear_slot() {
  slot_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Cell_information::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.slot)
  return slot_;
}
void Mac_stat_Cell_information::set_slot(::google::protobuf::uint32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Cell_information.slot)
}

// uint32 num_byte_total = 3;
void Mac_stat_Cell_information::clear_num_byte_total() {
  num_byte_total_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Cell_information::num_byte_total() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.num_byte_total)
  return num_byte_total_;
}
void Mac_stat_Cell_information::set_num_byte_total(::google::protobuf::uint32 value) {
  
  num_byte_total_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Cell_information.num_byte_total)
}

// uint32 num_byte_crc_drop = 4;
void Mac_stat_Cell_information::clear_num_byte_crc_drop() {
  num_byte_crc_drop_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Cell_information::num_byte_crc_drop() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.num_byte_crc_drop)
  return num_byte_crc_drop_;
}
void Mac_stat_Cell_information::set_num_byte_crc_drop(::google::protobuf::uint32 value) {
  
  num_byte_crc_drop_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Cell_information.num_byte_crc_drop)
}

// .communicator.Mac_tx_stat tx_stat = 5;
bool Mac_stat_Cell_information::has_tx_stat() const {
  return rx_tx_stat_case() == kTxStat;
}
void Mac_stat_Cell_information::set_has_tx_stat() {
  _oneof_case_[0] = kTxStat;
}
void Mac_stat_Cell_information::clear_tx_stat() {
  if (has_tx_stat()) {
    delete rx_tx_stat_.tx_stat_;
    clear_has_rx_tx_stat();
  }
}
 const ::communicator::Mac_tx_stat& Mac_stat_Cell_information::tx_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.tx_stat)
  return has_tx_stat()
      ? *rx_tx_stat_.tx_stat_
      : ::communicator::Mac_tx_stat::default_instance();
}
::communicator::Mac_tx_stat* Mac_stat_Cell_information::mutable_tx_stat() {
  if (!has_tx_stat()) {
    clear_rx_tx_stat();
    set_has_tx_stat();
    rx_tx_stat_.tx_stat_ = new ::communicator::Mac_tx_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_stat.Cell_information.tx_stat)
  return rx_tx_stat_.tx_stat_;
}
::communicator::Mac_tx_stat* Mac_stat_Cell_information::release_tx_stat() {
  // @@protoc_insertion_point(field_release:communicator.Mac_stat.Cell_information.tx_stat)
  if (has_tx_stat()) {
    clear_has_rx_tx_stat();
    ::communicator::Mac_tx_stat* temp = rx_tx_stat_.tx_stat_;
    rx_tx_stat_.tx_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mac_stat_Cell_information::set_allocated_tx_stat(::communicator::Mac_tx_stat* tx_stat) {
  clear_rx_tx_stat();
  if (tx_stat) {
    set_has_tx_stat();
    rx_tx_stat_.tx_stat_ = tx_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_stat.Cell_information.tx_stat)
}

// .communicator.Mac_rx_stat rx_stat = 6;
bool Mac_stat_Cell_information::has_rx_stat() const {
  return rx_tx_stat_case() == kRxStat;
}
void Mac_stat_Cell_information::set_has_rx_stat() {
  _oneof_case_[0] = kRxStat;
}
void Mac_stat_Cell_information::clear_rx_stat() {
  if (has_rx_stat()) {
    delete rx_tx_stat_.rx_stat_;
    clear_has_rx_tx_stat();
  }
}
 const ::communicator::Mac_rx_stat& Mac_stat_Cell_information::rx_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Cell_information.rx_stat)
  return has_rx_stat()
      ? *rx_tx_stat_.rx_stat_
      : ::communicator::Mac_rx_stat::default_instance();
}
::communicator::Mac_rx_stat* Mac_stat_Cell_information::mutable_rx_stat() {
  if (!has_rx_stat()) {
    clear_rx_tx_stat();
    set_has_rx_stat();
    rx_tx_stat_.rx_stat_ = new ::communicator::Mac_rx_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_stat.Cell_information.rx_stat)
  return rx_tx_stat_.rx_stat_;
}
::communicator::Mac_rx_stat* Mac_stat_Cell_information::release_rx_stat() {
  // @@protoc_insertion_point(field_release:communicator.Mac_stat.Cell_information.rx_stat)
  if (has_rx_stat()) {
    clear_has_rx_tx_stat();
    ::communicator::Mac_rx_stat* temp = rx_tx_stat_.rx_stat_;
    rx_tx_stat_.rx_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mac_stat_Cell_information::set_allocated_rx_stat(::communicator::Mac_rx_stat* rx_stat) {
  clear_rx_tx_stat();
  if (rx_stat) {
    set_has_rx_stat();
    rx_tx_stat_.rx_stat_ = rx_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_stat.Cell_information.rx_stat)
}

bool Mac_stat_Cell_information::has_rx_tx_stat() const {
  return rx_tx_stat_case() != RX_TX_STAT_NOT_SET;
}
void Mac_stat_Cell_information::clear_has_rx_tx_stat() {
  _oneof_case_[0] = RX_TX_STAT_NOT_SET;
}
Mac_stat_Cell_information::RxTxStatCase Mac_stat_Cell_information::rx_tx_stat_case() const {
  return Mac_stat_Cell_information::RxTxStatCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_stat_Mac_send_stat::kStartTimestampFieldNumber;
const int Mac_stat_Mac_send_stat::kPacketCountFieldNumber;
const int Mac_stat_Mac_send_stat::kChFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_stat_Mac_send_stat::Mac_stat_Mac_send_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_stat.Mac_send_stat)
}
Mac_stat_Mac_send_stat::Mac_stat_Mac_send_stat(const Mac_stat_Mac_send_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    reinterpret_cast<char*>(&ch_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(ch_));
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_stat.Mac_send_stat)
}

void Mac_stat_Mac_send_stat::SharedCtor() {
  ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&ch_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(ch_));
  _cached_size_ = 0;
}

Mac_stat_Mac_send_stat::~Mac_stat_Mac_send_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_stat.Mac_send_stat)
  SharedDtor();
}

void Mac_stat_Mac_send_stat::SharedDtor() {
}

void Mac_stat_Mac_send_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_stat_Mac_send_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_stat_Mac_send_stat& Mac_stat_Mac_send_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_stat_Mac_send_stat* Mac_stat_Mac_send_stat::New(::google::protobuf::Arena* arena) const {
  Mac_stat_Mac_send_stat* n = new Mac_stat_Mac_send_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_stat_Mac_send_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_stat.Mac_send_stat)
  ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&ch_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(ch_));
}

bool Mac_stat_Mac_send_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_stat.Mac_send_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 packet_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_stat.Mac_send_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_stat.Mac_send_stat)
  return false;
#undef DO_
}

void Mac_stat_Mac_send_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_stat.Mac_send_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // uint32 packet_count = 2;
  if (this->packet_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packet_count(), output);
  }

  // uint32 ch = 3;
  if (this->ch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ch(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_stat.Mac_send_stat)
}

::google::protobuf::uint8* Mac_stat_Mac_send_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_stat.Mac_send_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // uint32 packet_count = 2;
  if (this->packet_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->packet_count(), target);
  }

  // uint32 ch = 3;
  if (this->ch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ch(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_stat.Mac_send_stat)
  return target;
}

size_t Mac_stat_Mac_send_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_stat.Mac_send_stat)
  size_t total_size = 0;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp());
  }

  // uint32 packet_count = 2;
  if (this->packet_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packet_count());
  }

  // uint32 ch = 3;
  if (this->ch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_stat_Mac_send_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_stat.Mac_send_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_stat_Mac_send_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_stat_Mac_send_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_stat.Mac_send_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_stat.Mac_send_stat)
    MergeFrom(*source);
  }
}

void Mac_stat_Mac_send_stat::MergeFrom(const Mac_stat_Mac_send_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_stat.Mac_send_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.packet_count() != 0) {
    set_packet_count(from.packet_count());
  }
  if (from.ch() != 0) {
    set_ch(from.ch());
  }
}

void Mac_stat_Mac_send_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_stat.Mac_send_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_stat_Mac_send_stat::CopyFrom(const Mac_stat_Mac_send_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_stat.Mac_send_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_stat_Mac_send_stat::IsInitialized() const {
  return true;
}

void Mac_stat_Mac_send_stat::Swap(Mac_stat_Mac_send_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_stat_Mac_send_stat::InternalSwap(Mac_stat_Mac_send_stat* other) {
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(packet_count_, other->packet_count_);
  std::swap(ch_, other->ch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_stat_Mac_send_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_stat_Mac_send_stat

// uint64 start_timestamp = 1;
void Mac_stat_Mac_send_stat::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_stat_Mac_send_stat::start_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Mac_send_stat.start_timestamp)
  return start_timestamp_;
}
void Mac_stat_Mac_send_stat::set_start_timestamp(::google::protobuf::uint64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Mac_send_stat.start_timestamp)
}

// uint32 packet_count = 2;
void Mac_stat_Mac_send_stat::clear_packet_count() {
  packet_count_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Mac_send_stat::packet_count() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Mac_send_stat.packet_count)
  return packet_count_;
}
void Mac_stat_Mac_send_stat::set_packet_count(::google::protobuf::uint32 value) {
  
  packet_count_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Mac_send_stat.packet_count)
}

// uint32 ch = 3;
void Mac_stat_Mac_send_stat::clear_ch() {
  ch_ = 0u;
}
::google::protobuf::uint32 Mac_stat_Mac_send_stat::ch() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.Mac_send_stat.ch)
  return ch_;
}
void Mac_stat_Mac_send_stat::set_ch(::google::protobuf::uint32 value) {
  
  ch_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.Mac_send_stat.ch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mac_stat::kAverageMacDelayFieldNumber;
const int Mac_stat::kPktsLostMacFieldNumber;
const int Mac_stat::kHostTimestampFieldNumber;
const int Mac_stat::kFpgaTimestampFieldNumber;
const int Mac_stat::kFrameFieldNumber;
const int Mac_stat::kRxTxStatFieldNumber;
const int Mac_stat::kQueueStatFieldNumber;
const int Mac_stat::kSendStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mac_stat::Mac_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Mac_stat)
}
Mac_stat::Mac_stat(const Mac_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&average_mac_delay_, &from.average_mac_delay_,
    reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&average_mac_delay_) + sizeof(frame_));
  clear_has_stat();
  switch (from.stat_case()) {
    case kRxTxStat: {
      mutable_rx_tx_stat()->::communicator::Mac_stat_Cell_information::MergeFrom(from.rx_tx_stat());
      break;
    }
    case kQueueStat: {
      mutable_queue_stat()->::communicator::Mac_queue_stat::MergeFrom(from.queue_stat());
      break;
    }
    case kSendStat: {
      mutable_send_stat()->::communicator::Mac_stat_Mac_send_stat::MergeFrom(from.send_stat());
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Mac_stat)
}

void Mac_stat::SharedCtor() {
  ::memset(&average_mac_delay_, 0, reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&average_mac_delay_) + sizeof(frame_));
  clear_has_stat();
  _cached_size_ = 0;
}

Mac_stat::~Mac_stat() {
  // @@protoc_insertion_point(destructor:communicator.Mac_stat)
  SharedDtor();
}

void Mac_stat::SharedDtor() {
  if (has_stat()) {
    clear_stat();
  }
}

void Mac_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mac_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mac_stat& Mac_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mac_stat* Mac_stat::New(::google::protobuf::Arena* arena) const {
  Mac_stat* n = new Mac_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mac_stat::clear_stat() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Mac_stat)
  switch (stat_case()) {
    case kRxTxStat: {
      delete stat_.rx_tx_stat_;
      break;
    }
    case kQueueStat: {
      delete stat_.queue_stat_;
      break;
    }
    case kSendStat: {
      delete stat_.send_stat_;
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAT_NOT_SET;
}


void Mac_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Mac_stat)
  ::memset(&average_mac_delay_, 0, reinterpret_cast<char*>(&frame_) -
    reinterpret_cast<char*>(&average_mac_delay_) + sizeof(frame_));
  clear_stat();
}

bool Mac_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Mac_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 average_mac_delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_mac_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pkts_lost_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkts_lost_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 host_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &host_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fpga_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fpga_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_stat.Cell_information rx_tx_stat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rx_tx_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_queue_stat queue_stat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queue_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_stat.Mac_send_stat send_stat = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Mac_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Mac_stat)
  return false;
#undef DO_
}

void Mac_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Mac_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_mac_delay = 1;
  if (this->average_mac_delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->average_mac_delay(), output);
  }

  // uint32 pkts_lost_mac = 2;
  if (this->pkts_lost_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkts_lost_mac(), output);
  }

  // uint64 host_timestamp = 3;
  if (this->host_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->host_timestamp(), output);
  }

  // uint64 fpga_timestamp = 4;
  if (this->fpga_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fpga_timestamp(), output);
  }

  // uint64 frame = 5;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->frame(), output);
  }

  // .communicator.Mac_stat.Cell_information rx_tx_stat = 6;
  if (has_rx_tx_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *stat_.rx_tx_stat_, output);
  }

  // .communicator.Mac_queue_stat queue_stat = 7;
  if (has_queue_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *stat_.queue_stat_, output);
  }

  // .communicator.Mac_stat.Mac_send_stat send_stat = 8;
  if (has_send_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *stat_.send_stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Mac_stat)
}

::google::protobuf::uint8* Mac_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Mac_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 average_mac_delay = 1;
  if (this->average_mac_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->average_mac_delay(), target);
  }

  // uint32 pkts_lost_mac = 2;
  if (this->pkts_lost_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pkts_lost_mac(), target);
  }

  // uint64 host_timestamp = 3;
  if (this->host_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->host_timestamp(), target);
  }

  // uint64 fpga_timestamp = 4;
  if (this->fpga_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fpga_timestamp(), target);
  }

  // uint64 frame = 5;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->frame(), target);
  }

  // .communicator.Mac_stat.Cell_information rx_tx_stat = 6;
  if (has_rx_tx_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *stat_.rx_tx_stat_, deterministic, target);
  }

  // .communicator.Mac_queue_stat queue_stat = 7;
  if (has_queue_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *stat_.queue_stat_, deterministic, target);
  }

  // .communicator.Mac_stat.Mac_send_stat send_stat = 8;
  if (has_send_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *stat_.send_stat_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Mac_stat)
  return target;
}

size_t Mac_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Mac_stat)
  size_t total_size = 0;

  // uint32 average_mac_delay = 1;
  if (this->average_mac_delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->average_mac_delay());
  }

  // uint32 pkts_lost_mac = 2;
  if (this->pkts_lost_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pkts_lost_mac());
  }

  // uint64 host_timestamp = 3;
  if (this->host_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->host_timestamp());
  }

  // uint64 fpga_timestamp = 4;
  if (this->fpga_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fpga_timestamp());
  }

  // uint64 frame = 5;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frame());
  }

  switch (stat_case()) {
    // .communicator.Mac_stat.Cell_information rx_tx_stat = 6;
    case kRxTxStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.rx_tx_stat_);
      break;
    }
    // .communicator.Mac_queue_stat queue_stat = 7;
    case kQueueStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.queue_stat_);
      break;
    }
    // .communicator.Mac_stat.Mac_send_stat send_stat = 8;
    case kSendStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *stat_.send_stat_);
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mac_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Mac_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const Mac_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mac_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Mac_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Mac_stat)
    MergeFrom(*source);
  }
}

void Mac_stat::MergeFrom(const Mac_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Mac_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.average_mac_delay() != 0) {
    set_average_mac_delay(from.average_mac_delay());
  }
  if (from.pkts_lost_mac() != 0) {
    set_pkts_lost_mac(from.pkts_lost_mac());
  }
  if (from.host_timestamp() != 0) {
    set_host_timestamp(from.host_timestamp());
  }
  if (from.fpga_timestamp() != 0) {
    set_fpga_timestamp(from.fpga_timestamp());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  switch (from.stat_case()) {
    case kRxTxStat: {
      mutable_rx_tx_stat()->::communicator::Mac_stat_Cell_information::MergeFrom(from.rx_tx_stat());
      break;
    }
    case kQueueStat: {
      mutable_queue_stat()->::communicator::Mac_queue_stat::MergeFrom(from.queue_stat());
      break;
    }
    case kSendStat: {
      mutable_send_stat()->::communicator::Mac_stat_Mac_send_stat::MergeFrom(from.send_stat());
      break;
    }
    case STAT_NOT_SET: {
      break;
    }
  }
}

void Mac_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Mac_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mac_stat::CopyFrom(const Mac_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Mac_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mac_stat::IsInitialized() const {
  return true;
}

void Mac_stat::Swap(Mac_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mac_stat::InternalSwap(Mac_stat* other) {
  std::swap(average_mac_delay_, other->average_mac_delay_);
  std::swap(pkts_lost_mac_, other->pkts_lost_mac_);
  std::swap(host_timestamp_, other->host_timestamp_);
  std::swap(fpga_timestamp_, other->fpga_timestamp_);
  std::swap(frame_, other->frame_);
  std::swap(stat_, other->stat_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mac_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mac_stat

// uint32 average_mac_delay = 1;
void Mac_stat::clear_average_mac_delay() {
  average_mac_delay_ = 0u;
}
::google::protobuf::uint32 Mac_stat::average_mac_delay() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.average_mac_delay)
  return average_mac_delay_;
}
void Mac_stat::set_average_mac_delay(::google::protobuf::uint32 value) {
  
  average_mac_delay_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.average_mac_delay)
}

// uint32 pkts_lost_mac = 2;
void Mac_stat::clear_pkts_lost_mac() {
  pkts_lost_mac_ = 0u;
}
::google::protobuf::uint32 Mac_stat::pkts_lost_mac() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.pkts_lost_mac)
  return pkts_lost_mac_;
}
void Mac_stat::set_pkts_lost_mac(::google::protobuf::uint32 value) {
  
  pkts_lost_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.pkts_lost_mac)
}

// uint64 host_timestamp = 3;
void Mac_stat::clear_host_timestamp() {
  host_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_stat::host_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.host_timestamp)
  return host_timestamp_;
}
void Mac_stat::set_host_timestamp(::google::protobuf::uint64 value) {
  
  host_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.host_timestamp)
}

// uint64 fpga_timestamp = 4;
void Mac_stat::clear_fpga_timestamp() {
  fpga_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_stat::fpga_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.fpga_timestamp)
  return fpga_timestamp_;
}
void Mac_stat::set_fpga_timestamp(::google::protobuf::uint64 value) {
  
  fpga_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.fpga_timestamp)
}

// uint64 frame = 5;
void Mac_stat::clear_frame() {
  frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Mac_stat::frame() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.frame)
  return frame_;
}
void Mac_stat::set_frame(::google::protobuf::uint64 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:communicator.Mac_stat.frame)
}

// .communicator.Mac_stat.Cell_information rx_tx_stat = 6;
bool Mac_stat::has_rx_tx_stat() const {
  return stat_case() == kRxTxStat;
}
void Mac_stat::set_has_rx_tx_stat() {
  _oneof_case_[0] = kRxTxStat;
}
void Mac_stat::clear_rx_tx_stat() {
  if (has_rx_tx_stat()) {
    delete stat_.rx_tx_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Mac_stat_Cell_information& Mac_stat::rx_tx_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.rx_tx_stat)
  return has_rx_tx_stat()
      ? *stat_.rx_tx_stat_
      : ::communicator::Mac_stat_Cell_information::default_instance();
}
::communicator::Mac_stat_Cell_information* Mac_stat::mutable_rx_tx_stat() {
  if (!has_rx_tx_stat()) {
    clear_stat();
    set_has_rx_tx_stat();
    stat_.rx_tx_stat_ = new ::communicator::Mac_stat_Cell_information;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_stat.rx_tx_stat)
  return stat_.rx_tx_stat_;
}
::communicator::Mac_stat_Cell_information* Mac_stat::release_rx_tx_stat() {
  // @@protoc_insertion_point(field_release:communicator.Mac_stat.rx_tx_stat)
  if (has_rx_tx_stat()) {
    clear_has_stat();
    ::communicator::Mac_stat_Cell_information* temp = stat_.rx_tx_stat_;
    stat_.rx_tx_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mac_stat::set_allocated_rx_tx_stat(::communicator::Mac_stat_Cell_information* rx_tx_stat) {
  clear_stat();
  if (rx_tx_stat) {
    set_has_rx_tx_stat();
    stat_.rx_tx_stat_ = rx_tx_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_stat.rx_tx_stat)
}

// .communicator.Mac_queue_stat queue_stat = 7;
bool Mac_stat::has_queue_stat() const {
  return stat_case() == kQueueStat;
}
void Mac_stat::set_has_queue_stat() {
  _oneof_case_[0] = kQueueStat;
}
void Mac_stat::clear_queue_stat() {
  if (has_queue_stat()) {
    delete stat_.queue_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Mac_queue_stat& Mac_stat::queue_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.queue_stat)
  return has_queue_stat()
      ? *stat_.queue_stat_
      : ::communicator::Mac_queue_stat::default_instance();
}
::communicator::Mac_queue_stat* Mac_stat::mutable_queue_stat() {
  if (!has_queue_stat()) {
    clear_stat();
    set_has_queue_stat();
    stat_.queue_stat_ = new ::communicator::Mac_queue_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_stat.queue_stat)
  return stat_.queue_stat_;
}
::communicator::Mac_queue_stat* Mac_stat::release_queue_stat() {
  // @@protoc_insertion_point(field_release:communicator.Mac_stat.queue_stat)
  if (has_queue_stat()) {
    clear_has_stat();
    ::communicator::Mac_queue_stat* temp = stat_.queue_stat_;
    stat_.queue_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mac_stat::set_allocated_queue_stat(::communicator::Mac_queue_stat* queue_stat) {
  clear_stat();
  if (queue_stat) {
    set_has_queue_stat();
    stat_.queue_stat_ = queue_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_stat.queue_stat)
}

// .communicator.Mac_stat.Mac_send_stat send_stat = 8;
bool Mac_stat::has_send_stat() const {
  return stat_case() == kSendStat;
}
void Mac_stat::set_has_send_stat() {
  _oneof_case_[0] = kSendStat;
}
void Mac_stat::clear_send_stat() {
  if (has_send_stat()) {
    delete stat_.send_stat_;
    clear_has_stat();
  }
}
 const ::communicator::Mac_stat_Mac_send_stat& Mac_stat::send_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Mac_stat.send_stat)
  return has_send_stat()
      ? *stat_.send_stat_
      : ::communicator::Mac_stat_Mac_send_stat::default_instance();
}
::communicator::Mac_stat_Mac_send_stat* Mac_stat::mutable_send_stat() {
  if (!has_send_stat()) {
    clear_stat();
    set_has_send_stat();
    stat_.send_stat_ = new ::communicator::Mac_stat_Mac_send_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Mac_stat.send_stat)
  return stat_.send_stat_;
}
::communicator::Mac_stat_Mac_send_stat* Mac_stat::release_send_stat() {
  // @@protoc_insertion_point(field_release:communicator.Mac_stat.send_stat)
  if (has_send_stat()) {
    clear_has_stat();
    ::communicator::Mac_stat_Mac_send_stat* temp = stat_.send_stat_;
    stat_.send_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Mac_stat::set_allocated_send_stat(::communicator::Mac_stat_Mac_send_stat* send_stat) {
  clear_stat();
  if (send_stat) {
    set_has_send_stat();
    stat_.send_stat_ = send_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Mac_stat.send_stat)
}

bool Mac_stat::has_stat() const {
  return stat_case() != STAT_NOT_SET;
}
void Mac_stat::clear_has_stat() {
  _oneof_case_[0] = STAT_NOT_SET;
}
Mac_stat::StatCase Mac_stat::stat_case() const {
  return Mac_stat::StatCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RF_timeslot_stat::kHostTimestampFieldNumber;
const int RF_timeslot_stat::kFpgaTimestampFieldNumber;
const int RF_timeslot_stat::kFrameFieldNumber;
const int RF_timeslot_stat::kSlotFieldNumber;
const int RF_timeslot_stat::kRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RF_timeslot_stat::RF_timeslot_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.RF_timeslot_stat)
}
RF_timeslot_stat::RF_timeslot_stat(const RF_timeslot_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rssi_(from.rssi_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&host_timestamp_, &from.host_timestamp_,
    reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:communicator.RF_timeslot_stat)
}

void RF_timeslot_stat::SharedCtor() {
  ::memset(&host_timestamp_, 0, reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(slot_));
  _cached_size_ = 0;
}

RF_timeslot_stat::~RF_timeslot_stat() {
  // @@protoc_insertion_point(destructor:communicator.RF_timeslot_stat)
  SharedDtor();
}

void RF_timeslot_stat::SharedDtor() {
}

void RF_timeslot_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RF_timeslot_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RF_timeslot_stat& RF_timeslot_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

RF_timeslot_stat* RF_timeslot_stat::New(::google::protobuf::Arena* arena) const {
  RF_timeslot_stat* n = new RF_timeslot_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RF_timeslot_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.RF_timeslot_stat)
  rssi_.Clear();
  ::memset(&host_timestamp_, 0, reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&host_timestamp_) + sizeof(slot_));
}

bool RF_timeslot_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.RF_timeslot_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 host_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &host_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fpga_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fpga_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double rssi = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_rssi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_rssi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.RF_timeslot_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.RF_timeslot_stat)
  return false;
#undef DO_
}

void RF_timeslot_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.RF_timeslot_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->host_timestamp(), output);
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fpga_timestamp(), output);
  }

  // uint64 frame = 3;
  if (this->frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->frame(), output);
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot(), output);
  }

  // repeated double rssi = 5;
  if (this->rssi_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rssi_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->rssi().data(), this->rssi_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.RF_timeslot_stat)
}

::google::protobuf::uint8* RF_timeslot_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.RF_timeslot_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->host_timestamp(), target);
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fpga_timestamp(), target);
  }

  // uint64 frame = 3;
  if (this->frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->frame(), target);
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot(), target);
  }

  // repeated double rssi = 5;
  if (this->rssi_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rssi_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->rssi_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.RF_timeslot_stat)
  return target;
}

size_t RF_timeslot_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.RF_timeslot_stat)
  size_t total_size = 0;

  // repeated double rssi = 5;
  {
    unsigned int count = this->rssi_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rssi_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint64 host_timestamp = 1;
  if (this->host_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->host_timestamp());
  }

  // uint64 fpga_timestamp = 2;
  if (this->fpga_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fpga_timestamp());
  }

  // uint64 frame = 3;
  if (this->frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->frame());
  }

  // uint32 slot = 4;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RF_timeslot_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.RF_timeslot_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const RF_timeslot_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RF_timeslot_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.RF_timeslot_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.RF_timeslot_stat)
    MergeFrom(*source);
  }
}

void RF_timeslot_stat::MergeFrom(const RF_timeslot_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.RF_timeslot_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rssi_.MergeFrom(from.rssi_);
  if (from.host_timestamp() != 0) {
    set_host_timestamp(from.host_timestamp());
  }
  if (from.fpga_timestamp() != 0) {
    set_fpga_timestamp(from.fpga_timestamp());
  }
  if (from.frame() != 0) {
    set_frame(from.frame());
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void RF_timeslot_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.RF_timeslot_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RF_timeslot_stat::CopyFrom(const RF_timeslot_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.RF_timeslot_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RF_timeslot_stat::IsInitialized() const {
  return true;
}

void RF_timeslot_stat::Swap(RF_timeslot_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RF_timeslot_stat::InternalSwap(RF_timeslot_stat* other) {
  rssi_.InternalSwap(&other->rssi_);
  std::swap(host_timestamp_, other->host_timestamp_);
  std::swap(fpga_timestamp_, other->fpga_timestamp_);
  std::swap(frame_, other->frame_);
  std::swap(slot_, other->slot_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RF_timeslot_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RF_timeslot_stat

// uint64 host_timestamp = 1;
void RF_timeslot_stat::clear_host_timestamp() {
  host_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RF_timeslot_stat::host_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.RF_timeslot_stat.host_timestamp)
  return host_timestamp_;
}
void RF_timeslot_stat::set_host_timestamp(::google::protobuf::uint64 value) {
  
  host_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.RF_timeslot_stat.host_timestamp)
}

// uint64 fpga_timestamp = 2;
void RF_timeslot_stat::clear_fpga_timestamp() {
  fpga_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RF_timeslot_stat::fpga_timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.RF_timeslot_stat.fpga_timestamp)
  return fpga_timestamp_;
}
void RF_timeslot_stat::set_fpga_timestamp(::google::protobuf::uint64 value) {
  
  fpga_timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.RF_timeslot_stat.fpga_timestamp)
}

// uint64 frame = 3;
void RF_timeslot_stat::clear_frame() {
  frame_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RF_timeslot_stat::frame() const {
  // @@protoc_insertion_point(field_get:communicator.RF_timeslot_stat.frame)
  return frame_;
}
void RF_timeslot_stat::set_frame(::google::protobuf::uint64 value) {
  
  frame_ = value;
  // @@protoc_insertion_point(field_set:communicator.RF_timeslot_stat.frame)
}

// uint32 slot = 4;
void RF_timeslot_stat::clear_slot() {
  slot_ = 0u;
}
::google::protobuf::uint32 RF_timeslot_stat::slot() const {
  // @@protoc_insertion_point(field_get:communicator.RF_timeslot_stat.slot)
  return slot_;
}
void RF_timeslot_stat::set_slot(::google::protobuf::uint32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:communicator.RF_timeslot_stat.slot)
}

// repeated double rssi = 5;
int RF_timeslot_stat::rssi_size() const {
  return rssi_.size();
}
void RF_timeslot_stat::clear_rssi() {
  rssi_.Clear();
}
double RF_timeslot_stat::rssi(int index) const {
  // @@protoc_insertion_point(field_get:communicator.RF_timeslot_stat.rssi)
  return rssi_.Get(index);
}
void RF_timeslot_stat::set_rssi(int index, double value) {
  rssi_.Set(index, value);
  // @@protoc_insertion_point(field_set:communicator.RF_timeslot_stat.rssi)
}
void RF_timeslot_stat::add_rssi(double value) {
  rssi_.Add(value);
  // @@protoc_insertion_point(field_add:communicator.RF_timeslot_stat.rssi)
}
const ::google::protobuf::RepeatedField< double >&
RF_timeslot_stat::rssi() const {
  // @@protoc_insertion_point(field_list:communicator.RF_timeslot_stat.rssi)
  return rssi_;
}
::google::protobuf::RepeatedField< double >*
RF_timeslot_stat::mutable_rssi() {
  // @@protoc_insertion_point(field_mutable_list:communicator.RF_timeslot_stat.rssi)
  return &rssi_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RF_stat::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RF_stat::RF_stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.RF_stat)
}
RF_stat::RF_stat(const RF_stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stats_(from.stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:communicator.RF_stat)
}

void RF_stat::SharedCtor() {
  _cached_size_ = 0;
}

RF_stat::~RF_stat() {
  // @@protoc_insertion_point(destructor:communicator.RF_stat)
  SharedDtor();
}

void RF_stat::SharedDtor() {
}

void RF_stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RF_stat::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RF_stat& RF_stat::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

RF_stat* RF_stat::New(::google::protobuf::Arena* arena) const {
  RF_stat* n = new RF_stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RF_stat::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.RF_stat)
  stats_.Clear();
}

bool RF_stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.RF_stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .communicator.RF_timeslot_stat stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.RF_stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.RF_stat)
  return false;
#undef DO_
}

void RF_stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.RF_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.RF_timeslot_stat stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.RF_stat)
}

::google::protobuf::uint8* RF_stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.RF_stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.RF_timeslot_stat stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stats(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.RF_stat)
  return target;
}

size_t RF_stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.RF_stat)
  size_t total_size = 0;

  // repeated .communicator.RF_timeslot_stat stats = 1;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RF_stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.RF_stat)
  GOOGLE_DCHECK_NE(&from, this);
  const RF_stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RF_stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.RF_stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.RF_stat)
    MergeFrom(*source);
  }
}

void RF_stat::MergeFrom(const RF_stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.RF_stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void RF_stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.RF_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RF_stat::CopyFrom(const RF_stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.RF_stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RF_stat::IsInitialized() const {
  return true;
}

void RF_stat::Swap(RF_stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RF_stat::InternalSwap(RF_stat* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RF_stat::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RF_stat

// repeated .communicator.RF_timeslot_stat stats = 1;
int RF_stat::stats_size() const {
  return stats_.size();
}
void RF_stat::clear_stats() {
  stats_.Clear();
}
const ::communicator::RF_timeslot_stat& RF_stat::stats(int index) const {
  // @@protoc_insertion_point(field_get:communicator.RF_stat.stats)
  return stats_.Get(index);
}
::communicator::RF_timeslot_stat* RF_stat::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:communicator.RF_stat.stats)
  return stats_.Mutable(index);
}
::communicator::RF_timeslot_stat* RF_stat::add_stats() {
  // @@protoc_insertion_point(field_add:communicator.RF_stat.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::communicator::RF_timeslot_stat >*
RF_stat::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:communicator.RF_stat.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::communicator::RF_timeslot_stat >&
RF_stat::stats() const {
  // @@protoc_insertion_point(field_list:communicator.RF_stat.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Application_data::kNextMacFieldNumber;
const int Application_data::kDestinationIpFieldNumber;
const int Application_data::kPacketTypeFieldNumber;
const int Application_data::kTrafficClassFieldNumber;
const int Application_data::kPriorityFieldNumber;
const int Application_data::kDataFieldNumber;
const int Application_data::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Application_data::Application_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Application_data)
}
Application_data::Application_data(const Application_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&next_mac_, &from.next_mac_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&next_mac_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:communicator.Application_data)
}

void Application_data::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&next_mac_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&next_mac_) + sizeof(timestamp_));
  _cached_size_ = 0;
}

Application_data::~Application_data() {
  // @@protoc_insertion_point(destructor:communicator.Application_data)
  SharedDtor();
}

void Application_data::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Application_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Application_data::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Application_data& Application_data::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Application_data* Application_data::New(::google::protobuf::Arena* arena) const {
  Application_data* n = new Application_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Application_data::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Application_data)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&next_mac_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&next_mac_) + sizeof(timestamp_));
}

bool Application_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Application_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 next_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 destination_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &destination_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Application_data.PACKET_TYPE packet_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_packet_type(static_cast< ::communicator::Application_data_PACKET_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Application_data.TRAFFIC_CLASS traffic_class = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traffic_class(static_cast< ::communicator::Application_data_TRAFFIC_CLASS >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 priority = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Application_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Application_data)
  return false;
#undef DO_
}

void Application_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Application_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_mac = 1;
  if (this->next_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->next_mac(), output);
  }

  // fixed32 destination_ip = 2;
  if (this->destination_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->destination_ip(), output);
  }

  // .communicator.Application_data.PACKET_TYPE packet_type = 3;
  if (this->packet_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->packet_type(), output);
  }

  // .communicator.Application_data.TRAFFIC_CLASS traffic_class = 4;
  if (this->traffic_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->traffic_class(), output);
  }

  // uint32 priority = 5;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->priority(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Application_data)
}

::google::protobuf::uint8* Application_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Application_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_mac = 1;
  if (this->next_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->next_mac(), target);
  }

  // fixed32 destination_ip = 2;
  if (this->destination_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->destination_ip(), target);
  }

  // .communicator.Application_data.PACKET_TYPE packet_type = 3;
  if (this->packet_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->packet_type(), target);
  }

  // .communicator.Application_data.TRAFFIC_CLASS traffic_class = 4;
  if (this->traffic_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->traffic_class(), target);
  }

  // uint32 priority = 5;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->priority(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Application_data)
  return target;
}

size_t Application_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Application_data)
  size_t total_size = 0;

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 next_mac = 1;
  if (this->next_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->next_mac());
  }

  // fixed32 destination_ip = 2;
  if (this->destination_ip() != 0) {
    total_size += 1 + 4;
  }

  // .communicator.Application_data.PACKET_TYPE packet_type = 3;
  if (this->packet_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->packet_type());
  }

  // .communicator.Application_data.TRAFFIC_CLASS traffic_class = 4;
  if (this->traffic_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_class());
  }

  // uint32 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Application_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Application_data)
  GOOGLE_DCHECK_NE(&from, this);
  const Application_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Application_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Application_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Application_data)
    MergeFrom(*source);
  }
}

void Application_data::MergeFrom(const Application_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Application_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.next_mac() != 0) {
    set_next_mac(from.next_mac());
  }
  if (from.destination_ip() != 0) {
    set_destination_ip(from.destination_ip());
  }
  if (from.packet_type() != 0) {
    set_packet_type(from.packet_type());
  }
  if (from.traffic_class() != 0) {
    set_traffic_class(from.traffic_class());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Application_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Application_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Application_data::CopyFrom(const Application_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Application_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application_data::IsInitialized() const {
  return true;
}

void Application_data::Swap(Application_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Application_data::InternalSwap(Application_data* other) {
  data_.Swap(&other->data_);
  std::swap(next_mac_, other->next_mac_);
  std::swap(destination_ip_, other->destination_ip_);
  std::swap(packet_type_, other->packet_type_);
  std::swap(traffic_class_, other->traffic_class_);
  std::swap(priority_, other->priority_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Application_data::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Application_data

// uint64 next_mac = 1;
void Application_data::clear_next_mac() {
  next_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Application_data::next_mac() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.next_mac)
  return next_mac_;
}
void Application_data::set_next_mac(::google::protobuf::uint64 value) {
  
  next_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.next_mac)
}

// fixed32 destination_ip = 2;
void Application_data::clear_destination_ip() {
  destination_ip_ = 0u;
}
::google::protobuf::uint32 Application_data::destination_ip() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.destination_ip)
  return destination_ip_;
}
void Application_data::set_destination_ip(::google::protobuf::uint32 value) {
  
  destination_ip_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.destination_ip)
}

// .communicator.Application_data.PACKET_TYPE packet_type = 3;
void Application_data::clear_packet_type() {
  packet_type_ = 0;
}
::communicator::Application_data_PACKET_TYPE Application_data::packet_type() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.packet_type)
  return static_cast< ::communicator::Application_data_PACKET_TYPE >(packet_type_);
}
void Application_data::set_packet_type(::communicator::Application_data_PACKET_TYPE value) {
  
  packet_type_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.packet_type)
}

// .communicator.Application_data.TRAFFIC_CLASS traffic_class = 4;
void Application_data::clear_traffic_class() {
  traffic_class_ = 0;
}
::communicator::Application_data_TRAFFIC_CLASS Application_data::traffic_class() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.traffic_class)
  return static_cast< ::communicator::Application_data_TRAFFIC_CLASS >(traffic_class_);
}
void Application_data::set_traffic_class(::communicator::Application_data_TRAFFIC_CLASS value) {
  
  traffic_class_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.traffic_class)
}

// uint32 priority = 5;
void Application_data::clear_priority() {
  priority_ = 0u;
}
::google::protobuf::uint32 Application_data::priority() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.priority)
  return priority_;
}
void Application_data::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.priority)
}

// bytes data = 6;
void Application_data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Application_data::data() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.data)
  return data_.GetNoArena();
}
void Application_data::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communicator.Application_data.data)
}
#if LANG_CXX11
void Application_data::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communicator.Application_data.data)
}
#endif
void Application_data::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communicator.Application_data.data)
}
void Application_data::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communicator.Application_data.data)
}
::std::string* Application_data::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:communicator.Application_data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Application_data::release_data() {
  // @@protoc_insertion_point(field_release:communicator.Application_data.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Application_data::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:communicator.Application_data.data)
}

// uint64 timestamp = 7;
void Application_data::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Application_data::timestamp() const {
  // @@protoc_insertion_point(field_get:communicator.Application_data.timestamp)
  return timestamp_;
}
void Application_data::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:communicator.Application_data.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Link_MCS_TxGain_BW::kDestinationMacFieldNumber;
const int Link_MCS_TxGain_BW::kMcsFieldNumber;
const int Link_MCS_TxGain_BW::kTxGainFieldNumber;
const int Link_MCS_TxGain_BW::kBwIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Link_MCS_TxGain_BW::Link_MCS_TxGain_BW()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Link_MCS_TxGain_BW)
}
Link_MCS_TxGain_BW::Link_MCS_TxGain_BW(const Link_MCS_TxGain_BW& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_mac_, &from.destination_mac_,
    reinterpret_cast<char*>(&bw_index_) -
    reinterpret_cast<char*>(&destination_mac_) + sizeof(bw_index_));
  // @@protoc_insertion_point(copy_constructor:communicator.Link_MCS_TxGain_BW)
}

void Link_MCS_TxGain_BW::SharedCtor() {
  ::memset(&destination_mac_, 0, reinterpret_cast<char*>(&bw_index_) -
    reinterpret_cast<char*>(&destination_mac_) + sizeof(bw_index_));
  _cached_size_ = 0;
}

Link_MCS_TxGain_BW::~Link_MCS_TxGain_BW() {
  // @@protoc_insertion_point(destructor:communicator.Link_MCS_TxGain_BW)
  SharedDtor();
}

void Link_MCS_TxGain_BW::SharedDtor() {
}

void Link_MCS_TxGain_BW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link_MCS_TxGain_BW::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Link_MCS_TxGain_BW& Link_MCS_TxGain_BW::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Link_MCS_TxGain_BW* Link_MCS_TxGain_BW::New(::google::protobuf::Arena* arena) const {
  Link_MCS_TxGain_BW* n = new Link_MCS_TxGain_BW;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Link_MCS_TxGain_BW::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Link_MCS_TxGain_BW)
  ::memset(&destination_mac_, 0, reinterpret_cast<char*>(&bw_index_) -
    reinterpret_cast<char*>(&destination_mac_) + sizeof(bw_index_));
}

bool Link_MCS_TxGain_BW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Link_MCS_TxGain_BW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 destination_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destination_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mcs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_gain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.BW_INDEX bw_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bw_index(static_cast< ::communicator::BW_INDEX >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Link_MCS_TxGain_BW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Link_MCS_TxGain_BW)
  return false;
#undef DO_
}

void Link_MCS_TxGain_BW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Link_MCS_TxGain_BW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 destination_mac = 1;
  if (this->destination_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->destination_mac(), output);
  }

  // uint32 mcs = 2;
  if (this->mcs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mcs(), output);
  }

  // uint32 tx_gain = 3;
  if (this->tx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tx_gain(), output);
  }

  // .communicator.BW_INDEX bw_index = 4;
  if (this->bw_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bw_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Link_MCS_TxGain_BW)
}

::google::protobuf::uint8* Link_MCS_TxGain_BW::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Link_MCS_TxGain_BW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 destination_mac = 1;
  if (this->destination_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->destination_mac(), target);
  }

  // uint32 mcs = 2;
  if (this->mcs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mcs(), target);
  }

  // uint32 tx_gain = 3;
  if (this->tx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tx_gain(), target);
  }

  // .communicator.BW_INDEX bw_index = 4;
  if (this->bw_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->bw_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Link_MCS_TxGain_BW)
  return target;
}

size_t Link_MCS_TxGain_BW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Link_MCS_TxGain_BW)
  size_t total_size = 0;

  // uint64 destination_mac = 1;
  if (this->destination_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->destination_mac());
  }

  // uint32 mcs = 2;
  if (this->mcs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mcs());
  }

  // uint32 tx_gain = 3;
  if (this->tx_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_gain());
  }

  // .communicator.BW_INDEX bw_index = 4;
  if (this->bw_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bw_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link_MCS_TxGain_BW::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Link_MCS_TxGain_BW)
  GOOGLE_DCHECK_NE(&from, this);
  const Link_MCS_TxGain_BW* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Link_MCS_TxGain_BW>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Link_MCS_TxGain_BW)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Link_MCS_TxGain_BW)
    MergeFrom(*source);
  }
}

void Link_MCS_TxGain_BW::MergeFrom(const Link_MCS_TxGain_BW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Link_MCS_TxGain_BW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination_mac() != 0) {
    set_destination_mac(from.destination_mac());
  }
  if (from.mcs() != 0) {
    set_mcs(from.mcs());
  }
  if (from.tx_gain() != 0) {
    set_tx_gain(from.tx_gain());
  }
  if (from.bw_index() != 0) {
    set_bw_index(from.bw_index());
  }
}

void Link_MCS_TxGain_BW::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Link_MCS_TxGain_BW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link_MCS_TxGain_BW::CopyFrom(const Link_MCS_TxGain_BW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Link_MCS_TxGain_BW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link_MCS_TxGain_BW::IsInitialized() const {
  return true;
}

void Link_MCS_TxGain_BW::Swap(Link_MCS_TxGain_BW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Link_MCS_TxGain_BW::InternalSwap(Link_MCS_TxGain_BW* other) {
  std::swap(destination_mac_, other->destination_mac_);
  std::swap(mcs_, other->mcs_);
  std::swap(tx_gain_, other->tx_gain_);
  std::swap(bw_index_, other->bw_index_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Link_MCS_TxGain_BW::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Link_MCS_TxGain_BW

// uint64 destination_mac = 1;
void Link_MCS_TxGain_BW::clear_destination_mac() {
  destination_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Link_MCS_TxGain_BW::destination_mac() const {
  // @@protoc_insertion_point(field_get:communicator.Link_MCS_TxGain_BW.destination_mac)
  return destination_mac_;
}
void Link_MCS_TxGain_BW::set_destination_mac(::google::protobuf::uint64 value) {
  
  destination_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Link_MCS_TxGain_BW.destination_mac)
}

// uint32 mcs = 2;
void Link_MCS_TxGain_BW::clear_mcs() {
  mcs_ = 0u;
}
::google::protobuf::uint32 Link_MCS_TxGain_BW::mcs() const {
  // @@protoc_insertion_point(field_get:communicator.Link_MCS_TxGain_BW.mcs)
  return mcs_;
}
void Link_MCS_TxGain_BW::set_mcs(::google::protobuf::uint32 value) {
  
  mcs_ = value;
  // @@protoc_insertion_point(field_set:communicator.Link_MCS_TxGain_BW.mcs)
}

// uint32 tx_gain = 3;
void Link_MCS_TxGain_BW::clear_tx_gain() {
  tx_gain_ = 0u;
}
::google::protobuf::uint32 Link_MCS_TxGain_BW::tx_gain() const {
  // @@protoc_insertion_point(field_get:communicator.Link_MCS_TxGain_BW.tx_gain)
  return tx_gain_;
}
void Link_MCS_TxGain_BW::set_tx_gain(::google::protobuf::uint32 value) {
  
  tx_gain_ = value;
  // @@protoc_insertion_point(field_set:communicator.Link_MCS_TxGain_BW.tx_gain)
}

// .communicator.BW_INDEX bw_index = 4;
void Link_MCS_TxGain_BW::clear_bw_index() {
  bw_index_ = 0;
}
::communicator::BW_INDEX Link_MCS_TxGain_BW::bw_index() const {
  // @@protoc_insertion_point(field_get:communicator.Link_MCS_TxGain_BW.bw_index)
  return static_cast< ::communicator::BW_INDEX >(bw_index_);
}
void Link_MCS_TxGain_BW::set_bw_index(::communicator::BW_INDEX value) {
  
  bw_index_ = value;
  // @@protoc_insertion_point(field_set:communicator.Link_MCS_TxGain_BW.bw_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MFTDMA_Slot::kFrequencyNumFieldNumber;
const int MFTDMA_Slot::kTimeslotNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MFTDMA_Slot::MFTDMA_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.MFTDMA_Slot)
}
MFTDMA_Slot::MFTDMA_Slot(const MFTDMA_Slot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_num_, &from.frequency_num_,
    reinterpret_cast<char*>(&timeslot_num_) -
    reinterpret_cast<char*>(&frequency_num_) + sizeof(timeslot_num_));
  // @@protoc_insertion_point(copy_constructor:communicator.MFTDMA_Slot)
}

void MFTDMA_Slot::SharedCtor() {
  ::memset(&frequency_num_, 0, reinterpret_cast<char*>(&timeslot_num_) -
    reinterpret_cast<char*>(&frequency_num_) + sizeof(timeslot_num_));
  _cached_size_ = 0;
}

MFTDMA_Slot::~MFTDMA_Slot() {
  // @@protoc_insertion_point(destructor:communicator.MFTDMA_Slot)
  SharedDtor();
}

void MFTDMA_Slot::SharedDtor() {
}

void MFTDMA_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MFTDMA_Slot::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MFTDMA_Slot& MFTDMA_Slot::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

MFTDMA_Slot* MFTDMA_Slot::New(::google::protobuf::Arena* arena) const {
  MFTDMA_Slot* n = new MFTDMA_Slot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MFTDMA_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.MFTDMA_Slot)
  ::memset(&frequency_num_, 0, reinterpret_cast<char*>(&timeslot_num_) -
    reinterpret_cast<char*>(&frequency_num_) + sizeof(timeslot_num_));
}

bool MFTDMA_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.MFTDMA_Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frequency_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frequency_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeslot_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeslot_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.MFTDMA_Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.MFTDMA_Slot)
  return false;
#undef DO_
}

void MFTDMA_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.MFTDMA_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency_num = 1;
  if (this->frequency_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frequency_num(), output);
  }

  // uint32 timeslot_num = 2;
  if (this->timeslot_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeslot_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.MFTDMA_Slot)
}

::google::protobuf::uint8* MFTDMA_Slot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.MFTDMA_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frequency_num = 1;
  if (this->frequency_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frequency_num(), target);
  }

  // uint32 timeslot_num = 2;
  if (this->timeslot_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeslot_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.MFTDMA_Slot)
  return target;
}

size_t MFTDMA_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.MFTDMA_Slot)
  size_t total_size = 0;

  // uint32 frequency_num = 1;
  if (this->frequency_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frequency_num());
  }

  // uint32 timeslot_num = 2;
  if (this->timeslot_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeslot_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MFTDMA_Slot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.MFTDMA_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const MFTDMA_Slot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MFTDMA_Slot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.MFTDMA_Slot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.MFTDMA_Slot)
    MergeFrom(*source);
  }
}

void MFTDMA_Slot::MergeFrom(const MFTDMA_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.MFTDMA_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frequency_num() != 0) {
    set_frequency_num(from.frequency_num());
  }
  if (from.timeslot_num() != 0) {
    set_timeslot_num(from.timeslot_num());
  }
}

void MFTDMA_Slot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.MFTDMA_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MFTDMA_Slot::CopyFrom(const MFTDMA_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.MFTDMA_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MFTDMA_Slot::IsInitialized() const {
  return true;
}

void MFTDMA_Slot::Swap(MFTDMA_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MFTDMA_Slot::InternalSwap(MFTDMA_Slot* other) {
  std::swap(frequency_num_, other->frequency_num_);
  std::swap(timeslot_num_, other->timeslot_num_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MFTDMA_Slot::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MFTDMA_Slot

// uint32 frequency_num = 1;
void MFTDMA_Slot::clear_frequency_num() {
  frequency_num_ = 0u;
}
::google::protobuf::uint32 MFTDMA_Slot::frequency_num() const {
  // @@protoc_insertion_point(field_get:communicator.MFTDMA_Slot.frequency_num)
  return frequency_num_;
}
void MFTDMA_Slot::set_frequency_num(::google::protobuf::uint32 value) {
  
  frequency_num_ = value;
  // @@protoc_insertion_point(field_set:communicator.MFTDMA_Slot.frequency_num)
}

// uint32 timeslot_num = 2;
void MFTDMA_Slot::clear_timeslot_num() {
  timeslot_num_ = 0u;
}
::google::protobuf::uint32 MFTDMA_Slot::timeslot_num() const {
  // @@protoc_insertion_point(field_get:communicator.MFTDMA_Slot.timeslot_num)
  return timeslot_num_;
}
void MFTDMA_Slot::set_timeslot_num(::google::protobuf::uint32 value) {
  
  timeslot_num_ = value;
  // @@protoc_insertion_point(field_set:communicator.MFTDMA_Slot.timeslot_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposed_Slots_Request::kMacFieldNumber;
const int Proposed_Slots_Request::kNumSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposed_Slots_Request::Proposed_Slots_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Proposed_Slots_Request)
}
Proposed_Slots_Request::Proposed_Slots_Request(const Proposed_Slots_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mac_, &from.mac_,
    reinterpret_cast<char*>(&num_slots_) -
    reinterpret_cast<char*>(&mac_) + sizeof(num_slots_));
  // @@protoc_insertion_point(copy_constructor:communicator.Proposed_Slots_Request)
}

void Proposed_Slots_Request::SharedCtor() {
  ::memset(&mac_, 0, reinterpret_cast<char*>(&num_slots_) -
    reinterpret_cast<char*>(&mac_) + sizeof(num_slots_));
  _cached_size_ = 0;
}

Proposed_Slots_Request::~Proposed_Slots_Request() {
  // @@protoc_insertion_point(destructor:communicator.Proposed_Slots_Request)
  SharedDtor();
}

void Proposed_Slots_Request::SharedDtor() {
}

void Proposed_Slots_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proposed_Slots_Request::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Proposed_Slots_Request& Proposed_Slots_Request::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proposed_Slots_Request* Proposed_Slots_Request::New(::google::protobuf::Arena* arena) const {
  Proposed_Slots_Request* n = new Proposed_Slots_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proposed_Slots_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Proposed_Slots_Request)
  ::memset(&mac_, 0, reinterpret_cast<char*>(&num_slots_) -
    reinterpret_cast<char*>(&mac_) + sizeof(num_slots_));
}

bool Proposed_Slots_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Proposed_Slots_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_slots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Proposed_Slots_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Proposed_Slots_Request)
  return false;
#undef DO_
}

void Proposed_Slots_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Proposed_Slots_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // uint32 num_slots = 2;
  if (this->num_slots() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_slots(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Proposed_Slots_Request)
}

::google::protobuf::uint8* Proposed_Slots_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Proposed_Slots_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // uint32 num_slots = 2;
  if (this->num_slots() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_slots(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Proposed_Slots_Request)
  return target;
}

size_t Proposed_Slots_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Proposed_Slots_Request)
  size_t total_size = 0;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  // uint32 num_slots = 2;
  if (this->num_slots() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_slots());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proposed_Slots_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Proposed_Slots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposed_Slots_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proposed_Slots_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Proposed_Slots_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Proposed_Slots_Request)
    MergeFrom(*source);
  }
}

void Proposed_Slots_Request::MergeFrom(const Proposed_Slots_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Proposed_Slots_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mac() != 0) {
    set_mac(from.mac());
  }
  if (from.num_slots() != 0) {
    set_num_slots(from.num_slots());
  }
}

void Proposed_Slots_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Proposed_Slots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposed_Slots_Request::CopyFrom(const Proposed_Slots_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Proposed_Slots_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposed_Slots_Request::IsInitialized() const {
  return true;
}

void Proposed_Slots_Request::Swap(Proposed_Slots_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposed_Slots_Request::InternalSwap(Proposed_Slots_Request* other) {
  std::swap(mac_, other->mac_);
  std::swap(num_slots_, other->num_slots_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proposed_Slots_Request::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proposed_Slots_Request

// uint64 mac = 1;
void Proposed_Slots_Request::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Proposed_Slots_Request::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Slots_Request.mac)
  return mac_;
}
void Proposed_Slots_Request::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Proposed_Slots_Request.mac)
}

// uint32 num_slots = 2;
void Proposed_Slots_Request::clear_num_slots() {
  num_slots_ = 0u;
}
::google::protobuf::uint32 Proposed_Slots_Request::num_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Slots_Request.num_slots)
  return num_slots_;
}
void Proposed_Slots_Request::set_num_slots(::google::protobuf::uint32 value) {
  
  num_slots_ = value;
  // @@protoc_insertion_point(field_set:communicator.Proposed_Slots_Request.num_slots)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposed_Slots::kMacFieldNumber;
const int Proposed_Slots::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposed_Slots::Proposed_Slots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Proposed_Slots)
}
Proposed_Slots::Proposed_Slots(const Proposed_Slots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_(from.slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mac_ = from.mac_;
  // @@protoc_insertion_point(copy_constructor:communicator.Proposed_Slots)
}

void Proposed_Slots::SharedCtor() {
  mac_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Proposed_Slots::~Proposed_Slots() {
  // @@protoc_insertion_point(destructor:communicator.Proposed_Slots)
  SharedDtor();
}

void Proposed_Slots::SharedDtor() {
}

void Proposed_Slots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proposed_Slots::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Proposed_Slots& Proposed_Slots::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proposed_Slots* Proposed_Slots::New(::google::protobuf::Arena* arena) const {
  Proposed_Slots* n = new Proposed_Slots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proposed_Slots::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Proposed_Slots)
  slots_.Clear();
  mac_ = GOOGLE_ULONGLONG(0);
}

bool Proposed_Slots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Proposed_Slots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .communicator.MFTDMA_Slot slots = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Proposed_Slots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Proposed_Slots)
  return false;
#undef DO_
}

void Proposed_Slots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Proposed_Slots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // repeated .communicator.MFTDMA_Slot slots = 2;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Proposed_Slots)
}

::google::protobuf::uint8* Proposed_Slots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Proposed_Slots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // repeated .communicator.MFTDMA_Slot slots = 2;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->slots(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Proposed_Slots)
  return target;
}

size_t Proposed_Slots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Proposed_Slots)
  size_t total_size = 0;

  // repeated .communicator.MFTDMA_Slot slots = 2;
  {
    unsigned int count = this->slots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slots(i));
    }
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proposed_Slots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Proposed_Slots)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposed_Slots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proposed_Slots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Proposed_Slots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Proposed_Slots)
    MergeFrom(*source);
  }
}

void Proposed_Slots::MergeFrom(const Proposed_Slots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Proposed_Slots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
}

void Proposed_Slots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Proposed_Slots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposed_Slots::CopyFrom(const Proposed_Slots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Proposed_Slots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposed_Slots::IsInitialized() const {
  return true;
}

void Proposed_Slots::Swap(Proposed_Slots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposed_Slots::InternalSwap(Proposed_Slots* other) {
  slots_.InternalSwap(&other->slots_);
  std::swap(mac_, other->mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proposed_Slots::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proposed_Slots

// uint64 mac = 1;
void Proposed_Slots::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Proposed_Slots::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Slots.mac)
  return mac_;
}
void Proposed_Slots::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Proposed_Slots.mac)
}

// repeated .communicator.MFTDMA_Slot slots = 2;
int Proposed_Slots::slots_size() const {
  return slots_.size();
}
void Proposed_Slots::clear_slots() {
  slots_.Clear();
}
const ::communicator::MFTDMA_Slot& Proposed_Slots::slots(int index) const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Slots.slots)
  return slots_.Get(index);
}
::communicator::MFTDMA_Slot* Proposed_Slots::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:communicator.Proposed_Slots.slots)
  return slots_.Mutable(index);
}
::communicator::MFTDMA_Slot* Proposed_Slots::add_slots() {
  // @@protoc_insertion_point(field_add:communicator.Proposed_Slots.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >*
Proposed_Slots::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:communicator.Proposed_Slots.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >&
Proposed_Slots::slots() const {
  // @@protoc_insertion_point(field_list:communicator.Proposed_Slots.slots)
  return slots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proposed_Move_Slots::kMacFieldNumber;
const int Proposed_Move_Slots::kOldSlotFieldNumber;
const int Proposed_Move_Slots::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proposed_Move_Slots::Proposed_Move_Slots()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Proposed_Move_Slots)
}
Proposed_Move_Slots::Proposed_Move_Slots(const Proposed_Move_Slots& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_(from.slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_slot()) {
    old_slot_ = new ::communicator::MFTDMA_Slot(*from.old_slot_);
  } else {
    old_slot_ = NULL;
  }
  mac_ = from.mac_;
  // @@protoc_insertion_point(copy_constructor:communicator.Proposed_Move_Slots)
}

void Proposed_Move_Slots::SharedCtor() {
  ::memset(&old_slot_, 0, reinterpret_cast<char*>(&mac_) -
    reinterpret_cast<char*>(&old_slot_) + sizeof(mac_));
  _cached_size_ = 0;
}

Proposed_Move_Slots::~Proposed_Move_Slots() {
  // @@protoc_insertion_point(destructor:communicator.Proposed_Move_Slots)
  SharedDtor();
}

void Proposed_Move_Slots::SharedDtor() {
  if (this != internal_default_instance()) {
    delete old_slot_;
  }
}

void Proposed_Move_Slots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proposed_Move_Slots::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Proposed_Move_Slots& Proposed_Move_Slots::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proposed_Move_Slots* Proposed_Move_Slots::New(::google::protobuf::Arena* arena) const {
  Proposed_Move_Slots* n = new Proposed_Move_Slots;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Proposed_Move_Slots::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Proposed_Move_Slots)
  slots_.Clear();
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) {
    delete old_slot_;
  }
  old_slot_ = NULL;
  mac_ = GOOGLE_ULONGLONG(0);
}

bool Proposed_Move_Slots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Proposed_Move_Slots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot old_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .communicator.MFTDMA_Slot slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Proposed_Move_Slots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Proposed_Move_Slots)
  return false;
#undef DO_
}

void Proposed_Move_Slots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Proposed_Move_Slots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->old_slot_, output);
  }

  // repeated .communicator.MFTDMA_Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Proposed_Move_Slots)
}

::google::protobuf::uint8* Proposed_Move_Slots::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Proposed_Move_Slots)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->old_slot_, deterministic, target);
  }

  // repeated .communicator.MFTDMA_Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->slots(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Proposed_Move_Slots)
  return target;
}

size_t Proposed_Move_Slots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Proposed_Move_Slots)
  size_t total_size = 0;

  // repeated .communicator.MFTDMA_Slot slots = 3;
  {
    unsigned int count = this->slots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slots(i));
    }
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proposed_Move_Slots::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Proposed_Move_Slots)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposed_Move_Slots* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proposed_Move_Slots>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Proposed_Move_Slots)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Proposed_Move_Slots)
    MergeFrom(*source);
  }
}

void Proposed_Move_Slots::MergeFrom(const Proposed_Move_Slots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Proposed_Move_Slots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from.has_old_slot()) {
    mutable_old_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.old_slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
}

void Proposed_Move_Slots::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Proposed_Move_Slots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposed_Move_Slots::CopyFrom(const Proposed_Move_Slots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Proposed_Move_Slots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposed_Move_Slots::IsInitialized() const {
  return true;
}

void Proposed_Move_Slots::Swap(Proposed_Move_Slots* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Proposed_Move_Slots::InternalSwap(Proposed_Move_Slots* other) {
  slots_.InternalSwap(&other->slots_);
  std::swap(old_slot_, other->old_slot_);
  std::swap(mac_, other->mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proposed_Move_Slots::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proposed_Move_Slots

// uint64 mac = 1;
void Proposed_Move_Slots::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Proposed_Move_Slots::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Move_Slots.mac)
  return mac_;
}
void Proposed_Move_Slots::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Proposed_Move_Slots.mac)
}

// .communicator.MFTDMA_Slot old_slot = 2;
bool Proposed_Move_Slots::has_old_slot() const {
  return this != internal_default_instance() && old_slot_ != NULL;
}
void Proposed_Move_Slots::clear_old_slot() {
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) delete old_slot_;
  old_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Proposed_Move_Slots::old_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Move_Slots.old_slot)
  return old_slot_ != NULL ? *old_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Proposed_Move_Slots::mutable_old_slot() {
  
  if (old_slot_ == NULL) {
    old_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Proposed_Move_Slots.old_slot)
  return old_slot_;
}
::communicator::MFTDMA_Slot* Proposed_Move_Slots::release_old_slot() {
  // @@protoc_insertion_point(field_release:communicator.Proposed_Move_Slots.old_slot)
  
  ::communicator::MFTDMA_Slot* temp = old_slot_;
  old_slot_ = NULL;
  return temp;
}
void Proposed_Move_Slots::set_allocated_old_slot(::communicator::MFTDMA_Slot* old_slot) {
  delete old_slot_;
  old_slot_ = old_slot;
  if (old_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Proposed_Move_Slots.old_slot)
}

// repeated .communicator.MFTDMA_Slot slots = 3;
int Proposed_Move_Slots::slots_size() const {
  return slots_.size();
}
void Proposed_Move_Slots::clear_slots() {
  slots_.Clear();
}
const ::communicator::MFTDMA_Slot& Proposed_Move_Slots::slots(int index) const {
  // @@protoc_insertion_point(field_get:communicator.Proposed_Move_Slots.slots)
  return slots_.Get(index);
}
::communicator::MFTDMA_Slot* Proposed_Move_Slots::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:communicator.Proposed_Move_Slots.slots)
  return slots_.Mutable(index);
}
::communicator::MFTDMA_Slot* Proposed_Move_Slots::add_slots() {
  // @@protoc_insertion_point(field_add:communicator.Proposed_Move_Slots.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >*
Proposed_Move_Slots::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:communicator.Proposed_Move_Slots.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >&
Proposed_Move_Slots::slots() const {
  // @@protoc_insertion_point(field_list:communicator.Proposed_Move_Slots.slots)
  return slots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selected_Slot::kMacFieldNumber;
const int Selected_Slot::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selected_Slot::Selected_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Selected_Slot)
}
Selected_Slot::Selected_Slot(const Selected_Slot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    slot_ = new ::communicator::MFTDMA_Slot(*from.slot_);
  } else {
    slot_ = NULL;
  }
  mac_ = from.mac_;
  // @@protoc_insertion_point(copy_constructor:communicator.Selected_Slot)
}

void Selected_Slot::SharedCtor() {
  ::memset(&slot_, 0, reinterpret_cast<char*>(&mac_) -
    reinterpret_cast<char*>(&slot_) + sizeof(mac_));
  _cached_size_ = 0;
}

Selected_Slot::~Selected_Slot() {
  // @@protoc_insertion_point(destructor:communicator.Selected_Slot)
  SharedDtor();
}

void Selected_Slot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slot_;
  }
}

void Selected_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Selected_Slot::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Selected_Slot& Selected_Slot::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Selected_Slot* Selected_Slot::New(::google::protobuf::Arena* arena) const {
  Selected_Slot* n = new Selected_Slot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selected_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Selected_Slot)
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) {
    delete slot_;
  }
  slot_ = NULL;
  mac_ = GOOGLE_ULONGLONG(0);
}

bool Selected_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Selected_Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Selected_Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Selected_Slot)
  return false;
#undef DO_
}

void Selected_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Selected_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Selected_Slot)
}

::google::protobuf::uint8* Selected_Slot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Selected_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Selected_Slot)
  return target;
}

size_t Selected_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Selected_Slot)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selected_Slot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Selected_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const Selected_Slot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Selected_Slot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Selected_Slot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Selected_Slot)
    MergeFrom(*source);
  }
}

void Selected_Slot::MergeFrom(const Selected_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Selected_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    mutable_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
}

void Selected_Slot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Selected_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selected_Slot::CopyFrom(const Selected_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Selected_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selected_Slot::IsInitialized() const {
  return true;
}

void Selected_Slot::Swap(Selected_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selected_Slot::InternalSwap(Selected_Slot* other) {
  std::swap(slot_, other->slot_);
  std::swap(mac_, other->mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Selected_Slot::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Selected_Slot

// uint64 mac = 1;
void Selected_Slot::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Selected_Slot::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Selected_Slot.mac)
  return mac_;
}
void Selected_Slot::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Selected_Slot.mac)
}

// .communicator.MFTDMA_Slot slot = 2;
bool Selected_Slot::has_slot() const {
  return this != internal_default_instance() && slot_ != NULL;
}
void Selected_Slot::clear_slot() {
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) delete slot_;
  slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Selected_Slot::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Selected_Slot.slot)
  return slot_ != NULL ? *slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Selected_Slot::mutable_slot() {
  
  if (slot_ == NULL) {
    slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Selected_Slot.slot)
  return slot_;
}
::communicator::MFTDMA_Slot* Selected_Slot::release_slot() {
  // @@protoc_insertion_point(field_release:communicator.Selected_Slot.slot)
  
  ::communicator::MFTDMA_Slot* temp = slot_;
  slot_ = NULL;
  return temp;
}
void Selected_Slot::set_allocated_slot(::communicator::MFTDMA_Slot* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Selected_Slot.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Selected_Move_Slot::kMacFieldNumber;
const int Selected_Move_Slot::kOldSlotFieldNumber;
const int Selected_Move_Slot::kNewSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Selected_Move_Slot::Selected_Move_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Selected_Move_Slot)
}
Selected_Move_Slot::Selected_Move_Slot(const Selected_Move_Slot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_slot()) {
    old_slot_ = new ::communicator::MFTDMA_Slot(*from.old_slot_);
  } else {
    old_slot_ = NULL;
  }
  if (from.has_new_slot()) {
    new_slot_ = new ::communicator::MFTDMA_Slot(*from.new_slot_);
  } else {
    new_slot_ = NULL;
  }
  mac_ = from.mac_;
  // @@protoc_insertion_point(copy_constructor:communicator.Selected_Move_Slot)
}

void Selected_Move_Slot::SharedCtor() {
  ::memset(&old_slot_, 0, reinterpret_cast<char*>(&mac_) -
    reinterpret_cast<char*>(&old_slot_) + sizeof(mac_));
  _cached_size_ = 0;
}

Selected_Move_Slot::~Selected_Move_Slot() {
  // @@protoc_insertion_point(destructor:communicator.Selected_Move_Slot)
  SharedDtor();
}

void Selected_Move_Slot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete old_slot_;
  }
  if (this != internal_default_instance()) {
    delete new_slot_;
  }
}

void Selected_Move_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Selected_Move_Slot::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Selected_Move_Slot& Selected_Move_Slot::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Selected_Move_Slot* Selected_Move_Slot::New(::google::protobuf::Arena* arena) const {
  Selected_Move_Slot* n = new Selected_Move_Slot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Selected_Move_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Selected_Move_Slot)
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) {
    delete old_slot_;
  }
  old_slot_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) {
    delete new_slot_;
  }
  new_slot_ = NULL;
  mac_ = GOOGLE_ULONGLONG(0);
}

bool Selected_Move_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Selected_Move_Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot old_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot new_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Selected_Move_Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Selected_Move_Slot)
  return false;
#undef DO_
}

void Selected_Move_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Selected_Move_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->old_slot_, output);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->new_slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Selected_Move_Slot)
}

::google::protobuf::uint8* Selected_Move_Slot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Selected_Move_Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->old_slot_, deterministic, target);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->new_slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Selected_Move_Slot)
  return target;
}

size_t Selected_Move_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Selected_Move_Slot)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_slot_);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Selected_Move_Slot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Selected_Move_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const Selected_Move_Slot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Selected_Move_Slot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Selected_Move_Slot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Selected_Move_Slot)
    MergeFrom(*source);
  }
}

void Selected_Move_Slot::MergeFrom(const Selected_Move_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Selected_Move_Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_slot()) {
    mutable_old_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.old_slot());
  }
  if (from.has_new_slot()) {
    mutable_new_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.new_slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
}

void Selected_Move_Slot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Selected_Move_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selected_Move_Slot::CopyFrom(const Selected_Move_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Selected_Move_Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selected_Move_Slot::IsInitialized() const {
  return true;
}

void Selected_Move_Slot::Swap(Selected_Move_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Selected_Move_Slot::InternalSwap(Selected_Move_Slot* other) {
  std::swap(old_slot_, other->old_slot_);
  std::swap(new_slot_, other->new_slot_);
  std::swap(mac_, other->mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Selected_Move_Slot::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Selected_Move_Slot

// uint64 mac = 1;
void Selected_Move_Slot::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Selected_Move_Slot::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Selected_Move_Slot.mac)
  return mac_;
}
void Selected_Move_Slot::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Selected_Move_Slot.mac)
}

// .communicator.MFTDMA_Slot old_slot = 2;
bool Selected_Move_Slot::has_old_slot() const {
  return this != internal_default_instance() && old_slot_ != NULL;
}
void Selected_Move_Slot::clear_old_slot() {
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) delete old_slot_;
  old_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Selected_Move_Slot::old_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Selected_Move_Slot.old_slot)
  return old_slot_ != NULL ? *old_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Selected_Move_Slot::mutable_old_slot() {
  
  if (old_slot_ == NULL) {
    old_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Selected_Move_Slot.old_slot)
  return old_slot_;
}
::communicator::MFTDMA_Slot* Selected_Move_Slot::release_old_slot() {
  // @@protoc_insertion_point(field_release:communicator.Selected_Move_Slot.old_slot)
  
  ::communicator::MFTDMA_Slot* temp = old_slot_;
  old_slot_ = NULL;
  return temp;
}
void Selected_Move_Slot::set_allocated_old_slot(::communicator::MFTDMA_Slot* old_slot) {
  delete old_slot_;
  old_slot_ = old_slot;
  if (old_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Selected_Move_Slot.old_slot)
}

// .communicator.MFTDMA_Slot new_slot = 3;
bool Selected_Move_Slot::has_new_slot() const {
  return this != internal_default_instance() && new_slot_ != NULL;
}
void Selected_Move_Slot::clear_new_slot() {
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) delete new_slot_;
  new_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Selected_Move_Slot::new_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Selected_Move_Slot.new_slot)
  return new_slot_ != NULL ? *new_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Selected_Move_Slot::mutable_new_slot() {
  
  if (new_slot_ == NULL) {
    new_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Selected_Move_Slot.new_slot)
  return new_slot_;
}
::communicator::MFTDMA_Slot* Selected_Move_Slot::release_new_slot() {
  // @@protoc_insertion_point(field_release:communicator.Selected_Move_Slot.new_slot)
  
  ::communicator::MFTDMA_Slot* temp = new_slot_;
  new_slot_ = NULL;
  return temp;
}
void Selected_Move_Slot::set_allocated_new_slot(::communicator::MFTDMA_Slot* new_slot) {
  delete new_slot_;
  new_slot_ = new_slot;
  if (new_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Selected_Move_Slot.new_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int External_Slot_Allocation::kSrcMacFieldNumber;
const int External_Slot_Allocation::kDstMacFieldNumber;
const int External_Slot_Allocation::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

External_Slot_Allocation::External_Slot_Allocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.External_Slot_Allocation)
}
External_Slot_Allocation::External_Slot_Allocation(const External_Slot_Allocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    slot_ = new ::communicator::MFTDMA_Slot(*from.slot_);
  } else {
    slot_ = NULL;
  }
  ::memcpy(&src_mac_, &from.src_mac_,
    reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
  // @@protoc_insertion_point(copy_constructor:communicator.External_Slot_Allocation)
}

void External_Slot_Allocation::SharedCtor() {
  ::memset(&slot_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&slot_) + sizeof(dst_mac_));
  _cached_size_ = 0;
}

External_Slot_Allocation::~External_Slot_Allocation() {
  // @@protoc_insertion_point(destructor:communicator.External_Slot_Allocation)
  SharedDtor();
}

void External_Slot_Allocation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slot_;
  }
}

void External_Slot_Allocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* External_Slot_Allocation::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const External_Slot_Allocation& External_Slot_Allocation::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

External_Slot_Allocation* External_Slot_Allocation::New(::google::protobuf::Arena* arena) const {
  External_Slot_Allocation* n = new External_Slot_Allocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void External_Slot_Allocation::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.External_Slot_Allocation)
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) {
    delete slot_;
  }
  slot_ = NULL;
  ::memset(&src_mac_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
}

bool External_Slot_Allocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.External_Slot_Allocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 src_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dst_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.External_Slot_Allocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.External_Slot_Allocation)
  return false;
#undef DO_
}

void External_Slot_Allocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.External_Slot_Allocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_mac(), output);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_mac(), output);
  }

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.External_Slot_Allocation)
}

::google::protobuf::uint8* External_Slot_Allocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.External_Slot_Allocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_mac(), target);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_mac(), target);
  }

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.External_Slot_Allocation)
  return target;
}

size_t External_Slot_Allocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.External_Slot_Allocation)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slot_);
  }

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src_mac());
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst_mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void External_Slot_Allocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.External_Slot_Allocation)
  GOOGLE_DCHECK_NE(&from, this);
  const External_Slot_Allocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const External_Slot_Allocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.External_Slot_Allocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.External_Slot_Allocation)
    MergeFrom(*source);
  }
}

void External_Slot_Allocation::MergeFrom(const External_Slot_Allocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.External_Slot_Allocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    mutable_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.slot());
  }
  if (from.src_mac() != 0) {
    set_src_mac(from.src_mac());
  }
  if (from.dst_mac() != 0) {
    set_dst_mac(from.dst_mac());
  }
}

void External_Slot_Allocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.External_Slot_Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void External_Slot_Allocation::CopyFrom(const External_Slot_Allocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.External_Slot_Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool External_Slot_Allocation::IsInitialized() const {
  return true;
}

void External_Slot_Allocation::Swap(External_Slot_Allocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void External_Slot_Allocation::InternalSwap(External_Slot_Allocation* other) {
  std::swap(slot_, other->slot_);
  std::swap(src_mac_, other->src_mac_);
  std::swap(dst_mac_, other->dst_mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata External_Slot_Allocation::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// External_Slot_Allocation

// uint64 src_mac = 1;
void External_Slot_Allocation::clear_src_mac() {
  src_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Allocation::src_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Allocation.src_mac)
  return src_mac_;
}
void External_Slot_Allocation::set_src_mac(::google::protobuf::uint64 value) {
  
  src_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Allocation.src_mac)
}

// uint64 dst_mac = 2;
void External_Slot_Allocation::clear_dst_mac() {
  dst_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Allocation::dst_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Allocation.dst_mac)
  return dst_mac_;
}
void External_Slot_Allocation::set_dst_mac(::google::protobuf::uint64 value) {
  
  dst_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Allocation.dst_mac)
}

// .communicator.MFTDMA_Slot slot = 3;
bool External_Slot_Allocation::has_slot() const {
  return this != internal_default_instance() && slot_ != NULL;
}
void External_Slot_Allocation::clear_slot() {
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) delete slot_;
  slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& External_Slot_Allocation::slot() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Allocation.slot)
  return slot_ != NULL ? *slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* External_Slot_Allocation::mutable_slot() {
  
  if (slot_ == NULL) {
    slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.External_Slot_Allocation.slot)
  return slot_;
}
::communicator::MFTDMA_Slot* External_Slot_Allocation::release_slot() {
  // @@protoc_insertion_point(field_release:communicator.External_Slot_Allocation.slot)
  
  ::communicator::MFTDMA_Slot* temp = slot_;
  slot_ = NULL;
  return temp;
}
void External_Slot_Allocation::set_allocated_slot(::communicator::MFTDMA_Slot* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.External_Slot_Allocation.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int External_Slot_Removal::kSrcMacFieldNumber;
const int External_Slot_Removal::kDstMacFieldNumber;
const int External_Slot_Removal::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

External_Slot_Removal::External_Slot_Removal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.External_Slot_Removal)
}
External_Slot_Removal::External_Slot_Removal(const External_Slot_Removal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    slot_ = new ::communicator::MFTDMA_Slot(*from.slot_);
  } else {
    slot_ = NULL;
  }
  ::memcpy(&src_mac_, &from.src_mac_,
    reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
  // @@protoc_insertion_point(copy_constructor:communicator.External_Slot_Removal)
}

void External_Slot_Removal::SharedCtor() {
  ::memset(&slot_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&slot_) + sizeof(dst_mac_));
  _cached_size_ = 0;
}

External_Slot_Removal::~External_Slot_Removal() {
  // @@protoc_insertion_point(destructor:communicator.External_Slot_Removal)
  SharedDtor();
}

void External_Slot_Removal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slot_;
  }
}

void External_Slot_Removal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* External_Slot_Removal::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const External_Slot_Removal& External_Slot_Removal::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

External_Slot_Removal* External_Slot_Removal::New(::google::protobuf::Arena* arena) const {
  External_Slot_Removal* n = new External_Slot_Removal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void External_Slot_Removal::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.External_Slot_Removal)
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) {
    delete slot_;
  }
  slot_ = NULL;
  ::memset(&src_mac_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
}

bool External_Slot_Removal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.External_Slot_Removal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 src_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dst_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.External_Slot_Removal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.External_Slot_Removal)
  return false;
#undef DO_
}

void External_Slot_Removal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.External_Slot_Removal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_mac(), output);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_mac(), output);
  }

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.External_Slot_Removal)
}

::google::protobuf::uint8* External_Slot_Removal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.External_Slot_Removal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_mac(), target);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_mac(), target);
  }

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.External_Slot_Removal)
  return target;
}

size_t External_Slot_Removal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.External_Slot_Removal)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot slot = 3;
  if (this->has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slot_);
  }

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src_mac());
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst_mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void External_Slot_Removal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.External_Slot_Removal)
  GOOGLE_DCHECK_NE(&from, this);
  const External_Slot_Removal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const External_Slot_Removal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.External_Slot_Removal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.External_Slot_Removal)
    MergeFrom(*source);
  }
}

void External_Slot_Removal::MergeFrom(const External_Slot_Removal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.External_Slot_Removal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    mutable_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.slot());
  }
  if (from.src_mac() != 0) {
    set_src_mac(from.src_mac());
  }
  if (from.dst_mac() != 0) {
    set_dst_mac(from.dst_mac());
  }
}

void External_Slot_Removal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.External_Slot_Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void External_Slot_Removal::CopyFrom(const External_Slot_Removal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.External_Slot_Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool External_Slot_Removal::IsInitialized() const {
  return true;
}

void External_Slot_Removal::Swap(External_Slot_Removal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void External_Slot_Removal::InternalSwap(External_Slot_Removal* other) {
  std::swap(slot_, other->slot_);
  std::swap(src_mac_, other->src_mac_);
  std::swap(dst_mac_, other->dst_mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata External_Slot_Removal::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// External_Slot_Removal

// uint64 src_mac = 1;
void External_Slot_Removal::clear_src_mac() {
  src_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Removal::src_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Removal.src_mac)
  return src_mac_;
}
void External_Slot_Removal::set_src_mac(::google::protobuf::uint64 value) {
  
  src_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Removal.src_mac)
}

// uint64 dst_mac = 2;
void External_Slot_Removal::clear_dst_mac() {
  dst_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Removal::dst_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Removal.dst_mac)
  return dst_mac_;
}
void External_Slot_Removal::set_dst_mac(::google::protobuf::uint64 value) {
  
  dst_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Removal.dst_mac)
}

// .communicator.MFTDMA_Slot slot = 3;
bool External_Slot_Removal::has_slot() const {
  return this != internal_default_instance() && slot_ != NULL;
}
void External_Slot_Removal::clear_slot() {
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) delete slot_;
  slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& External_Slot_Removal::slot() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Removal.slot)
  return slot_ != NULL ? *slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* External_Slot_Removal::mutable_slot() {
  
  if (slot_ == NULL) {
    slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.External_Slot_Removal.slot)
  return slot_;
}
::communicator::MFTDMA_Slot* External_Slot_Removal::release_slot() {
  // @@protoc_insertion_point(field_release:communicator.External_Slot_Removal.slot)
  
  ::communicator::MFTDMA_Slot* temp = slot_;
  slot_ = NULL;
  return temp;
}
void External_Slot_Removal::set_allocated_slot(::communicator::MFTDMA_Slot* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.External_Slot_Removal.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BC_Slots_Announcement::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BC_Slots_Announcement::BC_Slots_Announcement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.BC_Slots_Announcement)
}
BC_Slots_Announcement::BC_Slots_Announcement(const BC_Slots_Announcement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_(from.slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:communicator.BC_Slots_Announcement)
}

void BC_Slots_Announcement::SharedCtor() {
  _cached_size_ = 0;
}

BC_Slots_Announcement::~BC_Slots_Announcement() {
  // @@protoc_insertion_point(destructor:communicator.BC_Slots_Announcement)
  SharedDtor();
}

void BC_Slots_Announcement::SharedDtor() {
}

void BC_Slots_Announcement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BC_Slots_Announcement::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BC_Slots_Announcement& BC_Slots_Announcement::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

BC_Slots_Announcement* BC_Slots_Announcement::New(::google::protobuf::Arena* arena) const {
  BC_Slots_Announcement* n = new BC_Slots_Announcement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BC_Slots_Announcement::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.BC_Slots_Announcement)
  slots_.Clear();
}

bool BC_Slots_Announcement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.BC_Slots_Announcement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .communicator.MFTDMA_Slot slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.BC_Slots_Announcement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.BC_Slots_Announcement)
  return false;
#undef DO_
}

void BC_Slots_Announcement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.BC_Slots_Announcement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.MFTDMA_Slot slots = 1;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.BC_Slots_Announcement)
}

::google::protobuf::uint8* BC_Slots_Announcement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.BC_Slots_Announcement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .communicator.MFTDMA_Slot slots = 1;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->slots(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.BC_Slots_Announcement)
  return target;
}

size_t BC_Slots_Announcement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.BC_Slots_Announcement)
  size_t total_size = 0;

  // repeated .communicator.MFTDMA_Slot slots = 1;
  {
    unsigned int count = this->slots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slots(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BC_Slots_Announcement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.BC_Slots_Announcement)
  GOOGLE_DCHECK_NE(&from, this);
  const BC_Slots_Announcement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BC_Slots_Announcement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.BC_Slots_Announcement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.BC_Slots_Announcement)
    MergeFrom(*source);
  }
}

void BC_Slots_Announcement::MergeFrom(const BC_Slots_Announcement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.BC_Slots_Announcement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
}

void BC_Slots_Announcement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.BC_Slots_Announcement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BC_Slots_Announcement::CopyFrom(const BC_Slots_Announcement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.BC_Slots_Announcement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BC_Slots_Announcement::IsInitialized() const {
  return true;
}

void BC_Slots_Announcement::Swap(BC_Slots_Announcement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BC_Slots_Announcement::InternalSwap(BC_Slots_Announcement* other) {
  slots_.InternalSwap(&other->slots_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BC_Slots_Announcement::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BC_Slots_Announcement

// repeated .communicator.MFTDMA_Slot slots = 1;
int BC_Slots_Announcement::slots_size() const {
  return slots_.size();
}
void BC_Slots_Announcement::clear_slots() {
  slots_.Clear();
}
const ::communicator::MFTDMA_Slot& BC_Slots_Announcement::slots(int index) const {
  // @@protoc_insertion_point(field_get:communicator.BC_Slots_Announcement.slots)
  return slots_.Get(index);
}
::communicator::MFTDMA_Slot* BC_Slots_Announcement::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:communicator.BC_Slots_Announcement.slots)
  return slots_.Mutable(index);
}
::communicator::MFTDMA_Slot* BC_Slots_Announcement::add_slots() {
  // @@protoc_insertion_point(field_add:communicator.BC_Slots_Announcement.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >*
BC_Slots_Announcement::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:communicator.BC_Slots_Announcement.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::communicator::MFTDMA_Slot >&
BC_Slots_Announcement::slots() const {
  // @@protoc_insertion_point(field_list:communicator.BC_Slots_Announcement.slots)
  return slots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slot_Allocation::kMacFieldNumber;
const int Slot_Allocation::kSlotFieldNumber;
const int Slot_Allocation::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slot_Allocation::Slot_Allocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Slot_Allocation)
}
Slot_Allocation::Slot_Allocation(const Slot_Allocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    slot_ = new ::communicator::MFTDMA_Slot(*from.slot_);
  } else {
    slot_ = NULL;
  }
  ::memcpy(&mac_, &from.mac_,
    reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&mac_) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:communicator.Slot_Allocation)
}

void Slot_Allocation::SharedCtor() {
  ::memset(&slot_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&slot_) + sizeof(mode_));
  _cached_size_ = 0;
}

Slot_Allocation::~Slot_Allocation() {
  // @@protoc_insertion_point(destructor:communicator.Slot_Allocation)
  SharedDtor();
}

void Slot_Allocation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slot_;
  }
}

void Slot_Allocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slot_Allocation::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Slot_Allocation& Slot_Allocation::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Slot_Allocation* Slot_Allocation::New(::google::protobuf::Arena* arena) const {
  Slot_Allocation* n = new Slot_Allocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slot_Allocation::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Slot_Allocation)
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) {
    delete slot_;
  }
  slot_ = NULL;
  ::memset(&mac_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&mac_) + sizeof(mode_));
}

bool Slot_Allocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Slot_Allocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.SLOT_MODE mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::communicator::SLOT_MODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Slot_Allocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Slot_Allocation)
  return false;
#undef DO_
}

void Slot_Allocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Slot_Allocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slot_, output);
  }

  // .communicator.SLOT_MODE mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Slot_Allocation)
}

::google::protobuf::uint8* Slot_Allocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Slot_Allocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slot_, deterministic, target);
  }

  // .communicator.SLOT_MODE mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Slot_Allocation)
  return target;
}

size_t Slot_Allocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Slot_Allocation)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  // .communicator.SLOT_MODE mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slot_Allocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Slot_Allocation)
  GOOGLE_DCHECK_NE(&from, this);
  const Slot_Allocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Slot_Allocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Slot_Allocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Slot_Allocation)
    MergeFrom(*source);
  }
}

void Slot_Allocation::MergeFrom(const Slot_Allocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Slot_Allocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    mutable_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void Slot_Allocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Slot_Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot_Allocation::CopyFrom(const Slot_Allocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Slot_Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot_Allocation::IsInitialized() const {
  return true;
}

void Slot_Allocation::Swap(Slot_Allocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slot_Allocation::InternalSwap(Slot_Allocation* other) {
  std::swap(slot_, other->slot_);
  std::swap(mac_, other->mac_);
  std::swap(mode_, other->mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slot_Allocation::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slot_Allocation

// uint64 mac = 1;
void Slot_Allocation::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Slot_Allocation::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Allocation.mac)
  return mac_;
}
void Slot_Allocation::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Slot_Allocation.mac)
}

// .communicator.MFTDMA_Slot slot = 2;
bool Slot_Allocation::has_slot() const {
  return this != internal_default_instance() && slot_ != NULL;
}
void Slot_Allocation::clear_slot() {
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) delete slot_;
  slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Slot_Allocation::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Allocation.slot)
  return slot_ != NULL ? *slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Slot_Allocation::mutable_slot() {
  
  if (slot_ == NULL) {
    slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Slot_Allocation.slot)
  return slot_;
}
::communicator::MFTDMA_Slot* Slot_Allocation::release_slot() {
  // @@protoc_insertion_point(field_release:communicator.Slot_Allocation.slot)
  
  ::communicator::MFTDMA_Slot* temp = slot_;
  slot_ = NULL;
  return temp;
}
void Slot_Allocation::set_allocated_slot(::communicator::MFTDMA_Slot* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Slot_Allocation.slot)
}

// .communicator.SLOT_MODE mode = 3;
void Slot_Allocation::clear_mode() {
  mode_ = 0;
}
::communicator::SLOT_MODE Slot_Allocation::mode() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Allocation.mode)
  return static_cast< ::communicator::SLOT_MODE >(mode_);
}
void Slot_Allocation::set_mode(::communicator::SLOT_MODE value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:communicator.Slot_Allocation.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slot_Removal::kMacFieldNumber;
const int Slot_Removal::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slot_Removal::Slot_Removal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Slot_Removal)
}
Slot_Removal::Slot_Removal(const Slot_Removal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_slot()) {
    slot_ = new ::communicator::MFTDMA_Slot(*from.slot_);
  } else {
    slot_ = NULL;
  }
  mac_ = from.mac_;
  // @@protoc_insertion_point(copy_constructor:communicator.Slot_Removal)
}

void Slot_Removal::SharedCtor() {
  ::memset(&slot_, 0, reinterpret_cast<char*>(&mac_) -
    reinterpret_cast<char*>(&slot_) + sizeof(mac_));
  _cached_size_ = 0;
}

Slot_Removal::~Slot_Removal() {
  // @@protoc_insertion_point(destructor:communicator.Slot_Removal)
  SharedDtor();
}

void Slot_Removal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete slot_;
  }
}

void Slot_Removal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slot_Removal::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Slot_Removal& Slot_Removal::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Slot_Removal* Slot_Removal::New(::google::protobuf::Arena* arena) const {
  Slot_Removal* n = new Slot_Removal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slot_Removal::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Slot_Removal)
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) {
    delete slot_;
  }
  slot_ = NULL;
  mac_ = GOOGLE_ULONGLONG(0);
}

bool Slot_Removal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Slot_Removal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Slot_Removal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Slot_Removal)
  return false;
#undef DO_
}

void Slot_Removal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Slot_Removal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Slot_Removal)
}

::google::protobuf::uint8* Slot_Removal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Slot_Removal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Slot_Removal)
  return target;
}

size_t Slot_Removal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Slot_Removal)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot slot = 2;
  if (this->has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slot_Removal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Slot_Removal)
  GOOGLE_DCHECK_NE(&from, this);
  const Slot_Removal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Slot_Removal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Slot_Removal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Slot_Removal)
    MergeFrom(*source);
  }
}

void Slot_Removal::MergeFrom(const Slot_Removal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Slot_Removal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    mutable_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
}

void Slot_Removal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Slot_Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot_Removal::CopyFrom(const Slot_Removal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Slot_Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot_Removal::IsInitialized() const {
  return true;
}

void Slot_Removal::Swap(Slot_Removal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slot_Removal::InternalSwap(Slot_Removal* other) {
  std::swap(slot_, other->slot_);
  std::swap(mac_, other->mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slot_Removal::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slot_Removal

// uint64 mac = 1;
void Slot_Removal::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Slot_Removal::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Removal.mac)
  return mac_;
}
void Slot_Removal::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Slot_Removal.mac)
}

// .communicator.MFTDMA_Slot slot = 2;
bool Slot_Removal::has_slot() const {
  return this != internal_default_instance() && slot_ != NULL;
}
void Slot_Removal::clear_slot() {
  if (GetArenaNoVirtual() == NULL && slot_ != NULL) delete slot_;
  slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Slot_Removal::slot() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Removal.slot)
  return slot_ != NULL ? *slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Slot_Removal::mutable_slot() {
  
  if (slot_ == NULL) {
    slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Slot_Removal.slot)
  return slot_;
}
::communicator::MFTDMA_Slot* Slot_Removal::release_slot() {
  // @@protoc_insertion_point(field_release:communicator.Slot_Removal.slot)
  
  ::communicator::MFTDMA_Slot* temp = slot_;
  slot_ = NULL;
  return temp;
}
void Slot_Removal::set_allocated_slot(::communicator::MFTDMA_Slot* slot) {
  delete slot_;
  slot_ = slot;
  if (slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Slot_Removal.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Slot_Move::kMacFieldNumber;
const int Slot_Move::kOldSlotFieldNumber;
const int Slot_Move::kNewSlotFieldNumber;
const int Slot_Move::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Slot_Move::Slot_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Slot_Move)
}
Slot_Move::Slot_Move(const Slot_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_slot()) {
    old_slot_ = new ::communicator::MFTDMA_Slot(*from.old_slot_);
  } else {
    old_slot_ = NULL;
  }
  if (from.has_new_slot()) {
    new_slot_ = new ::communicator::MFTDMA_Slot(*from.new_slot_);
  } else {
    new_slot_ = NULL;
  }
  ::memcpy(&mac_, &from.mac_,
    reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&mac_) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:communicator.Slot_Move)
}

void Slot_Move::SharedCtor() {
  ::memset(&old_slot_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&old_slot_) + sizeof(mode_));
  _cached_size_ = 0;
}

Slot_Move::~Slot_Move() {
  // @@protoc_insertion_point(destructor:communicator.Slot_Move)
  SharedDtor();
}

void Slot_Move::SharedDtor() {
  if (this != internal_default_instance()) {
    delete old_slot_;
  }
  if (this != internal_default_instance()) {
    delete new_slot_;
  }
}

void Slot_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slot_Move::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Slot_Move& Slot_Move::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Slot_Move* Slot_Move::New(::google::protobuf::Arena* arena) const {
  Slot_Move* n = new Slot_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Slot_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Slot_Move)
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) {
    delete old_slot_;
  }
  old_slot_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) {
    delete new_slot_;
  }
  new_slot_ = NULL;
  ::memset(&mac_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&mac_) + sizeof(mode_));
}

bool Slot_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Slot_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot old_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot new_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.SLOT_MODE mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::communicator::SLOT_MODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Slot_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Slot_Move)
  return false;
#undef DO_
}

void Slot_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Slot_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->old_slot_, output);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->new_slot_, output);
  }

  // .communicator.SLOT_MODE mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Slot_Move)
}

::google::protobuf::uint8* Slot_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Slot_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac = 1;
  if (this->mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->old_slot_, deterministic, target);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->new_slot_, deterministic, target);
  }

  // .communicator.SLOT_MODE mode = 4;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Slot_Move)
  return target;
}

size_t Slot_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Slot_Move)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot old_slot = 2;
  if (this->has_old_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_slot_);
  }

  // .communicator.MFTDMA_Slot new_slot = 3;
  if (this->has_new_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_slot_);
  }

  // uint64 mac = 1;
  if (this->mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac());
  }

  // .communicator.SLOT_MODE mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slot_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Slot_Move)
  GOOGLE_DCHECK_NE(&from, this);
  const Slot_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Slot_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Slot_Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Slot_Move)
    MergeFrom(*source);
  }
}

void Slot_Move::MergeFrom(const Slot_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Slot_Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_slot()) {
    mutable_old_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.old_slot());
  }
  if (from.has_new_slot()) {
    mutable_new_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.new_slot());
  }
  if (from.mac() != 0) {
    set_mac(from.mac());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void Slot_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Slot_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot_Move::CopyFrom(const Slot_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Slot_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot_Move::IsInitialized() const {
  return true;
}

void Slot_Move::Swap(Slot_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Slot_Move::InternalSwap(Slot_Move* other) {
  std::swap(old_slot_, other->old_slot_);
  std::swap(new_slot_, other->new_slot_);
  std::swap(mac_, other->mac_);
  std::swap(mode_, other->mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Slot_Move::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Slot_Move

// uint64 mac = 1;
void Slot_Move::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Slot_Move::mac() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Move.mac)
  return mac_;
}
void Slot_Move::set_mac(::google::protobuf::uint64 value) {
  
  mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.Slot_Move.mac)
}

// .communicator.MFTDMA_Slot old_slot = 2;
bool Slot_Move::has_old_slot() const {
  return this != internal_default_instance() && old_slot_ != NULL;
}
void Slot_Move::clear_old_slot() {
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) delete old_slot_;
  old_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Slot_Move::old_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Move.old_slot)
  return old_slot_ != NULL ? *old_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Slot_Move::mutable_old_slot() {
  
  if (old_slot_ == NULL) {
    old_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Slot_Move.old_slot)
  return old_slot_;
}
::communicator::MFTDMA_Slot* Slot_Move::release_old_slot() {
  // @@protoc_insertion_point(field_release:communicator.Slot_Move.old_slot)
  
  ::communicator::MFTDMA_Slot* temp = old_slot_;
  old_slot_ = NULL;
  return temp;
}
void Slot_Move::set_allocated_old_slot(::communicator::MFTDMA_Slot* old_slot) {
  delete old_slot_;
  old_slot_ = old_slot;
  if (old_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Slot_Move.old_slot)
}

// .communicator.MFTDMA_Slot new_slot = 3;
bool Slot_Move::has_new_slot() const {
  return this != internal_default_instance() && new_slot_ != NULL;
}
void Slot_Move::clear_new_slot() {
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) delete new_slot_;
  new_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& Slot_Move::new_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Move.new_slot)
  return new_slot_ != NULL ? *new_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* Slot_Move::mutable_new_slot() {
  
  if (new_slot_ == NULL) {
    new_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Slot_Move.new_slot)
  return new_slot_;
}
::communicator::MFTDMA_Slot* Slot_Move::release_new_slot() {
  // @@protoc_insertion_point(field_release:communicator.Slot_Move.new_slot)
  
  ::communicator::MFTDMA_Slot* temp = new_slot_;
  new_slot_ = NULL;
  return temp;
}
void Slot_Move::set_allocated_new_slot(::communicator::MFTDMA_Slot* new_slot) {
  delete new_slot_;
  new_slot_ = new_slot;
  if (new_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Slot_Move.new_slot)
}

// .communicator.SLOT_MODE mode = 4;
void Slot_Move::clear_mode() {
  mode_ = 0;
}
::communicator::SLOT_MODE Slot_Move::mode() const {
  // @@protoc_insertion_point(field_get:communicator.Slot_Move.mode)
  return static_cast< ::communicator::SLOT_MODE >(mode_);
}
void Slot_Move::set_mode(::communicator::SLOT_MODE value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:communicator.Slot_Move.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int External_Slot_Move::kSrcMacFieldNumber;
const int External_Slot_Move::kDstMacFieldNumber;
const int External_Slot_Move::kOldSlotFieldNumber;
const int External_Slot_Move::kNewSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

External_Slot_Move::External_Slot_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.External_Slot_Move)
}
External_Slot_Move::External_Slot_Move(const External_Slot_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_slot()) {
    old_slot_ = new ::communicator::MFTDMA_Slot(*from.old_slot_);
  } else {
    old_slot_ = NULL;
  }
  if (from.has_new_slot()) {
    new_slot_ = new ::communicator::MFTDMA_Slot(*from.new_slot_);
  } else {
    new_slot_ = NULL;
  }
  ::memcpy(&src_mac_, &from.src_mac_,
    reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
  // @@protoc_insertion_point(copy_constructor:communicator.External_Slot_Move)
}

void External_Slot_Move::SharedCtor() {
  ::memset(&old_slot_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&old_slot_) + sizeof(dst_mac_));
  _cached_size_ = 0;
}

External_Slot_Move::~External_Slot_Move() {
  // @@protoc_insertion_point(destructor:communicator.External_Slot_Move)
  SharedDtor();
}

void External_Slot_Move::SharedDtor() {
  if (this != internal_default_instance()) {
    delete old_slot_;
  }
  if (this != internal_default_instance()) {
    delete new_slot_;
  }
}

void External_Slot_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* External_Slot_Move::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const External_Slot_Move& External_Slot_Move::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

External_Slot_Move* External_Slot_Move::New(::google::protobuf::Arena* arena) const {
  External_Slot_Move* n = new External_Slot_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void External_Slot_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.External_Slot_Move)
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) {
    delete old_slot_;
  }
  old_slot_ = NULL;
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) {
    delete new_slot_;
  }
  new_slot_ = NULL;
  ::memset(&src_mac_, 0, reinterpret_cast<char*>(&dst_mac_) -
    reinterpret_cast<char*>(&src_mac_) + sizeof(dst_mac_));
}

bool External_Slot_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.External_Slot_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 src_mac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dst_mac = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_mac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot old_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MFTDMA_Slot new_slot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.External_Slot_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.External_Slot_Move)
  return false;
#undef DO_
}

void External_Slot_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.External_Slot_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_mac(), output);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_mac(), output);
  }

  // .communicator.MFTDMA_Slot old_slot = 3;
  if (this->has_old_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->old_slot_, output);
  }

  // .communicator.MFTDMA_Slot new_slot = 4;
  if (this->has_new_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->new_slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.External_Slot_Move)
}

::google::protobuf::uint8* External_Slot_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.External_Slot_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_mac(), target);
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_mac(), target);
  }

  // .communicator.MFTDMA_Slot old_slot = 3;
  if (this->has_old_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->old_slot_, deterministic, target);
  }

  // .communicator.MFTDMA_Slot new_slot = 4;
  if (this->has_new_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->new_slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.External_Slot_Move)
  return target;
}

size_t External_Slot_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.External_Slot_Move)
  size_t total_size = 0;

  // .communicator.MFTDMA_Slot old_slot = 3;
  if (this->has_old_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->old_slot_);
  }

  // .communicator.MFTDMA_Slot new_slot = 4;
  if (this->has_new_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->new_slot_);
  }

  // uint64 src_mac = 1;
  if (this->src_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->src_mac());
  }

  // uint64 dst_mac = 2;
  if (this->dst_mac() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst_mac());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void External_Slot_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.External_Slot_Move)
  GOOGLE_DCHECK_NE(&from, this);
  const External_Slot_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const External_Slot_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.External_Slot_Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.External_Slot_Move)
    MergeFrom(*source);
  }
}

void External_Slot_Move::MergeFrom(const External_Slot_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.External_Slot_Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_old_slot()) {
    mutable_old_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.old_slot());
  }
  if (from.has_new_slot()) {
    mutable_new_slot()->::communicator::MFTDMA_Slot::MergeFrom(from.new_slot());
  }
  if (from.src_mac() != 0) {
    set_src_mac(from.src_mac());
  }
  if (from.dst_mac() != 0) {
    set_dst_mac(from.dst_mac());
  }
}

void External_Slot_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.External_Slot_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void External_Slot_Move::CopyFrom(const External_Slot_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.External_Slot_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool External_Slot_Move::IsInitialized() const {
  return true;
}

void External_Slot_Move::Swap(External_Slot_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void External_Slot_Move::InternalSwap(External_Slot_Move* other) {
  std::swap(old_slot_, other->old_slot_);
  std::swap(new_slot_, other->new_slot_);
  std::swap(src_mac_, other->src_mac_);
  std::swap(dst_mac_, other->dst_mac_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata External_Slot_Move::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// External_Slot_Move

// uint64 src_mac = 1;
void External_Slot_Move::clear_src_mac() {
  src_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Move::src_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Move.src_mac)
  return src_mac_;
}
void External_Slot_Move::set_src_mac(::google::protobuf::uint64 value) {
  
  src_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Move.src_mac)
}

// uint64 dst_mac = 2;
void External_Slot_Move::clear_dst_mac() {
  dst_mac_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 External_Slot_Move::dst_mac() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Move.dst_mac)
  return dst_mac_;
}
void External_Slot_Move::set_dst_mac(::google::protobuf::uint64 value) {
  
  dst_mac_ = value;
  // @@protoc_insertion_point(field_set:communicator.External_Slot_Move.dst_mac)
}

// .communicator.MFTDMA_Slot old_slot = 3;
bool External_Slot_Move::has_old_slot() const {
  return this != internal_default_instance() && old_slot_ != NULL;
}
void External_Slot_Move::clear_old_slot() {
  if (GetArenaNoVirtual() == NULL && old_slot_ != NULL) delete old_slot_;
  old_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& External_Slot_Move::old_slot() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Move.old_slot)
  return old_slot_ != NULL ? *old_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* External_Slot_Move::mutable_old_slot() {
  
  if (old_slot_ == NULL) {
    old_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.External_Slot_Move.old_slot)
  return old_slot_;
}
::communicator::MFTDMA_Slot* External_Slot_Move::release_old_slot() {
  // @@protoc_insertion_point(field_release:communicator.External_Slot_Move.old_slot)
  
  ::communicator::MFTDMA_Slot* temp = old_slot_;
  old_slot_ = NULL;
  return temp;
}
void External_Slot_Move::set_allocated_old_slot(::communicator::MFTDMA_Slot* old_slot) {
  delete old_slot_;
  old_slot_ = old_slot;
  if (old_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.External_Slot_Move.old_slot)
}

// .communicator.MFTDMA_Slot new_slot = 4;
bool External_Slot_Move::has_new_slot() const {
  return this != internal_default_instance() && new_slot_ != NULL;
}
void External_Slot_Move::clear_new_slot() {
  if (GetArenaNoVirtual() == NULL && new_slot_ != NULL) delete new_slot_;
  new_slot_ = NULL;
}
const ::communicator::MFTDMA_Slot& External_Slot_Move::new_slot() const {
  // @@protoc_insertion_point(field_get:communicator.External_Slot_Move.new_slot)
  return new_slot_ != NULL ? *new_slot_
                         : *::communicator::MFTDMA_Slot::internal_default_instance();
}
::communicator::MFTDMA_Slot* External_Slot_Move::mutable_new_slot() {
  
  if (new_slot_ == NULL) {
    new_slot_ = new ::communicator::MFTDMA_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.External_Slot_Move.new_slot)
  return new_slot_;
}
::communicator::MFTDMA_Slot* External_Slot_Move::release_new_slot() {
  // @@protoc_insertion_point(field_release:communicator.External_Slot_Move.new_slot)
  
  ::communicator::MFTDMA_Slot* temp = new_slot_;
  new_slot_ = NULL;
  return temp;
}
void External_Slot_Move::set_allocated_new_slot(::communicator::MFTDMA_Slot* new_slot) {
  delete new_slot_;
  new_slot_ = new_slot;
  if (new_slot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.External_Slot_Move.new_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Get::kAttributeFieldNumber;
const int Get::kSlotRequestFieldNumber;
const int Get::kProposedSlotsFieldNumber;
const int Get::kProposedMoveSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Get::Get()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Get)
}
Get::Get(const Get& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attribute_ = from.attribute_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kSlotRequest: {
      mutable_slot_request()->::communicator::Proposed_Slots_Request::MergeFrom(from.slot_request());
      break;
    }
    case kProposedSlots: {
      mutable_proposed_slots()->::communicator::Proposed_Slots::MergeFrom(from.proposed_slots());
      break;
    }
    case kProposedMoveSlots: {
      mutable_proposed_move_slots()->::communicator::Proposed_Move_Slots::MergeFrom(from.proposed_move_slots());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Get)
}

void Get::SharedCtor() {
  attribute_ = 0;
  clear_has_payload();
  _cached_size_ = 0;
}

Get::~Get() {
  // @@protoc_insertion_point(destructor:communicator.Get)
  SharedDtor();
}

void Get::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Get::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Get& Get::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Get* Get::New(::google::protobuf::Arena* arena) const {
  Get* n = new Get;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Get::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Get)
  switch (payload_case()) {
    case kSlotRequest: {
      delete payload_.slot_request_;
      break;
    }
    case kProposedSlots: {
      delete payload_.proposed_slots_;
      break;
    }
    case kProposedMoveSlots: {
      delete payload_.proposed_move_slots_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Get::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Get)
  attribute_ = 0;
  clear_payload();
}

bool Get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Get)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Get.GET_ATTRIBUTE attribute = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_attribute(static_cast< ::communicator::Get_GET_ATTRIBUTE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Proposed_Slots_Request slot_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Proposed_Slots proposed_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposed_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Proposed_Move_Slots proposed_move_slots = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposed_move_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Get)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Get)
  return false;
#undef DO_
}

void Get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Get.GET_ATTRIBUTE attribute = 1;
  if (this->attribute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attribute(), output);
  }

  // .communicator.Proposed_Slots_Request slot_request = 2;
  if (has_slot_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.slot_request_, output);
  }

  // .communicator.Proposed_Slots proposed_slots = 3;
  if (has_proposed_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.proposed_slots_, output);
  }

  // .communicator.Proposed_Move_Slots proposed_move_slots = 4;
  if (has_proposed_move_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.proposed_move_slots_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Get)
}

::google::protobuf::uint8* Get::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Get.GET_ATTRIBUTE attribute = 1;
  if (this->attribute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attribute(), target);
  }

  // .communicator.Proposed_Slots_Request slot_request = 2;
  if (has_slot_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.slot_request_, deterministic, target);
  }

  // .communicator.Proposed_Slots proposed_slots = 3;
  if (has_proposed_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.proposed_slots_, deterministic, target);
  }

  // .communicator.Proposed_Move_Slots proposed_move_slots = 4;
  if (has_proposed_move_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.proposed_move_slots_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Get)
  return target;
}

size_t Get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Get)
  size_t total_size = 0;

  // .communicator.Get.GET_ATTRIBUTE attribute = 1;
  if (this->attribute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute());
  }

  switch (payload_case()) {
    // .communicator.Proposed_Slots_Request slot_request = 2;
    case kSlotRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_request_);
      break;
    }
    // .communicator.Proposed_Slots proposed_slots = 3;
    case kProposedSlots: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proposed_slots_);
      break;
    }
    // .communicator.Proposed_Move_Slots proposed_move_slots = 4;
    case kProposedMoveSlots: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proposed_move_slots_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Get::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Get)
  GOOGLE_DCHECK_NE(&from, this);
  const Get* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Get>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Get)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Get)
    MergeFrom(*source);
  }
}

void Get::MergeFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Get)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attribute() != 0) {
    set_attribute(from.attribute());
  }
  switch (from.payload_case()) {
    case kSlotRequest: {
      mutable_slot_request()->::communicator::Proposed_Slots_Request::MergeFrom(from.slot_request());
      break;
    }
    case kProposedSlots: {
      mutable_proposed_slots()->::communicator::Proposed_Slots::MergeFrom(from.proposed_slots());
      break;
    }
    case kProposedMoveSlots: {
      mutable_proposed_move_slots()->::communicator::Proposed_Move_Slots::MergeFrom(from.proposed_move_slots());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Get::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get::CopyFrom(const Get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get::IsInitialized() const {
  return true;
}

void Get::Swap(Get* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Get::InternalSwap(Get* other) {
  std::swap(attribute_, other->attribute_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Get::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Get

// .communicator.Get.GET_ATTRIBUTE attribute = 1;
void Get::clear_attribute() {
  attribute_ = 0;
}
::communicator::Get_GET_ATTRIBUTE Get::attribute() const {
  // @@protoc_insertion_point(field_get:communicator.Get.attribute)
  return static_cast< ::communicator::Get_GET_ATTRIBUTE >(attribute_);
}
void Get::set_attribute(::communicator::Get_GET_ATTRIBUTE value) {
  
  attribute_ = value;
  // @@protoc_insertion_point(field_set:communicator.Get.attribute)
}

// .communicator.Proposed_Slots_Request slot_request = 2;
bool Get::has_slot_request() const {
  return payload_case() == kSlotRequest;
}
void Get::set_has_slot_request() {
  _oneof_case_[0] = kSlotRequest;
}
void Get::clear_slot_request() {
  if (has_slot_request()) {
    delete payload_.slot_request_;
    clear_has_payload();
  }
}
 const ::communicator::Proposed_Slots_Request& Get::slot_request() const {
  // @@protoc_insertion_point(field_get:communicator.Get.slot_request)
  return has_slot_request()
      ? *payload_.slot_request_
      : ::communicator::Proposed_Slots_Request::default_instance();
}
::communicator::Proposed_Slots_Request* Get::mutable_slot_request() {
  if (!has_slot_request()) {
    clear_payload();
    set_has_slot_request();
    payload_.slot_request_ = new ::communicator::Proposed_Slots_Request;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get.slot_request)
  return payload_.slot_request_;
}
::communicator::Proposed_Slots_Request* Get::release_slot_request() {
  // @@protoc_insertion_point(field_release:communicator.Get.slot_request)
  if (has_slot_request()) {
    clear_has_payload();
    ::communicator::Proposed_Slots_Request* temp = payload_.slot_request_;
    payload_.slot_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get::set_allocated_slot_request(::communicator::Proposed_Slots_Request* slot_request) {
  clear_payload();
  if (slot_request) {
    set_has_slot_request();
    payload_.slot_request_ = slot_request;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get.slot_request)
}

// .communicator.Proposed_Slots proposed_slots = 3;
bool Get::has_proposed_slots() const {
  return payload_case() == kProposedSlots;
}
void Get::set_has_proposed_slots() {
  _oneof_case_[0] = kProposedSlots;
}
void Get::clear_proposed_slots() {
  if (has_proposed_slots()) {
    delete payload_.proposed_slots_;
    clear_has_payload();
  }
}
 const ::communicator::Proposed_Slots& Get::proposed_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Get.proposed_slots)
  return has_proposed_slots()
      ? *payload_.proposed_slots_
      : ::communicator::Proposed_Slots::default_instance();
}
::communicator::Proposed_Slots* Get::mutable_proposed_slots() {
  if (!has_proposed_slots()) {
    clear_payload();
    set_has_proposed_slots();
    payload_.proposed_slots_ = new ::communicator::Proposed_Slots;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get.proposed_slots)
  return payload_.proposed_slots_;
}
::communicator::Proposed_Slots* Get::release_proposed_slots() {
  // @@protoc_insertion_point(field_release:communicator.Get.proposed_slots)
  if (has_proposed_slots()) {
    clear_has_payload();
    ::communicator::Proposed_Slots* temp = payload_.proposed_slots_;
    payload_.proposed_slots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get::set_allocated_proposed_slots(::communicator::Proposed_Slots* proposed_slots) {
  clear_payload();
  if (proposed_slots) {
    set_has_proposed_slots();
    payload_.proposed_slots_ = proposed_slots;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get.proposed_slots)
}

// .communicator.Proposed_Move_Slots proposed_move_slots = 4;
bool Get::has_proposed_move_slots() const {
  return payload_case() == kProposedMoveSlots;
}
void Get::set_has_proposed_move_slots() {
  _oneof_case_[0] = kProposedMoveSlots;
}
void Get::clear_proposed_move_slots() {
  if (has_proposed_move_slots()) {
    delete payload_.proposed_move_slots_;
    clear_has_payload();
  }
}
 const ::communicator::Proposed_Move_Slots& Get::proposed_move_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Get.proposed_move_slots)
  return has_proposed_move_slots()
      ? *payload_.proposed_move_slots_
      : ::communicator::Proposed_Move_Slots::default_instance();
}
::communicator::Proposed_Move_Slots* Get::mutable_proposed_move_slots() {
  if (!has_proposed_move_slots()) {
    clear_payload();
    set_has_proposed_move_slots();
    payload_.proposed_move_slots_ = new ::communicator::Proposed_Move_Slots;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get.proposed_move_slots)
  return payload_.proposed_move_slots_;
}
::communicator::Proposed_Move_Slots* Get::release_proposed_move_slots() {
  // @@protoc_insertion_point(field_release:communicator.Get.proposed_move_slots)
  if (has_proposed_move_slots()) {
    clear_has_payload();
    ::communicator::Proposed_Move_Slots* temp = payload_.proposed_move_slots_;
    payload_.proposed_move_slots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get::set_allocated_proposed_move_slots(::communicator::Proposed_Move_Slots* proposed_move_slots) {
  clear_payload();
  if (proposed_move_slots) {
    set_has_proposed_move_slots();
    payload_.proposed_move_slots_ = proposed_move_slots;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get.proposed_move_slots)
}

bool Get::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Get::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Get::PayloadCase Get::payload_case() const {
  return Get::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Get_r::kMacStatFieldNumber;
const int Get_r::kBasicCtrlFieldNumber;
const int Get_r::kProposedSlotsFieldNumber;
const int Get_r::kSelectedSlotFieldNumber;
const int Get_r::kSelectedMoveSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Get_r::Get_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Get_r)
}
Get_r::Get_r(const Get_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kMacStat: {
      mutable_mac_stat()->::communicator::Mac_stat::MergeFrom(from.mac_stat());
      break;
    }
    case kBasicCtrl: {
      mutable_basic_ctrl()->::communicator::Basic_ctrl::MergeFrom(from.basic_ctrl());
      break;
    }
    case kProposedSlots: {
      mutable_proposed_slots()->::communicator::Proposed_Slots::MergeFrom(from.proposed_slots());
      break;
    }
    case kSelectedSlot: {
      mutable_selected_slot()->::communicator::Selected_Slot::MergeFrom(from.selected_slot());
      break;
    }
    case kSelectedMoveSlot: {
      mutable_selected_move_slot()->::communicator::Selected_Move_Slot::MergeFrom(from.selected_move_slot());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Get_r)
}

void Get_r::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

Get_r::~Get_r() {
  // @@protoc_insertion_point(destructor:communicator.Get_r)
  SharedDtor();
}

void Get_r::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Get_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Get_r::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Get_r& Get_r::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Get_r* Get_r::New(::google::protobuf::Arena* arena) const {
  Get_r* n = new Get_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Get_r::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Get_r)
  switch (payload_case()) {
    case kMacStat: {
      delete payload_.mac_stat_;
      break;
    }
    case kBasicCtrl: {
      delete payload_.basic_ctrl_;
      break;
    }
    case kProposedSlots: {
      delete payload_.proposed_slots_;
      break;
    }
    case kSelectedSlot: {
      delete payload_.selected_slot_;
      break;
    }
    case kSelectedMoveSlot: {
      delete payload_.selected_move_slot_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Get_r::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Get_r)
  clear_payload();
}

bool Get_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Get_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Mac_stat mac_stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mac_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Basic_ctrl basic_ctrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_ctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Proposed_Slots proposed_slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposed_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Selected_Slot selected_slot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Selected_Move_Slot selected_move_slot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_move_slot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Get_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Get_r)
  return false;
#undef DO_
}

void Get_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Get_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Mac_stat mac_stat = 1;
  if (has_mac_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.mac_stat_, output);
  }

  // .communicator.Basic_ctrl basic_ctrl = 2;
  if (has_basic_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.basic_ctrl_, output);
  }

  // .communicator.Proposed_Slots proposed_slots = 3;
  if (has_proposed_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.proposed_slots_, output);
  }

  // .communicator.Selected_Slot selected_slot = 4;
  if (has_selected_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.selected_slot_, output);
  }

  // .communicator.Selected_Move_Slot selected_move_slot = 5;
  if (has_selected_move_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.selected_move_slot_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Get_r)
}

::google::protobuf::uint8* Get_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Get_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Mac_stat mac_stat = 1;
  if (has_mac_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.mac_stat_, deterministic, target);
  }

  // .communicator.Basic_ctrl basic_ctrl = 2;
  if (has_basic_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.basic_ctrl_, deterministic, target);
  }

  // .communicator.Proposed_Slots proposed_slots = 3;
  if (has_proposed_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.proposed_slots_, deterministic, target);
  }

  // .communicator.Selected_Slot selected_slot = 4;
  if (has_selected_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.selected_slot_, deterministic, target);
  }

  // .communicator.Selected_Move_Slot selected_move_slot = 5;
  if (has_selected_move_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.selected_move_slot_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Get_r)
  return target;
}

size_t Get_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Get_r)
  size_t total_size = 0;

  switch (payload_case()) {
    // .communicator.Mac_stat mac_stat = 1;
    case kMacStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.mac_stat_);
      break;
    }
    // .communicator.Basic_ctrl basic_ctrl = 2;
    case kBasicCtrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.basic_ctrl_);
      break;
    }
    // .communicator.Proposed_Slots proposed_slots = 3;
    case kProposedSlots: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proposed_slots_);
      break;
    }
    // .communicator.Selected_Slot selected_slot = 4;
    case kSelectedSlot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.selected_slot_);
      break;
    }
    // .communicator.Selected_Move_Slot selected_move_slot = 5;
    case kSelectedMoveSlot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.selected_move_slot_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Get_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Get_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Get_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Get_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Get_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Get_r)
    MergeFrom(*source);
  }
}

void Get_r::MergeFrom(const Get_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Get_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kMacStat: {
      mutable_mac_stat()->::communicator::Mac_stat::MergeFrom(from.mac_stat());
      break;
    }
    case kBasicCtrl: {
      mutable_basic_ctrl()->::communicator::Basic_ctrl::MergeFrom(from.basic_ctrl());
      break;
    }
    case kProposedSlots: {
      mutable_proposed_slots()->::communicator::Proposed_Slots::MergeFrom(from.proposed_slots());
      break;
    }
    case kSelectedSlot: {
      mutable_selected_slot()->::communicator::Selected_Slot::MergeFrom(from.selected_slot());
      break;
    }
    case kSelectedMoveSlot: {
      mutable_selected_move_slot()->::communicator::Selected_Move_Slot::MergeFrom(from.selected_move_slot());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Get_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Get_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Get_r::CopyFrom(const Get_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Get_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Get_r::IsInitialized() const {
  return true;
}

void Get_r::Swap(Get_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Get_r::InternalSwap(Get_r* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Get_r::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Get_r

// .communicator.Mac_stat mac_stat = 1;
bool Get_r::has_mac_stat() const {
  return payload_case() == kMacStat;
}
void Get_r::set_has_mac_stat() {
  _oneof_case_[0] = kMacStat;
}
void Get_r::clear_mac_stat() {
  if (has_mac_stat()) {
    delete payload_.mac_stat_;
    clear_has_payload();
  }
}
 const ::communicator::Mac_stat& Get_r::mac_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Get_r.mac_stat)
  return has_mac_stat()
      ? *payload_.mac_stat_
      : ::communicator::Mac_stat::default_instance();
}
::communicator::Mac_stat* Get_r::mutable_mac_stat() {
  if (!has_mac_stat()) {
    clear_payload();
    set_has_mac_stat();
    payload_.mac_stat_ = new ::communicator::Mac_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get_r.mac_stat)
  return payload_.mac_stat_;
}
::communicator::Mac_stat* Get_r::release_mac_stat() {
  // @@protoc_insertion_point(field_release:communicator.Get_r.mac_stat)
  if (has_mac_stat()) {
    clear_has_payload();
    ::communicator::Mac_stat* temp = payload_.mac_stat_;
    payload_.mac_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get_r::set_allocated_mac_stat(::communicator::Mac_stat* mac_stat) {
  clear_payload();
  if (mac_stat) {
    set_has_mac_stat();
    payload_.mac_stat_ = mac_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get_r.mac_stat)
}

// .communicator.Basic_ctrl basic_ctrl = 2;
bool Get_r::has_basic_ctrl() const {
  return payload_case() == kBasicCtrl;
}
void Get_r::set_has_basic_ctrl() {
  _oneof_case_[0] = kBasicCtrl;
}
void Get_r::clear_basic_ctrl() {
  if (has_basic_ctrl()) {
    delete payload_.basic_ctrl_;
    clear_has_payload();
  }
}
 const ::communicator::Basic_ctrl& Get_r::basic_ctrl() const {
  // @@protoc_insertion_point(field_get:communicator.Get_r.basic_ctrl)
  return has_basic_ctrl()
      ? *payload_.basic_ctrl_
      : ::communicator::Basic_ctrl::default_instance();
}
::communicator::Basic_ctrl* Get_r::mutable_basic_ctrl() {
  if (!has_basic_ctrl()) {
    clear_payload();
    set_has_basic_ctrl();
    payload_.basic_ctrl_ = new ::communicator::Basic_ctrl;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get_r.basic_ctrl)
  return payload_.basic_ctrl_;
}
::communicator::Basic_ctrl* Get_r::release_basic_ctrl() {
  // @@protoc_insertion_point(field_release:communicator.Get_r.basic_ctrl)
  if (has_basic_ctrl()) {
    clear_has_payload();
    ::communicator::Basic_ctrl* temp = payload_.basic_ctrl_;
    payload_.basic_ctrl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get_r::set_allocated_basic_ctrl(::communicator::Basic_ctrl* basic_ctrl) {
  clear_payload();
  if (basic_ctrl) {
    set_has_basic_ctrl();
    payload_.basic_ctrl_ = basic_ctrl;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get_r.basic_ctrl)
}

// .communicator.Proposed_Slots proposed_slots = 3;
bool Get_r::has_proposed_slots() const {
  return payload_case() == kProposedSlots;
}
void Get_r::set_has_proposed_slots() {
  _oneof_case_[0] = kProposedSlots;
}
void Get_r::clear_proposed_slots() {
  if (has_proposed_slots()) {
    delete payload_.proposed_slots_;
    clear_has_payload();
  }
}
 const ::communicator::Proposed_Slots& Get_r::proposed_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Get_r.proposed_slots)
  return has_proposed_slots()
      ? *payload_.proposed_slots_
      : ::communicator::Proposed_Slots::default_instance();
}
::communicator::Proposed_Slots* Get_r::mutable_proposed_slots() {
  if (!has_proposed_slots()) {
    clear_payload();
    set_has_proposed_slots();
    payload_.proposed_slots_ = new ::communicator::Proposed_Slots;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get_r.proposed_slots)
  return payload_.proposed_slots_;
}
::communicator::Proposed_Slots* Get_r::release_proposed_slots() {
  // @@protoc_insertion_point(field_release:communicator.Get_r.proposed_slots)
  if (has_proposed_slots()) {
    clear_has_payload();
    ::communicator::Proposed_Slots* temp = payload_.proposed_slots_;
    payload_.proposed_slots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get_r::set_allocated_proposed_slots(::communicator::Proposed_Slots* proposed_slots) {
  clear_payload();
  if (proposed_slots) {
    set_has_proposed_slots();
    payload_.proposed_slots_ = proposed_slots;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get_r.proposed_slots)
}

// .communicator.Selected_Slot selected_slot = 4;
bool Get_r::has_selected_slot() const {
  return payload_case() == kSelectedSlot;
}
void Get_r::set_has_selected_slot() {
  _oneof_case_[0] = kSelectedSlot;
}
void Get_r::clear_selected_slot() {
  if (has_selected_slot()) {
    delete payload_.selected_slot_;
    clear_has_payload();
  }
}
 const ::communicator::Selected_Slot& Get_r::selected_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Get_r.selected_slot)
  return has_selected_slot()
      ? *payload_.selected_slot_
      : ::communicator::Selected_Slot::default_instance();
}
::communicator::Selected_Slot* Get_r::mutable_selected_slot() {
  if (!has_selected_slot()) {
    clear_payload();
    set_has_selected_slot();
    payload_.selected_slot_ = new ::communicator::Selected_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get_r.selected_slot)
  return payload_.selected_slot_;
}
::communicator::Selected_Slot* Get_r::release_selected_slot() {
  // @@protoc_insertion_point(field_release:communicator.Get_r.selected_slot)
  if (has_selected_slot()) {
    clear_has_payload();
    ::communicator::Selected_Slot* temp = payload_.selected_slot_;
    payload_.selected_slot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get_r::set_allocated_selected_slot(::communicator::Selected_Slot* selected_slot) {
  clear_payload();
  if (selected_slot) {
    set_has_selected_slot();
    payload_.selected_slot_ = selected_slot;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get_r.selected_slot)
}

// .communicator.Selected_Move_Slot selected_move_slot = 5;
bool Get_r::has_selected_move_slot() const {
  return payload_case() == kSelectedMoveSlot;
}
void Get_r::set_has_selected_move_slot() {
  _oneof_case_[0] = kSelectedMoveSlot;
}
void Get_r::clear_selected_move_slot() {
  if (has_selected_move_slot()) {
    delete payload_.selected_move_slot_;
    clear_has_payload();
  }
}
 const ::communicator::Selected_Move_Slot& Get_r::selected_move_slot() const {
  // @@protoc_insertion_point(field_get:communicator.Get_r.selected_move_slot)
  return has_selected_move_slot()
      ? *payload_.selected_move_slot_
      : ::communicator::Selected_Move_Slot::default_instance();
}
::communicator::Selected_Move_Slot* Get_r::mutable_selected_move_slot() {
  if (!has_selected_move_slot()) {
    clear_payload();
    set_has_selected_move_slot();
    payload_.selected_move_slot_ = new ::communicator::Selected_Move_Slot;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Get_r.selected_move_slot)
  return payload_.selected_move_slot_;
}
::communicator::Selected_Move_Slot* Get_r::release_selected_move_slot() {
  // @@protoc_insertion_point(field_release:communicator.Get_r.selected_move_slot)
  if (has_selected_move_slot()) {
    clear_has_payload();
    ::communicator::Selected_Move_Slot* temp = payload_.selected_move_slot_;
    payload_.selected_move_slot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Get_r::set_allocated_selected_move_slot(::communicator::Selected_Move_Slot* selected_move_slot) {
  clear_payload();
  if (selected_move_slot) {
    set_has_selected_move_slot();
    payload_.selected_move_slot_ = selected_move_slot;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Get_r.selected_move_slot)
}

bool Get_r::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Get_r::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Get_r::PayloadCase Get_r::payload_case() const {
  return Get_r::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Set::kMcsTxgainBwFieldNumber;
const int Set::kChFieldNumber;
const int Set::kExternalSlotAllocationFieldNumber;
const int Set::kExternalSlotRemovalFieldNumber;
const int Set::kSlotAllocationFieldNumber;
const int Set::kSlotRemovalFieldNumber;
const int Set::kBcSlotsAnnouncementFieldNumber;
const int Set::kOutcomesUpdatedFieldNumber;
const int Set::kExternalSlotMoveFieldNumber;
const int Set::kProposedMoveSlotsFieldNumber;
const int Set::kSlotMoveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Set::Set()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Set)
}
Set::Set(const Set& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kMcsTxgainBw: {
      mutable_mcs_txgain_bw()->::communicator::Link_MCS_TxGain_BW::MergeFrom(from.mcs_txgain_bw());
      break;
    }
    case kCh: {
      set_ch(from.ch());
      break;
    }
    case kExternalSlotAllocation: {
      mutable_external_slot_allocation()->::communicator::External_Slot_Allocation::MergeFrom(from.external_slot_allocation());
      break;
    }
    case kExternalSlotRemoval: {
      mutable_external_slot_removal()->::communicator::External_Slot_Removal::MergeFrom(from.external_slot_removal());
      break;
    }
    case kSlotAllocation: {
      mutable_slot_allocation()->::communicator::Slot_Allocation::MergeFrom(from.slot_allocation());
      break;
    }
    case kSlotRemoval: {
      mutable_slot_removal()->::communicator::Slot_Removal::MergeFrom(from.slot_removal());
      break;
    }
    case kBcSlotsAnnouncement: {
      mutable_bc_slots_announcement()->::communicator::BC_Slots_Announcement::MergeFrom(from.bc_slots_announcement());
      break;
    }
    case kOutcomesUpdated: {
      set_outcomes_updated(from.outcomes_updated());
      break;
    }
    case kExternalSlotMove: {
      mutable_external_slot_move()->::communicator::External_Slot_Move::MergeFrom(from.external_slot_move());
      break;
    }
    case kProposedMoveSlots: {
      mutable_proposed_move_slots()->::communicator::Proposed_Move_Slots::MergeFrom(from.proposed_move_slots());
      break;
    }
    case kSlotMove: {
      mutable_slot_move()->::communicator::Slot_Move::MergeFrom(from.slot_move());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Set)
}

void Set::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

Set::~Set() {
  // @@protoc_insertion_point(destructor:communicator.Set)
  SharedDtor();
}

void Set::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Set& Set::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Set* Set::New(::google::protobuf::Arena* arena) const {
  Set* n = new Set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Set::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Set)
  switch (payload_case()) {
    case kMcsTxgainBw: {
      delete payload_.mcs_txgain_bw_;
      break;
    }
    case kCh: {
      // No need to clear
      break;
    }
    case kExternalSlotAllocation: {
      delete payload_.external_slot_allocation_;
      break;
    }
    case kExternalSlotRemoval: {
      delete payload_.external_slot_removal_;
      break;
    }
    case kSlotAllocation: {
      delete payload_.slot_allocation_;
      break;
    }
    case kSlotRemoval: {
      delete payload_.slot_removal_;
      break;
    }
    case kBcSlotsAnnouncement: {
      delete payload_.bc_slots_announcement_;
      break;
    }
    case kOutcomesUpdated: {
      // No need to clear
      break;
    }
    case kExternalSlotMove: {
      delete payload_.external_slot_move_;
      break;
    }
    case kProposedMoveSlots: {
      delete payload_.proposed_move_slots_;
      break;
    }
    case kSlotMove: {
      delete payload_.slot_move_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Set::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Set)
  clear_payload();
}

bool Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Link_MCS_TxGain_BW mcs_txgain_bw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mcs_txgain_bw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_.ch_)));
          set_has_ch();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.External_Slot_Allocation external_slot_allocation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_slot_allocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.External_Slot_Removal external_slot_removal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_slot_removal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Slot_Allocation slot_allocation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_allocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Slot_Removal slot_removal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_removal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.BC_Slots_Announcement bc_slots_announcement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bc_slots_announcement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool outcomes_updated = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          clear_payload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &payload_.outcomes_updated_)));
          set_has_outcomes_updated();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.External_Slot_Move external_slot_move = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_slot_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Proposed_Move_Slots proposed_move_slots = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposed_move_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Slot_Move slot_move = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Set)
  return false;
#undef DO_
}

void Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Link_MCS_TxGain_BW mcs_txgain_bw = 1;
  if (has_mcs_txgain_bw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.mcs_txgain_bw_, output);
  }

  // uint32 ch = 2;
  if (has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ch(), output);
  }

  // .communicator.External_Slot_Allocation external_slot_allocation = 3;
  if (has_external_slot_allocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.external_slot_allocation_, output);
  }

  // .communicator.External_Slot_Removal external_slot_removal = 4;
  if (has_external_slot_removal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.external_slot_removal_, output);
  }

  // .communicator.Slot_Allocation slot_allocation = 5;
  if (has_slot_allocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.slot_allocation_, output);
  }

  // .communicator.Slot_Removal slot_removal = 6;
  if (has_slot_removal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.slot_removal_, output);
  }

  // .communicator.BC_Slots_Announcement bc_slots_announcement = 7;
  if (has_bc_slots_announcement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.bc_slots_announcement_, output);
  }

  // bool outcomes_updated = 8;
  if (has_outcomes_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->outcomes_updated(), output);
  }

  // .communicator.External_Slot_Move external_slot_move = 9;
  if (has_external_slot_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.external_slot_move_, output);
  }

  // .communicator.Proposed_Move_Slots proposed_move_slots = 10;
  if (has_proposed_move_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.proposed_move_slots_, output);
  }

  // .communicator.Slot_Move slot_move = 11;
  if (has_slot_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.slot_move_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Set)
}

::google::protobuf::uint8* Set::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Link_MCS_TxGain_BW mcs_txgain_bw = 1;
  if (has_mcs_txgain_bw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.mcs_txgain_bw_, deterministic, target);
  }

  // uint32 ch = 2;
  if (has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ch(), target);
  }

  // .communicator.External_Slot_Allocation external_slot_allocation = 3;
  if (has_external_slot_allocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.external_slot_allocation_, deterministic, target);
  }

  // .communicator.External_Slot_Removal external_slot_removal = 4;
  if (has_external_slot_removal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.external_slot_removal_, deterministic, target);
  }

  // .communicator.Slot_Allocation slot_allocation = 5;
  if (has_slot_allocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.slot_allocation_, deterministic, target);
  }

  // .communicator.Slot_Removal slot_removal = 6;
  if (has_slot_removal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.slot_removal_, deterministic, target);
  }

  // .communicator.BC_Slots_Announcement bc_slots_announcement = 7;
  if (has_bc_slots_announcement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.bc_slots_announcement_, deterministic, target);
  }

  // bool outcomes_updated = 8;
  if (has_outcomes_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->outcomes_updated(), target);
  }

  // .communicator.External_Slot_Move external_slot_move = 9;
  if (has_external_slot_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *payload_.external_slot_move_, deterministic, target);
  }

  // .communicator.Proposed_Move_Slots proposed_move_slots = 10;
  if (has_proposed_move_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *payload_.proposed_move_slots_, deterministic, target);
  }

  // .communicator.Slot_Move slot_move = 11;
  if (has_slot_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *payload_.slot_move_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Set)
  return target;
}

size_t Set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Set)
  size_t total_size = 0;

  switch (payload_case()) {
    // .communicator.Link_MCS_TxGain_BW mcs_txgain_bw = 1;
    case kMcsTxgainBw: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.mcs_txgain_bw_);
      break;
    }
    // uint32 ch = 2;
    case kCh: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ch());
      break;
    }
    // .communicator.External_Slot_Allocation external_slot_allocation = 3;
    case kExternalSlotAllocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.external_slot_allocation_);
      break;
    }
    // .communicator.External_Slot_Removal external_slot_removal = 4;
    case kExternalSlotRemoval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.external_slot_removal_);
      break;
    }
    // .communicator.Slot_Allocation slot_allocation = 5;
    case kSlotAllocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_allocation_);
      break;
    }
    // .communicator.Slot_Removal slot_removal = 6;
    case kSlotRemoval: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_removal_);
      break;
    }
    // .communicator.BC_Slots_Announcement bc_slots_announcement = 7;
    case kBcSlotsAnnouncement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.bc_slots_announcement_);
      break;
    }
    // bool outcomes_updated = 8;
    case kOutcomesUpdated: {
      total_size += 1 + 1;
      break;
    }
    // .communicator.External_Slot_Move external_slot_move = 9;
    case kExternalSlotMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.external_slot_move_);
      break;
    }
    // .communicator.Proposed_Move_Slots proposed_move_slots = 10;
    case kProposedMoveSlots: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.proposed_move_slots_);
      break;
    }
    // .communicator.Slot_Move slot_move = 11;
    case kSlotMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_move_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Set)
  GOOGLE_DCHECK_NE(&from, this);
  const Set* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Set>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Set)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Set)
    MergeFrom(*source);
  }
}

void Set::MergeFrom(const Set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Set)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kMcsTxgainBw: {
      mutable_mcs_txgain_bw()->::communicator::Link_MCS_TxGain_BW::MergeFrom(from.mcs_txgain_bw());
      break;
    }
    case kCh: {
      set_ch(from.ch());
      break;
    }
    case kExternalSlotAllocation: {
      mutable_external_slot_allocation()->::communicator::External_Slot_Allocation::MergeFrom(from.external_slot_allocation());
      break;
    }
    case kExternalSlotRemoval: {
      mutable_external_slot_removal()->::communicator::External_Slot_Removal::MergeFrom(from.external_slot_removal());
      break;
    }
    case kSlotAllocation: {
      mutable_slot_allocation()->::communicator::Slot_Allocation::MergeFrom(from.slot_allocation());
      break;
    }
    case kSlotRemoval: {
      mutable_slot_removal()->::communicator::Slot_Removal::MergeFrom(from.slot_removal());
      break;
    }
    case kBcSlotsAnnouncement: {
      mutable_bc_slots_announcement()->::communicator::BC_Slots_Announcement::MergeFrom(from.bc_slots_announcement());
      break;
    }
    case kOutcomesUpdated: {
      set_outcomes_updated(from.outcomes_updated());
      break;
    }
    case kExternalSlotMove: {
      mutable_external_slot_move()->::communicator::External_Slot_Move::MergeFrom(from.external_slot_move());
      break;
    }
    case kProposedMoveSlots: {
      mutable_proposed_move_slots()->::communicator::Proposed_Move_Slots::MergeFrom(from.proposed_move_slots());
      break;
    }
    case kSlotMove: {
      mutable_slot_move()->::communicator::Slot_Move::MergeFrom(from.slot_move());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Set::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set::CopyFrom(const Set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set::IsInitialized() const {
  return true;
}

void Set::Swap(Set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Set::InternalSwap(Set* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Set::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Set

// .communicator.Link_MCS_TxGain_BW mcs_txgain_bw = 1;
bool Set::has_mcs_txgain_bw() const {
  return payload_case() == kMcsTxgainBw;
}
void Set::set_has_mcs_txgain_bw() {
  _oneof_case_[0] = kMcsTxgainBw;
}
void Set::clear_mcs_txgain_bw() {
  if (has_mcs_txgain_bw()) {
    delete payload_.mcs_txgain_bw_;
    clear_has_payload();
  }
}
 const ::communicator::Link_MCS_TxGain_BW& Set::mcs_txgain_bw() const {
  // @@protoc_insertion_point(field_get:communicator.Set.mcs_txgain_bw)
  return has_mcs_txgain_bw()
      ? *payload_.mcs_txgain_bw_
      : ::communicator::Link_MCS_TxGain_BW::default_instance();
}
::communicator::Link_MCS_TxGain_BW* Set::mutable_mcs_txgain_bw() {
  if (!has_mcs_txgain_bw()) {
    clear_payload();
    set_has_mcs_txgain_bw();
    payload_.mcs_txgain_bw_ = new ::communicator::Link_MCS_TxGain_BW;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.mcs_txgain_bw)
  return payload_.mcs_txgain_bw_;
}
::communicator::Link_MCS_TxGain_BW* Set::release_mcs_txgain_bw() {
  // @@protoc_insertion_point(field_release:communicator.Set.mcs_txgain_bw)
  if (has_mcs_txgain_bw()) {
    clear_has_payload();
    ::communicator::Link_MCS_TxGain_BW* temp = payload_.mcs_txgain_bw_;
    payload_.mcs_txgain_bw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_mcs_txgain_bw(::communicator::Link_MCS_TxGain_BW* mcs_txgain_bw) {
  clear_payload();
  if (mcs_txgain_bw) {
    set_has_mcs_txgain_bw();
    payload_.mcs_txgain_bw_ = mcs_txgain_bw;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.mcs_txgain_bw)
}

// uint32 ch = 2;
bool Set::has_ch() const {
  return payload_case() == kCh;
}
void Set::set_has_ch() {
  _oneof_case_[0] = kCh;
}
void Set::clear_ch() {
  if (has_ch()) {
    payload_.ch_ = 0u;
    clear_has_payload();
  }
}
::google::protobuf::uint32 Set::ch() const {
  // @@protoc_insertion_point(field_get:communicator.Set.ch)
  if (has_ch()) {
    return payload_.ch_;
  }
  return 0u;
}
void Set::set_ch(::google::protobuf::uint32 value) {
  if (!has_ch()) {
    clear_payload();
    set_has_ch();
  }
  payload_.ch_ = value;
  // @@protoc_insertion_point(field_set:communicator.Set.ch)
}

// .communicator.External_Slot_Allocation external_slot_allocation = 3;
bool Set::has_external_slot_allocation() const {
  return payload_case() == kExternalSlotAllocation;
}
void Set::set_has_external_slot_allocation() {
  _oneof_case_[0] = kExternalSlotAllocation;
}
void Set::clear_external_slot_allocation() {
  if (has_external_slot_allocation()) {
    delete payload_.external_slot_allocation_;
    clear_has_payload();
  }
}
 const ::communicator::External_Slot_Allocation& Set::external_slot_allocation() const {
  // @@protoc_insertion_point(field_get:communicator.Set.external_slot_allocation)
  return has_external_slot_allocation()
      ? *payload_.external_slot_allocation_
      : ::communicator::External_Slot_Allocation::default_instance();
}
::communicator::External_Slot_Allocation* Set::mutable_external_slot_allocation() {
  if (!has_external_slot_allocation()) {
    clear_payload();
    set_has_external_slot_allocation();
    payload_.external_slot_allocation_ = new ::communicator::External_Slot_Allocation;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.external_slot_allocation)
  return payload_.external_slot_allocation_;
}
::communicator::External_Slot_Allocation* Set::release_external_slot_allocation() {
  // @@protoc_insertion_point(field_release:communicator.Set.external_slot_allocation)
  if (has_external_slot_allocation()) {
    clear_has_payload();
    ::communicator::External_Slot_Allocation* temp = payload_.external_slot_allocation_;
    payload_.external_slot_allocation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_external_slot_allocation(::communicator::External_Slot_Allocation* external_slot_allocation) {
  clear_payload();
  if (external_slot_allocation) {
    set_has_external_slot_allocation();
    payload_.external_slot_allocation_ = external_slot_allocation;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.external_slot_allocation)
}

// .communicator.External_Slot_Removal external_slot_removal = 4;
bool Set::has_external_slot_removal() const {
  return payload_case() == kExternalSlotRemoval;
}
void Set::set_has_external_slot_removal() {
  _oneof_case_[0] = kExternalSlotRemoval;
}
void Set::clear_external_slot_removal() {
  if (has_external_slot_removal()) {
    delete payload_.external_slot_removal_;
    clear_has_payload();
  }
}
 const ::communicator::External_Slot_Removal& Set::external_slot_removal() const {
  // @@protoc_insertion_point(field_get:communicator.Set.external_slot_removal)
  return has_external_slot_removal()
      ? *payload_.external_slot_removal_
      : ::communicator::External_Slot_Removal::default_instance();
}
::communicator::External_Slot_Removal* Set::mutable_external_slot_removal() {
  if (!has_external_slot_removal()) {
    clear_payload();
    set_has_external_slot_removal();
    payload_.external_slot_removal_ = new ::communicator::External_Slot_Removal;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.external_slot_removal)
  return payload_.external_slot_removal_;
}
::communicator::External_Slot_Removal* Set::release_external_slot_removal() {
  // @@protoc_insertion_point(field_release:communicator.Set.external_slot_removal)
  if (has_external_slot_removal()) {
    clear_has_payload();
    ::communicator::External_Slot_Removal* temp = payload_.external_slot_removal_;
    payload_.external_slot_removal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_external_slot_removal(::communicator::External_Slot_Removal* external_slot_removal) {
  clear_payload();
  if (external_slot_removal) {
    set_has_external_slot_removal();
    payload_.external_slot_removal_ = external_slot_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.external_slot_removal)
}

// .communicator.Slot_Allocation slot_allocation = 5;
bool Set::has_slot_allocation() const {
  return payload_case() == kSlotAllocation;
}
void Set::set_has_slot_allocation() {
  _oneof_case_[0] = kSlotAllocation;
}
void Set::clear_slot_allocation() {
  if (has_slot_allocation()) {
    delete payload_.slot_allocation_;
    clear_has_payload();
  }
}
 const ::communicator::Slot_Allocation& Set::slot_allocation() const {
  // @@protoc_insertion_point(field_get:communicator.Set.slot_allocation)
  return has_slot_allocation()
      ? *payload_.slot_allocation_
      : ::communicator::Slot_Allocation::default_instance();
}
::communicator::Slot_Allocation* Set::mutable_slot_allocation() {
  if (!has_slot_allocation()) {
    clear_payload();
    set_has_slot_allocation();
    payload_.slot_allocation_ = new ::communicator::Slot_Allocation;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.slot_allocation)
  return payload_.slot_allocation_;
}
::communicator::Slot_Allocation* Set::release_slot_allocation() {
  // @@protoc_insertion_point(field_release:communicator.Set.slot_allocation)
  if (has_slot_allocation()) {
    clear_has_payload();
    ::communicator::Slot_Allocation* temp = payload_.slot_allocation_;
    payload_.slot_allocation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_slot_allocation(::communicator::Slot_Allocation* slot_allocation) {
  clear_payload();
  if (slot_allocation) {
    set_has_slot_allocation();
    payload_.slot_allocation_ = slot_allocation;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.slot_allocation)
}

// .communicator.Slot_Removal slot_removal = 6;
bool Set::has_slot_removal() const {
  return payload_case() == kSlotRemoval;
}
void Set::set_has_slot_removal() {
  _oneof_case_[0] = kSlotRemoval;
}
void Set::clear_slot_removal() {
  if (has_slot_removal()) {
    delete payload_.slot_removal_;
    clear_has_payload();
  }
}
 const ::communicator::Slot_Removal& Set::slot_removal() const {
  // @@protoc_insertion_point(field_get:communicator.Set.slot_removal)
  return has_slot_removal()
      ? *payload_.slot_removal_
      : ::communicator::Slot_Removal::default_instance();
}
::communicator::Slot_Removal* Set::mutable_slot_removal() {
  if (!has_slot_removal()) {
    clear_payload();
    set_has_slot_removal();
    payload_.slot_removal_ = new ::communicator::Slot_Removal;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.slot_removal)
  return payload_.slot_removal_;
}
::communicator::Slot_Removal* Set::release_slot_removal() {
  // @@protoc_insertion_point(field_release:communicator.Set.slot_removal)
  if (has_slot_removal()) {
    clear_has_payload();
    ::communicator::Slot_Removal* temp = payload_.slot_removal_;
    payload_.slot_removal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_slot_removal(::communicator::Slot_Removal* slot_removal) {
  clear_payload();
  if (slot_removal) {
    set_has_slot_removal();
    payload_.slot_removal_ = slot_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.slot_removal)
}

// .communicator.BC_Slots_Announcement bc_slots_announcement = 7;
bool Set::has_bc_slots_announcement() const {
  return payload_case() == kBcSlotsAnnouncement;
}
void Set::set_has_bc_slots_announcement() {
  _oneof_case_[0] = kBcSlotsAnnouncement;
}
void Set::clear_bc_slots_announcement() {
  if (has_bc_slots_announcement()) {
    delete payload_.bc_slots_announcement_;
    clear_has_payload();
  }
}
 const ::communicator::BC_Slots_Announcement& Set::bc_slots_announcement() const {
  // @@protoc_insertion_point(field_get:communicator.Set.bc_slots_announcement)
  return has_bc_slots_announcement()
      ? *payload_.bc_slots_announcement_
      : ::communicator::BC_Slots_Announcement::default_instance();
}
::communicator::BC_Slots_Announcement* Set::mutable_bc_slots_announcement() {
  if (!has_bc_slots_announcement()) {
    clear_payload();
    set_has_bc_slots_announcement();
    payload_.bc_slots_announcement_ = new ::communicator::BC_Slots_Announcement;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.bc_slots_announcement)
  return payload_.bc_slots_announcement_;
}
::communicator::BC_Slots_Announcement* Set::release_bc_slots_announcement() {
  // @@protoc_insertion_point(field_release:communicator.Set.bc_slots_announcement)
  if (has_bc_slots_announcement()) {
    clear_has_payload();
    ::communicator::BC_Slots_Announcement* temp = payload_.bc_slots_announcement_;
    payload_.bc_slots_announcement_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_bc_slots_announcement(::communicator::BC_Slots_Announcement* bc_slots_announcement) {
  clear_payload();
  if (bc_slots_announcement) {
    set_has_bc_slots_announcement();
    payload_.bc_slots_announcement_ = bc_slots_announcement;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.bc_slots_announcement)
}

// bool outcomes_updated = 8;
bool Set::has_outcomes_updated() const {
  return payload_case() == kOutcomesUpdated;
}
void Set::set_has_outcomes_updated() {
  _oneof_case_[0] = kOutcomesUpdated;
}
void Set::clear_outcomes_updated() {
  if (has_outcomes_updated()) {
    payload_.outcomes_updated_ = false;
    clear_has_payload();
  }
}
bool Set::outcomes_updated() const {
  // @@protoc_insertion_point(field_get:communicator.Set.outcomes_updated)
  if (has_outcomes_updated()) {
    return payload_.outcomes_updated_;
  }
  return false;
}
void Set::set_outcomes_updated(bool value) {
  if (!has_outcomes_updated()) {
    clear_payload();
    set_has_outcomes_updated();
  }
  payload_.outcomes_updated_ = value;
  // @@protoc_insertion_point(field_set:communicator.Set.outcomes_updated)
}

// .communicator.External_Slot_Move external_slot_move = 9;
bool Set::has_external_slot_move() const {
  return payload_case() == kExternalSlotMove;
}
void Set::set_has_external_slot_move() {
  _oneof_case_[0] = kExternalSlotMove;
}
void Set::clear_external_slot_move() {
  if (has_external_slot_move()) {
    delete payload_.external_slot_move_;
    clear_has_payload();
  }
}
 const ::communicator::External_Slot_Move& Set::external_slot_move() const {
  // @@protoc_insertion_point(field_get:communicator.Set.external_slot_move)
  return has_external_slot_move()
      ? *payload_.external_slot_move_
      : ::communicator::External_Slot_Move::default_instance();
}
::communicator::External_Slot_Move* Set::mutable_external_slot_move() {
  if (!has_external_slot_move()) {
    clear_payload();
    set_has_external_slot_move();
    payload_.external_slot_move_ = new ::communicator::External_Slot_Move;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.external_slot_move)
  return payload_.external_slot_move_;
}
::communicator::External_Slot_Move* Set::release_external_slot_move() {
  // @@protoc_insertion_point(field_release:communicator.Set.external_slot_move)
  if (has_external_slot_move()) {
    clear_has_payload();
    ::communicator::External_Slot_Move* temp = payload_.external_slot_move_;
    payload_.external_slot_move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_external_slot_move(::communicator::External_Slot_Move* external_slot_move) {
  clear_payload();
  if (external_slot_move) {
    set_has_external_slot_move();
    payload_.external_slot_move_ = external_slot_move;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.external_slot_move)
}

// .communicator.Proposed_Move_Slots proposed_move_slots = 10;
bool Set::has_proposed_move_slots() const {
  return payload_case() == kProposedMoveSlots;
}
void Set::set_has_proposed_move_slots() {
  _oneof_case_[0] = kProposedMoveSlots;
}
void Set::clear_proposed_move_slots() {
  if (has_proposed_move_slots()) {
    delete payload_.proposed_move_slots_;
    clear_has_payload();
  }
}
 const ::communicator::Proposed_Move_Slots& Set::proposed_move_slots() const {
  // @@protoc_insertion_point(field_get:communicator.Set.proposed_move_slots)
  return has_proposed_move_slots()
      ? *payload_.proposed_move_slots_
      : ::communicator::Proposed_Move_Slots::default_instance();
}
::communicator::Proposed_Move_Slots* Set::mutable_proposed_move_slots() {
  if (!has_proposed_move_slots()) {
    clear_payload();
    set_has_proposed_move_slots();
    payload_.proposed_move_slots_ = new ::communicator::Proposed_Move_Slots;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.proposed_move_slots)
  return payload_.proposed_move_slots_;
}
::communicator::Proposed_Move_Slots* Set::release_proposed_move_slots() {
  // @@protoc_insertion_point(field_release:communicator.Set.proposed_move_slots)
  if (has_proposed_move_slots()) {
    clear_has_payload();
    ::communicator::Proposed_Move_Slots* temp = payload_.proposed_move_slots_;
    payload_.proposed_move_slots_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_proposed_move_slots(::communicator::Proposed_Move_Slots* proposed_move_slots) {
  clear_payload();
  if (proposed_move_slots) {
    set_has_proposed_move_slots();
    payload_.proposed_move_slots_ = proposed_move_slots;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.proposed_move_slots)
}

// .communicator.Slot_Move slot_move = 11;
bool Set::has_slot_move() const {
  return payload_case() == kSlotMove;
}
void Set::set_has_slot_move() {
  _oneof_case_[0] = kSlotMove;
}
void Set::clear_slot_move() {
  if (has_slot_move()) {
    delete payload_.slot_move_;
    clear_has_payload();
  }
}
 const ::communicator::Slot_Move& Set::slot_move() const {
  // @@protoc_insertion_point(field_get:communicator.Set.slot_move)
  return has_slot_move()
      ? *payload_.slot_move_
      : ::communicator::Slot_Move::default_instance();
}
::communicator::Slot_Move* Set::mutable_slot_move() {
  if (!has_slot_move()) {
    clear_payload();
    set_has_slot_move();
    payload_.slot_move_ = new ::communicator::Slot_Move;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Set.slot_move)
  return payload_.slot_move_;
}
::communicator::Slot_Move* Set::release_slot_move() {
  // @@protoc_insertion_point(field_release:communicator.Set.slot_move)
  if (has_slot_move()) {
    clear_has_payload();
    ::communicator::Slot_Move* temp = payload_.slot_move_;
    payload_.slot_move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Set::set_allocated_slot_move(::communicator::Slot_Move* slot_move) {
  clear_payload();
  if (slot_move) {
    set_has_slot_move();
    payload_.slot_move_ = slot_move;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Set.slot_move)
}

bool Set::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Set::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Set::PayloadCase Set::payload_case() const {
  return Set::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Set_r::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Set_r::Set_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Set_r)
}
Set_r::Set_r(const Set_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:communicator.Set_r)
}

void Set_r::SharedCtor() {
  result_ = 0;
  _cached_size_ = 0;
}

Set_r::~Set_r() {
  // @@protoc_insertion_point(destructor:communicator.Set_r)
  SharedDtor();
}

void Set_r::SharedDtor() {
}

void Set_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Set_r::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Set_r& Set_r::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Set_r* Set_r::New(::google::protobuf::Arena* arena) const {
  Set_r* n = new Set_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Set_r::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Set_r)
  result_ = 0;
}

bool Set_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Set_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.TRANSACTION_RESULT result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::communicator::TRANSACTION_RESULT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Set_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Set_r)
  return false;
#undef DO_
}

void Set_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Set_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Set_r)
}

::google::protobuf::uint8* Set_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Set_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Set_r)
  return target;
}

size_t Set_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Set_r)
  size_t total_size = 0;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Set_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Set_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Set_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Set_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Set_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Set_r)
    MergeFrom(*source);
  }
}

void Set_r::MergeFrom(const Set_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Set_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Set_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Set_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Set_r::CopyFrom(const Set_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Set_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Set_r::IsInitialized() const {
  return true;
}

void Set_r::Swap(Set_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Set_r::InternalSwap(Set_r* other) {
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Set_r::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Set_r

// .communicator.TRANSACTION_RESULT result = 1;
void Set_r::clear_result() {
  result_ = 0;
}
::communicator::TRANSACTION_RESULT Set_r::result() const {
  // @@protoc_insertion_point(field_get:communicator.Set_r.result)
  return static_cast< ::communicator::TRANSACTION_RESULT >(result_);
}
void Set_r::set_result(::communicator::TRANSACTION_RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:communicator.Set_r.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Send::kAppDataFieldNumber;
const int Send::kBasicCtrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Send::Send()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Send)
}
Send::Send(const Send& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app_data()) {
    app_data_ = new ::communicator::Application_data(*from.app_data_);
  } else {
    app_data_ = NULL;
  }
  if (from.has_basic_ctrl()) {
    basic_ctrl_ = new ::communicator::Basic_ctrl(*from.basic_ctrl_);
  } else {
    basic_ctrl_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Send)
}

void Send::SharedCtor() {
  ::memset(&app_data_, 0, reinterpret_cast<char*>(&basic_ctrl_) -
    reinterpret_cast<char*>(&app_data_) + sizeof(basic_ctrl_));
  _cached_size_ = 0;
}

Send::~Send() {
  // @@protoc_insertion_point(destructor:communicator.Send)
  SharedDtor();
}

void Send::SharedDtor() {
  if (this != internal_default_instance()) {
    delete app_data_;
  }
  if (this != internal_default_instance()) {
    delete basic_ctrl_;
  }
}

void Send::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Send::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Send& Send::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Send* Send::New(::google::protobuf::Arena* arena) const {
  Send* n = new Send;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Send::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Send)
  if (GetArenaNoVirtual() == NULL && app_data_ != NULL) {
    delete app_data_;
  }
  app_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && basic_ctrl_ != NULL) {
    delete basic_ctrl_;
  }
  basic_ctrl_ = NULL;
}

bool Send::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Send)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Application_data app_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Basic_ctrl basic_ctrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_ctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Send)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Send)
  return false;
#undef DO_
}

void Send::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Application_data app_data = 1;
  if (this->has_app_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->app_data_, output);
  }

  // .communicator.Basic_ctrl basic_ctrl = 2;
  if (this->has_basic_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basic_ctrl_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Send)
}

::google::protobuf::uint8* Send::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Send)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Application_data app_data = 1;
  if (this->has_app_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->app_data_, deterministic, target);
  }

  // .communicator.Basic_ctrl basic_ctrl = 2;
  if (this->has_basic_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->basic_ctrl_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Send)
  return target;
}

size_t Send::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Send)
  size_t total_size = 0;

  // .communicator.Application_data app_data = 1;
  if (this->has_app_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->app_data_);
  }

  // .communicator.Basic_ctrl basic_ctrl = 2;
  if (this->has_basic_ctrl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_ctrl_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Send::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Send)
  GOOGLE_DCHECK_NE(&from, this);
  const Send* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Send>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Send)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Send)
    MergeFrom(*source);
  }
}

void Send::MergeFrom(const Send& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Send)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_app_data()) {
    mutable_app_data()->::communicator::Application_data::MergeFrom(from.app_data());
  }
  if (from.has_basic_ctrl()) {
    mutable_basic_ctrl()->::communicator::Basic_ctrl::MergeFrom(from.basic_ctrl());
  }
}

void Send::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Send::CopyFrom(const Send& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Send)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Send::IsInitialized() const {
  return true;
}

void Send::Swap(Send* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Send::InternalSwap(Send* other) {
  std::swap(app_data_, other->app_data_);
  std::swap(basic_ctrl_, other->basic_ctrl_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Send::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Send

// .communicator.Application_data app_data = 1;
bool Send::has_app_data() const {
  return this != internal_default_instance() && app_data_ != NULL;
}
void Send::clear_app_data() {
  if (GetArenaNoVirtual() == NULL && app_data_ != NULL) delete app_data_;
  app_data_ = NULL;
}
const ::communicator::Application_data& Send::app_data() const {
  // @@protoc_insertion_point(field_get:communicator.Send.app_data)
  return app_data_ != NULL ? *app_data_
                         : *::communicator::Application_data::internal_default_instance();
}
::communicator::Application_data* Send::mutable_app_data() {
  
  if (app_data_ == NULL) {
    app_data_ = new ::communicator::Application_data;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Send.app_data)
  return app_data_;
}
::communicator::Application_data* Send::release_app_data() {
  // @@protoc_insertion_point(field_release:communicator.Send.app_data)
  
  ::communicator::Application_data* temp = app_data_;
  app_data_ = NULL;
  return temp;
}
void Send::set_allocated_app_data(::communicator::Application_data* app_data) {
  delete app_data_;
  app_data_ = app_data;
  if (app_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Send.app_data)
}

// .communicator.Basic_ctrl basic_ctrl = 2;
bool Send::has_basic_ctrl() const {
  return this != internal_default_instance() && basic_ctrl_ != NULL;
}
void Send::clear_basic_ctrl() {
  if (GetArenaNoVirtual() == NULL && basic_ctrl_ != NULL) delete basic_ctrl_;
  basic_ctrl_ = NULL;
}
const ::communicator::Basic_ctrl& Send::basic_ctrl() const {
  // @@protoc_insertion_point(field_get:communicator.Send.basic_ctrl)
  return basic_ctrl_ != NULL ? *basic_ctrl_
                         : *::communicator::Basic_ctrl::internal_default_instance();
}
::communicator::Basic_ctrl* Send::mutable_basic_ctrl() {
  
  if (basic_ctrl_ == NULL) {
    basic_ctrl_ = new ::communicator::Basic_ctrl;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Send.basic_ctrl)
  return basic_ctrl_;
}
::communicator::Basic_ctrl* Send::release_basic_ctrl() {
  // @@protoc_insertion_point(field_release:communicator.Send.basic_ctrl)
  
  ::communicator::Basic_ctrl* temp = basic_ctrl_;
  basic_ctrl_ = NULL;
  return temp;
}
void Send::set_allocated_basic_ctrl(::communicator::Basic_ctrl* basic_ctrl) {
  delete basic_ctrl_;
  basic_ctrl_ = basic_ctrl;
  if (basic_ctrl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Send.basic_ctrl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Send_r::kResultFieldNumber;
const int Send_r::kPhyStatFieldNumber;
const int Send_r::kMacResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Send_r::Send_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Send_r)
}
Send_r::Send_r(const Send_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kPhyStat: {
      mutable_phy_stat()->::communicator::Phy_stat::MergeFrom(from.phy_stat());
      break;
    }
    case kMacResult: {
      mutable_mac_result()->::communicator::Mac_stat::MergeFrom(from.mac_result());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Send_r)
}

void Send_r::SharedCtor() {
  result_ = 0;
  clear_has_payload();
  _cached_size_ = 0;
}

Send_r::~Send_r() {
  // @@protoc_insertion_point(destructor:communicator.Send_r)
  SharedDtor();
}

void Send_r::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Send_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Send_r::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Send_r& Send_r::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Send_r* Send_r::New(::google::protobuf::Arena* arena) const {
  Send_r* n = new Send_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Send_r::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Send_r)
  switch (payload_case()) {
    case kPhyStat: {
      delete payload_.phy_stat_;
      break;
    }
    case kMacResult: {
      delete payload_.mac_result_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Send_r::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Send_r)
  result_ = 0;
  clear_payload();
}

bool Send_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Send_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.TRANSACTION_RESULT result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::communicator::TRANSACTION_RESULT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_stat phy_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phy_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_stat mac_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mac_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Send_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Send_r)
  return false;
#undef DO_
}

void Send_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Send_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // .communicator.Phy_stat phy_stat = 2;
  if (has_phy_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.phy_stat_, output);
  }

  // .communicator.Mac_stat mac_result = 3;
  if (has_mac_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.mac_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Send_r)
}

::google::protobuf::uint8* Send_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Send_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // .communicator.Phy_stat phy_stat = 2;
  if (has_phy_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.phy_stat_, deterministic, target);
  }

  // .communicator.Mac_stat mac_result = 3;
  if (has_mac_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.mac_result_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Send_r)
  return target;
}

size_t Send_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Send_r)
  size_t total_size = 0;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  switch (payload_case()) {
    // .communicator.Phy_stat phy_stat = 2;
    case kPhyStat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.phy_stat_);
      break;
    }
    // .communicator.Mac_stat mac_result = 3;
    case kMacResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.mac_result_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Send_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Send_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Send_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Send_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Send_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Send_r)
    MergeFrom(*source);
  }
}

void Send_r::MergeFrom(const Send_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Send_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  switch (from.payload_case()) {
    case kPhyStat: {
      mutable_phy_stat()->::communicator::Phy_stat::MergeFrom(from.phy_stat());
      break;
    }
    case kMacResult: {
      mutable_mac_result()->::communicator::Mac_stat::MergeFrom(from.mac_result());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Send_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Send_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Send_r::CopyFrom(const Send_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Send_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Send_r::IsInitialized() const {
  return true;
}

void Send_r::Swap(Send_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Send_r::InternalSwap(Send_r* other) {
  std::swap(result_, other->result_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Send_r::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Send_r

// .communicator.TRANSACTION_RESULT result = 1;
void Send_r::clear_result() {
  result_ = 0;
}
::communicator::TRANSACTION_RESULT Send_r::result() const {
  // @@protoc_insertion_point(field_get:communicator.Send_r.result)
  return static_cast< ::communicator::TRANSACTION_RESULT >(result_);
}
void Send_r::set_result(::communicator::TRANSACTION_RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:communicator.Send_r.result)
}

// .communicator.Phy_stat phy_stat = 2;
bool Send_r::has_phy_stat() const {
  return payload_case() == kPhyStat;
}
void Send_r::set_has_phy_stat() {
  _oneof_case_[0] = kPhyStat;
}
void Send_r::clear_phy_stat() {
  if (has_phy_stat()) {
    delete payload_.phy_stat_;
    clear_has_payload();
  }
}
 const ::communicator::Phy_stat& Send_r::phy_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Send_r.phy_stat)
  return has_phy_stat()
      ? *payload_.phy_stat_
      : ::communicator::Phy_stat::default_instance();
}
::communicator::Phy_stat* Send_r::mutable_phy_stat() {
  if (!has_phy_stat()) {
    clear_payload();
    set_has_phy_stat();
    payload_.phy_stat_ = new ::communicator::Phy_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Send_r.phy_stat)
  return payload_.phy_stat_;
}
::communicator::Phy_stat* Send_r::release_phy_stat() {
  // @@protoc_insertion_point(field_release:communicator.Send_r.phy_stat)
  if (has_phy_stat()) {
    clear_has_payload();
    ::communicator::Phy_stat* temp = payload_.phy_stat_;
    payload_.phy_stat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Send_r::set_allocated_phy_stat(::communicator::Phy_stat* phy_stat) {
  clear_payload();
  if (phy_stat) {
    set_has_phy_stat();
    payload_.phy_stat_ = phy_stat;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Send_r.phy_stat)
}

// .communicator.Mac_stat mac_result = 3;
bool Send_r::has_mac_result() const {
  return payload_case() == kMacResult;
}
void Send_r::set_has_mac_result() {
  _oneof_case_[0] = kMacResult;
}
void Send_r::clear_mac_result() {
  if (has_mac_result()) {
    delete payload_.mac_result_;
    clear_has_payload();
  }
}
 const ::communicator::Mac_stat& Send_r::mac_result() const {
  // @@protoc_insertion_point(field_get:communicator.Send_r.mac_result)
  return has_mac_result()
      ? *payload_.mac_result_
      : ::communicator::Mac_stat::default_instance();
}
::communicator::Mac_stat* Send_r::mutable_mac_result() {
  if (!has_mac_result()) {
    clear_payload();
    set_has_mac_result();
    payload_.mac_result_ = new ::communicator::Mac_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Send_r.mac_result)
  return payload_.mac_result_;
}
::communicator::Mac_stat* Send_r::release_mac_result() {
  // @@protoc_insertion_point(field_release:communicator.Send_r.mac_result)
  if (has_mac_result()) {
    clear_has_payload();
    ::communicator::Mac_stat* temp = payload_.mac_result_;
    payload_.mac_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Send_r::set_allocated_mac_result(::communicator::Mac_stat* mac_result) {
  clear_payload();
  if (mac_result) {
    set_has_mac_result();
    payload_.mac_result_ = mac_result;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Send_r.mac_result)
}

bool Send_r::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Send_r::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Send_r::PayloadCase Send_r::payload_case() const {
  return Send_r::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Receive::kBasicCtrlFieldNumber;
const int Receive::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Receive::Receive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Receive)
}
Receive::Receive(const Receive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kBasicCtrl: {
      mutable_basic_ctrl()->::communicator::Basic_ctrl::MergeFrom(from.basic_ctrl());
      break;
    }
    case kData: {
      set_data(from.data());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Receive)
}

void Receive::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

Receive::~Receive() {
  // @@protoc_insertion_point(destructor:communicator.Receive)
  SharedDtor();
}

void Receive::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Receive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Receive::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Receive& Receive::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Receive* Receive::New(::google::protobuf::Arena* arena) const {
  Receive* n = new Receive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Receive::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Receive)
  switch (payload_case()) {
    case kBasicCtrl: {
      delete payload_.basic_ctrl_;
      break;
    }
    case kData: {
      payload_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Receive::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Receive)
  clear_payload();
}

bool Receive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Receive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.Basic_ctrl basic_ctrl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_ctrl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Receive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Receive)
  return false;
#undef DO_
}

void Receive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Receive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Basic_ctrl basic_ctrl = 1;
  if (has_basic_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.basic_ctrl_, output);
  }

  // bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Receive)
}

::google::protobuf::uint8* Receive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Receive)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.Basic_ctrl basic_ctrl = 1;
  if (has_basic_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.basic_ctrl_, deterministic, target);
  }

  // bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Receive)
  return target;
}

size_t Receive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Receive)
  size_t total_size = 0;

  switch (payload_case()) {
    // .communicator.Basic_ctrl basic_ctrl = 1;
    case kBasicCtrl: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.basic_ctrl_);
      break;
    }
    // bytes data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Receive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Receive)
  GOOGLE_DCHECK_NE(&from, this);
  const Receive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Receive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Receive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Receive)
    MergeFrom(*source);
  }
}

void Receive::MergeFrom(const Receive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Receive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kBasicCtrl: {
      mutable_basic_ctrl()->::communicator::Basic_ctrl::MergeFrom(from.basic_ctrl());
      break;
    }
    case kData: {
      set_data(from.data());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Receive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Receive::CopyFrom(const Receive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Receive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Receive::IsInitialized() const {
  return true;
}

void Receive::Swap(Receive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Receive::InternalSwap(Receive* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Receive::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Receive

// .communicator.Basic_ctrl basic_ctrl = 1;
bool Receive::has_basic_ctrl() const {
  return payload_case() == kBasicCtrl;
}
void Receive::set_has_basic_ctrl() {
  _oneof_case_[0] = kBasicCtrl;
}
void Receive::clear_basic_ctrl() {
  if (has_basic_ctrl()) {
    delete payload_.basic_ctrl_;
    clear_has_payload();
  }
}
 const ::communicator::Basic_ctrl& Receive::basic_ctrl() const {
  // @@protoc_insertion_point(field_get:communicator.Receive.basic_ctrl)
  return has_basic_ctrl()
      ? *payload_.basic_ctrl_
      : ::communicator::Basic_ctrl::default_instance();
}
::communicator::Basic_ctrl* Receive::mutable_basic_ctrl() {
  if (!has_basic_ctrl()) {
    clear_payload();
    set_has_basic_ctrl();
    payload_.basic_ctrl_ = new ::communicator::Basic_ctrl;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Receive.basic_ctrl)
  return payload_.basic_ctrl_;
}
::communicator::Basic_ctrl* Receive::release_basic_ctrl() {
  // @@protoc_insertion_point(field_release:communicator.Receive.basic_ctrl)
  if (has_basic_ctrl()) {
    clear_has_payload();
    ::communicator::Basic_ctrl* temp = payload_.basic_ctrl_;
    payload_.basic_ctrl_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Receive::set_allocated_basic_ctrl(::communicator::Basic_ctrl* basic_ctrl) {
  clear_payload();
  if (basic_ctrl) {
    set_has_basic_ctrl();
    payload_.basic_ctrl_ = basic_ctrl;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Receive.basic_ctrl)
}

// bytes data = 2;
bool Receive::has_data() const {
  return payload_case() == kData;
}
void Receive::set_has_data() {
  _oneof_case_[0] = kData;
}
void Receive::clear_data() {
  if (has_data()) {
    payload_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
const ::std::string& Receive::data() const {
  // @@protoc_insertion_point(field_get:communicator.Receive.data)
  if (has_data()) {
    return payload_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Receive::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:communicator.Receive.data)
  if (!has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communicator.Receive.data)
}
#if LANG_CXX11
void Receive::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:communicator.Receive.data)
  if (!has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communicator.Receive.data)
}
#endif
void Receive::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communicator.Receive.data)
}
void Receive::set_data(const void* value, size_t size) {
  if (!has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  payload_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communicator.Receive.data)
}
::std::string* Receive::mutable_data() {
  if (!has_data()) {
    clear_payload();
    set_has_data();
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:communicator.Receive.data)
  return payload_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Receive::release_data() {
  // @@protoc_insertion_point(field_release:communicator.Receive.data)
  if (has_data()) {
    clear_has_payload();
    return payload_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Receive::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    payload_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_payload();
  if (data != NULL) {
    set_has_data();
    payload_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Receive.data)
}

bool Receive::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Receive::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Receive::PayloadCase Receive::payload_case() const {
  return Receive::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Receive_r::kResultFieldNumber;
const int Receive_r::kDataFieldNumber;
const int Receive_r::kStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Receive_r::Receive_r()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Receive_r)
}
Receive_r::Receive_r(const Receive_r& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_stat()) {
    stat_ = new ::communicator::Phy_stat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:communicator.Receive_r)
}

void Receive_r::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stat_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&stat_) + sizeof(result_));
  _cached_size_ = 0;
}

Receive_r::~Receive_r() {
  // @@protoc_insertion_point(destructor:communicator.Receive_r)
  SharedDtor();
}

void Receive_r::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stat_;
  }
}

void Receive_r::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Receive_r::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Receive_r& Receive_r::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Receive_r* Receive_r::New(::google::protobuf::Arena* arena) const {
  Receive_r* n = new Receive_r;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Receive_r::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Receive_r)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stat_ != NULL) {
    delete stat_;
  }
  stat_ = NULL;
  result_ = 0;
}

bool Receive_r::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Receive_r)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .communicator.TRANSACTION_RESULT result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::communicator::TRANSACTION_RESULT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_stat stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Receive_r)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Receive_r)
  return false;
#undef DO_
}

void Receive_r::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Receive_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // .communicator.Phy_stat stat = 3;
  if (this->has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Receive_r)
}

::google::protobuf::uint8* Receive_r::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Receive_r)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // .communicator.Phy_stat stat = 3;
  if (this->has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stat_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Receive_r)
  return target;
}

size_t Receive_r::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Receive_r)
  size_t total_size = 0;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .communicator.Phy_stat stat = 3;
  if (this->has_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stat_);
  }

  // .communicator.TRANSACTION_RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Receive_r::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Receive_r)
  GOOGLE_DCHECK_NE(&from, this);
  const Receive_r* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Receive_r>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Receive_r)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Receive_r)
    MergeFrom(*source);
  }
}

void Receive_r::MergeFrom(const Receive_r& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Receive_r)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_stat()) {
    mutable_stat()->::communicator::Phy_stat::MergeFrom(from.stat());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void Receive_r::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Receive_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Receive_r::CopyFrom(const Receive_r& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Receive_r)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Receive_r::IsInitialized() const {
  return true;
}

void Receive_r::Swap(Receive_r* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Receive_r::InternalSwap(Receive_r* other) {
  data_.Swap(&other->data_);
  std::swap(stat_, other->stat_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Receive_r::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Receive_r

// .communicator.TRANSACTION_RESULT result = 1;
void Receive_r::clear_result() {
  result_ = 0;
}
::communicator::TRANSACTION_RESULT Receive_r::result() const {
  // @@protoc_insertion_point(field_get:communicator.Receive_r.result)
  return static_cast< ::communicator::TRANSACTION_RESULT >(result_);
}
void Receive_r::set_result(::communicator::TRANSACTION_RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:communicator.Receive_r.result)
}

// bytes data = 2;
void Receive_r::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Receive_r::data() const {
  // @@protoc_insertion_point(field_get:communicator.Receive_r.data)
  return data_.GetNoArena();
}
void Receive_r::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:communicator.Receive_r.data)
}
#if LANG_CXX11
void Receive_r::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:communicator.Receive_r.data)
}
#endif
void Receive_r::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:communicator.Receive_r.data)
}
void Receive_r::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:communicator.Receive_r.data)
}
::std::string* Receive_r::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:communicator.Receive_r.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Receive_r::release_data() {
  // @@protoc_insertion_point(field_release:communicator.Receive_r.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Receive_r::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:communicator.Receive_r.data)
}

// .communicator.Phy_stat stat = 3;
bool Receive_r::has_stat() const {
  return this != internal_default_instance() && stat_ != NULL;
}
void Receive_r::clear_stat() {
  if (GetArenaNoVirtual() == NULL && stat_ != NULL) delete stat_;
  stat_ = NULL;
}
const ::communicator::Phy_stat& Receive_r::stat() const {
  // @@protoc_insertion_point(field_get:communicator.Receive_r.stat)
  return stat_ != NULL ? *stat_
                         : *::communicator::Phy_stat::internal_default_instance();
}
::communicator::Phy_stat* Receive_r::mutable_stat() {
  
  if (stat_ == NULL) {
    stat_ = new ::communicator::Phy_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Receive_r.stat)
  return stat_;
}
::communicator::Phy_stat* Receive_r::release_stat() {
  // @@protoc_insertion_point(field_release:communicator.Receive_r.stat)
  
  ::communicator::Phy_stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void Receive_r::set_allocated_stat(::communicator::Phy_stat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Receive_r.stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stats::kMacAddressFieldNumber;
const int Stats::kPhyStatFieldNumber;
const int Stats::kMacStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stats::Stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Stats)
}
Stats::Stats(const Stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phy_stat()) {
    phy_stat_ = new ::communicator::Phy_stat(*from.phy_stat_);
  } else {
    phy_stat_ = NULL;
  }
  if (from.has_mac_stat()) {
    mac_stat_ = new ::communicator::Mac_stat(*from.mac_stat_);
  } else {
    mac_stat_ = NULL;
  }
  mac_address_ = from.mac_address_;
  // @@protoc_insertion_point(copy_constructor:communicator.Stats)
}

void Stats::SharedCtor() {
  ::memset(&phy_stat_, 0, reinterpret_cast<char*>(&mac_address_) -
    reinterpret_cast<char*>(&phy_stat_) + sizeof(mac_address_));
  _cached_size_ = 0;
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:communicator.Stats)
  SharedDtor();
}

void Stats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete phy_stat_;
  }
  if (this != internal_default_instance()) {
    delete mac_stat_;
  }
}

void Stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stats::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stats& Stats::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stats* Stats::New(::google::protobuf::Arena* arena) const {
  Stats* n = new Stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Stats)
  if (GetArenaNoVirtual() == NULL && phy_stat_ != NULL) {
    delete phy_stat_;
  }
  phy_stat_ = NULL;
  if (GetArenaNoVirtual() == NULL && mac_stat_ != NULL) {
    delete mac_stat_;
  }
  mac_stat_ = NULL;
  mac_address_ = GOOGLE_ULONGLONG(0);
}

bool Stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 mac_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Phy_stat phy_stat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phy_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Mac_stat mac_stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mac_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Stats)
  return false;
#undef DO_
}

void Stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac_address = 1;
  if (this->mac_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac_address(), output);
  }

  // .communicator.Phy_stat phy_stat = 2;
  if (this->has_phy_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->phy_stat_, output);
  }

  // .communicator.Mac_stat mac_stat = 3;
  if (this->has_mac_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mac_stat_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Stats)
}

::google::protobuf::uint8* Stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mac_address = 1;
  if (this->mac_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac_address(), target);
  }

  // .communicator.Phy_stat phy_stat = 2;
  if (this->has_phy_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->phy_stat_, deterministic, target);
  }

  // .communicator.Mac_stat mac_stat = 3;
  if (this->has_mac_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->mac_stat_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Stats)
  size_t total_size = 0;

  // .communicator.Phy_stat phy_stat = 2;
  if (this->has_phy_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->phy_stat_);
  }

  // .communicator.Mac_stat mac_stat = 3;
  if (this->has_mac_stat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mac_stat_);
  }

  // uint64 mac_address = 1;
  if (this->mac_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac_address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phy_stat()) {
    mutable_phy_stat()->::communicator::Phy_stat::MergeFrom(from.phy_stat());
  }
  if (from.has_mac_stat()) {
    mutable_mac_stat()->::communicator::Mac_stat::MergeFrom(from.mac_stat());
  }
  if (from.mac_address() != 0) {
    set_mac_address(from.mac_address());
  }
}

void Stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::Swap(Stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stats::InternalSwap(Stats* other) {
  std::swap(phy_stat_, other->phy_stat_);
  std::swap(mac_stat_, other->mac_stat_);
  std::swap(mac_address_, other->mac_address_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stats

// uint64 mac_address = 1;
void Stats::clear_mac_address() {
  mac_address_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Stats::mac_address() const {
  // @@protoc_insertion_point(field_get:communicator.Stats.mac_address)
  return mac_address_;
}
void Stats::set_mac_address(::google::protobuf::uint64 value) {
  
  mac_address_ = value;
  // @@protoc_insertion_point(field_set:communicator.Stats.mac_address)
}

// .communicator.Phy_stat phy_stat = 2;
bool Stats::has_phy_stat() const {
  return this != internal_default_instance() && phy_stat_ != NULL;
}
void Stats::clear_phy_stat() {
  if (GetArenaNoVirtual() == NULL && phy_stat_ != NULL) delete phy_stat_;
  phy_stat_ = NULL;
}
const ::communicator::Phy_stat& Stats::phy_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Stats.phy_stat)
  return phy_stat_ != NULL ? *phy_stat_
                         : *::communicator::Phy_stat::internal_default_instance();
}
::communicator::Phy_stat* Stats::mutable_phy_stat() {
  
  if (phy_stat_ == NULL) {
    phy_stat_ = new ::communicator::Phy_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Stats.phy_stat)
  return phy_stat_;
}
::communicator::Phy_stat* Stats::release_phy_stat() {
  // @@protoc_insertion_point(field_release:communicator.Stats.phy_stat)
  
  ::communicator::Phy_stat* temp = phy_stat_;
  phy_stat_ = NULL;
  return temp;
}
void Stats::set_allocated_phy_stat(::communicator::Phy_stat* phy_stat) {
  delete phy_stat_;
  phy_stat_ = phy_stat;
  if (phy_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Stats.phy_stat)
}

// .communicator.Mac_stat mac_stat = 3;
bool Stats::has_mac_stat() const {
  return this != internal_default_instance() && mac_stat_ != NULL;
}
void Stats::clear_mac_stat() {
  if (GetArenaNoVirtual() == NULL && mac_stat_ != NULL) delete mac_stat_;
  mac_stat_ = NULL;
}
const ::communicator::Mac_stat& Stats::mac_stat() const {
  // @@protoc_insertion_point(field_get:communicator.Stats.mac_stat)
  return mac_stat_ != NULL ? *mac_stat_
                         : *::communicator::Mac_stat::internal_default_instance();
}
::communicator::Mac_stat* Stats::mutable_mac_stat() {
  
  if (mac_stat_ == NULL) {
    mac_stat_ = new ::communicator::Mac_stat;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Stats.mac_stat)
  return mac_stat_;
}
::communicator::Mac_stat* Stats::release_mac_stat() {
  // @@protoc_insertion_point(field_release:communicator.Stats.mac_stat)
  
  ::communicator::Mac_stat* temp = mac_stat_;
  mac_stat_ = NULL;
  return temp;
}
void Stats::set_allocated_mac_stat(::communicator::Mac_stat* mac_stat) {
  delete mac_stat_;
  mac_stat_ = mac_stat;
  if (mac_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Stats.mac_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Internal::kTransactionIndexFieldNumber;
const int Internal::kOwnerModuleFieldNumber;
const int Internal::kGetFieldNumber;
const int Internal::kGetrFieldNumber;
const int Internal::kSetFieldNumber;
const int Internal::kSetrFieldNumber;
const int Internal::kSendFieldNumber;
const int Internal::kSendrFieldNumber;
const int Internal::kReceiveFieldNumber;
const int Internal::kReceiverFieldNumber;
const int Internal::kStatsFieldNumber;
const int Internal::kExternalAImessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Internal::Internal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:communicator.Internal)
}
Internal::Internal(const Internal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_index_, &from.transaction_index_,
    reinterpret_cast<char*>(&owner_module_) -
    reinterpret_cast<char*>(&transaction_index_) + sizeof(owner_module_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kGet: {
      mutable_get()->::communicator::Get::MergeFrom(from.get());
      break;
    }
    case kGetr: {
      mutable_getr()->::communicator::Get_r::MergeFrom(from.getr());
      break;
    }
    case kSet: {
      mutable_set()->::communicator::Set::MergeFrom(from.set());
      break;
    }
    case kSetr: {
      mutable_setr()->::communicator::Set_r::MergeFrom(from.setr());
      break;
    }
    case kSend: {
      mutable_send()->::communicator::Send::MergeFrom(from.send());
      break;
    }
    case kSendr: {
      mutable_sendr()->::communicator::Send_r::MergeFrom(from.sendr());
      break;
    }
    case kReceive: {
      mutable_receive()->::communicator::Receive::MergeFrom(from.receive());
      break;
    }
    case kReceiver: {
      mutable_receiver()->::communicator::Receive_r::MergeFrom(from.receiver());
      break;
    }
    case kStats: {
      mutable_stats()->::communicator::Stats::MergeFrom(from.stats());
      break;
    }
    case kExternalAImessage: {
      mutable_externalaimessage()->::aiCommunicator::InternalAI::MergeFrom(from.externalaimessage());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:communicator.Internal)
}

void Internal::SharedCtor() {
  ::memset(&transaction_index_, 0, reinterpret_cast<char*>(&owner_module_) -
    reinterpret_cast<char*>(&transaction_index_) + sizeof(owner_module_));
  clear_has_payload();
  _cached_size_ = 0;
}

Internal::~Internal() {
  // @@protoc_insertion_point(destructor:communicator.Internal)
  SharedDtor();
}

void Internal::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Internal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Internal::descriptor() {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Internal& Internal::default_instance() {
  protobuf_interf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Internal* Internal::New(::google::protobuf::Arena* arena) const {
  Internal* n = new Internal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Internal::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:communicator.Internal)
  switch (payload_case()) {
    case kGet: {
      delete payload_.get_;
      break;
    }
    case kGetr: {
      delete payload_.getr_;
      break;
    }
    case kSet: {
      delete payload_.set_;
      break;
    }
    case kSetr: {
      delete payload_.setr_;
      break;
    }
    case kSend: {
      delete payload_.send_;
      break;
    }
    case kSendr: {
      delete payload_.sendr_;
      break;
    }
    case kReceive: {
      delete payload_.receive_;
      break;
    }
    case kReceiver: {
      delete payload_.receiver_;
      break;
    }
    case kStats: {
      delete payload_.stats_;
      break;
    }
    case kExternalAImessage: {
      delete payload_.externalaimessage_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Internal::Clear() {
// @@protoc_insertion_point(message_clear_start:communicator.Internal)
  ::memset(&transaction_index_, 0, reinterpret_cast<char*>(&owner_module_) -
    reinterpret_cast<char*>(&transaction_index_) + sizeof(owner_module_));
  clear_payload();
}

bool Internal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:communicator.Internal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 transaction_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.MODULE owner_module = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_owner_module(static_cast< ::communicator::MODULE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Get get = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Get_r getr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Set set = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Set_r setr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Send send = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Send_r sendr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Receive receive = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Receive_r receiver = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .communicator.Stats stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.InternalAI externalAImessage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_externalaimessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:communicator.Internal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:communicator.Internal)
  return false;
#undef DO_
}

void Internal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:communicator.Internal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transaction_index = 1;
  if (this->transaction_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->transaction_index(), output);
  }

  // .communicator.MODULE owner_module = 2;
  if (this->owner_module() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->owner_module(), output);
  }

  // .communicator.Get get = 3;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.get_, output);
  }

  // .communicator.Get_r getr = 4;
  if (has_getr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.getr_, output);
  }

  // .communicator.Set set = 5;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.set_, output);
  }

  // .communicator.Set_r setr = 6;
  if (has_setr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.setr_, output);
  }

  // .communicator.Send send = 7;
  if (has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.send_, output);
  }

  // .communicator.Send_r sendr = 8;
  if (has_sendr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *payload_.sendr_, output);
  }

  // .communicator.Receive receive = 9;
  if (has_receive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.receive_, output);
  }

  // .communicator.Receive_r receiver = 10;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.receiver_, output);
  }

  // .communicator.Stats stats = 11;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.stats_, output);
  }

  // .aiCommunicator.InternalAI externalAImessage = 12;
  if (has_externalaimessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *payload_.externalaimessage_, output);
  }

  // @@protoc_insertion_point(serialize_end:communicator.Internal)
}

::google::protobuf::uint8* Internal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:communicator.Internal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transaction_index = 1;
  if (this->transaction_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction_index(), target);
  }

  // .communicator.MODULE owner_module = 2;
  if (this->owner_module() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->owner_module(), target);
  }

  // .communicator.Get get = 3;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.get_, deterministic, target);
  }

  // .communicator.Get_r getr = 4;
  if (has_getr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.getr_, deterministic, target);
  }

  // .communicator.Set set = 5;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.set_, deterministic, target);
  }

  // .communicator.Set_r setr = 6;
  if (has_setr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.setr_, deterministic, target);
  }

  // .communicator.Send send = 7;
  if (has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.send_, deterministic, target);
  }

  // .communicator.Send_r sendr = 8;
  if (has_sendr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *payload_.sendr_, deterministic, target);
  }

  // .communicator.Receive receive = 9;
  if (has_receive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *payload_.receive_, deterministic, target);
  }

  // .communicator.Receive_r receiver = 10;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *payload_.receiver_, deterministic, target);
  }

  // .communicator.Stats stats = 11;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *payload_.stats_, deterministic, target);
  }

  // .aiCommunicator.InternalAI externalAImessage = 12;
  if (has_externalaimessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *payload_.externalaimessage_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:communicator.Internal)
  return target;
}

size_t Internal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:communicator.Internal)
  size_t total_size = 0;

  // uint64 transaction_index = 1;
  if (this->transaction_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->transaction_index());
  }

  // .communicator.MODULE owner_module = 2;
  if (this->owner_module() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->owner_module());
  }

  switch (payload_case()) {
    // .communicator.Get get = 3;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.get_);
      break;
    }
    // .communicator.Get_r getr = 4;
    case kGetr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.getr_);
      break;
    }
    // .communicator.Set set = 5;
    case kSet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.set_);
      break;
    }
    // .communicator.Set_r setr = 6;
    case kSetr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.setr_);
      break;
    }
    // .communicator.Send send = 7;
    case kSend: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.send_);
      break;
    }
    // .communicator.Send_r sendr = 8;
    case kSendr: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.sendr_);
      break;
    }
    // .communicator.Receive receive = 9;
    case kReceive: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.receive_);
      break;
    }
    // .communicator.Receive_r receiver = 10;
    case kReceiver: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.receiver_);
      break;
    }
    // .communicator.Stats stats = 11;
    case kStats: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.stats_);
      break;
    }
    // .aiCommunicator.InternalAI externalAImessage = 12;
    case kExternalAImessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.externalaimessage_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Internal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:communicator.Internal)
  GOOGLE_DCHECK_NE(&from, this);
  const Internal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Internal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:communicator.Internal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:communicator.Internal)
    MergeFrom(*source);
  }
}

void Internal::MergeFrom(const Internal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:communicator.Internal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_index() != 0) {
    set_transaction_index(from.transaction_index());
  }
  if (from.owner_module() != 0) {
    set_owner_module(from.owner_module());
  }
  switch (from.payload_case()) {
    case kGet: {
      mutable_get()->::communicator::Get::MergeFrom(from.get());
      break;
    }
    case kGetr: {
      mutable_getr()->::communicator::Get_r::MergeFrom(from.getr());
      break;
    }
    case kSet: {
      mutable_set()->::communicator::Set::MergeFrom(from.set());
      break;
    }
    case kSetr: {
      mutable_setr()->::communicator::Set_r::MergeFrom(from.setr());
      break;
    }
    case kSend: {
      mutable_send()->::communicator::Send::MergeFrom(from.send());
      break;
    }
    case kSendr: {
      mutable_sendr()->::communicator::Send_r::MergeFrom(from.sendr());
      break;
    }
    case kReceive: {
      mutable_receive()->::communicator::Receive::MergeFrom(from.receive());
      break;
    }
    case kReceiver: {
      mutable_receiver()->::communicator::Receive_r::MergeFrom(from.receiver());
      break;
    }
    case kStats: {
      mutable_stats()->::communicator::Stats::MergeFrom(from.stats());
      break;
    }
    case kExternalAImessage: {
      mutable_externalaimessage()->::aiCommunicator::InternalAI::MergeFrom(from.externalaimessage());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Internal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:communicator.Internal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Internal::CopyFrom(const Internal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:communicator.Internal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Internal::IsInitialized() const {
  return true;
}

void Internal::Swap(Internal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Internal::InternalSwap(Internal* other) {
  std::swap(transaction_index_, other->transaction_index_);
  std::swap(owner_module_, other->owner_module_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Internal::GetMetadata() const {
  protobuf_interf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Internal

// uint64 transaction_index = 1;
void Internal::clear_transaction_index() {
  transaction_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Internal::transaction_index() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.transaction_index)
  return transaction_index_;
}
void Internal::set_transaction_index(::google::protobuf::uint64 value) {
  
  transaction_index_ = value;
  // @@protoc_insertion_point(field_set:communicator.Internal.transaction_index)
}

// .communicator.MODULE owner_module = 2;
void Internal::clear_owner_module() {
  owner_module_ = 0;
}
::communicator::MODULE Internal::owner_module() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.owner_module)
  return static_cast< ::communicator::MODULE >(owner_module_);
}
void Internal::set_owner_module(::communicator::MODULE value) {
  
  owner_module_ = value;
  // @@protoc_insertion_point(field_set:communicator.Internal.owner_module)
}

// .communicator.Get get = 3;
bool Internal::has_get() const {
  return payload_case() == kGet;
}
void Internal::set_has_get() {
  _oneof_case_[0] = kGet;
}
void Internal::clear_get() {
  if (has_get()) {
    delete payload_.get_;
    clear_has_payload();
  }
}
 const ::communicator::Get& Internal::get() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.get)
  return has_get()
      ? *payload_.get_
      : ::communicator::Get::default_instance();
}
::communicator::Get* Internal::mutable_get() {
  if (!has_get()) {
    clear_payload();
    set_has_get();
    payload_.get_ = new ::communicator::Get;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.get)
  return payload_.get_;
}
::communicator::Get* Internal::release_get() {
  // @@protoc_insertion_point(field_release:communicator.Internal.get)
  if (has_get()) {
    clear_has_payload();
    ::communicator::Get* temp = payload_.get_;
    payload_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_get(::communicator::Get* get) {
  clear_payload();
  if (get) {
    set_has_get();
    payload_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.get)
}

// .communicator.Get_r getr = 4;
bool Internal::has_getr() const {
  return payload_case() == kGetr;
}
void Internal::set_has_getr() {
  _oneof_case_[0] = kGetr;
}
void Internal::clear_getr() {
  if (has_getr()) {
    delete payload_.getr_;
    clear_has_payload();
  }
}
 const ::communicator::Get_r& Internal::getr() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.getr)
  return has_getr()
      ? *payload_.getr_
      : ::communicator::Get_r::default_instance();
}
::communicator::Get_r* Internal::mutable_getr() {
  if (!has_getr()) {
    clear_payload();
    set_has_getr();
    payload_.getr_ = new ::communicator::Get_r;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.getr)
  return payload_.getr_;
}
::communicator::Get_r* Internal::release_getr() {
  // @@protoc_insertion_point(field_release:communicator.Internal.getr)
  if (has_getr()) {
    clear_has_payload();
    ::communicator::Get_r* temp = payload_.getr_;
    payload_.getr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_getr(::communicator::Get_r* getr) {
  clear_payload();
  if (getr) {
    set_has_getr();
    payload_.getr_ = getr;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.getr)
}

// .communicator.Set set = 5;
bool Internal::has_set() const {
  return payload_case() == kSet;
}
void Internal::set_has_set() {
  _oneof_case_[0] = kSet;
}
void Internal::clear_set() {
  if (has_set()) {
    delete payload_.set_;
    clear_has_payload();
  }
}
 const ::communicator::Set& Internal::set() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.set)
  return has_set()
      ? *payload_.set_
      : ::communicator::Set::default_instance();
}
::communicator::Set* Internal::mutable_set() {
  if (!has_set()) {
    clear_payload();
    set_has_set();
    payload_.set_ = new ::communicator::Set;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.set)
  return payload_.set_;
}
::communicator::Set* Internal::release_set() {
  // @@protoc_insertion_point(field_release:communicator.Internal.set)
  if (has_set()) {
    clear_has_payload();
    ::communicator::Set* temp = payload_.set_;
    payload_.set_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_set(::communicator::Set* set) {
  clear_payload();
  if (set) {
    set_has_set();
    payload_.set_ = set;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.set)
}

// .communicator.Set_r setr = 6;
bool Internal::has_setr() const {
  return payload_case() == kSetr;
}
void Internal::set_has_setr() {
  _oneof_case_[0] = kSetr;
}
void Internal::clear_setr() {
  if (has_setr()) {
    delete payload_.setr_;
    clear_has_payload();
  }
}
 const ::communicator::Set_r& Internal::setr() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.setr)
  return has_setr()
      ? *payload_.setr_
      : ::communicator::Set_r::default_instance();
}
::communicator::Set_r* Internal::mutable_setr() {
  if (!has_setr()) {
    clear_payload();
    set_has_setr();
    payload_.setr_ = new ::communicator::Set_r;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.setr)
  return payload_.setr_;
}
::communicator::Set_r* Internal::release_setr() {
  // @@protoc_insertion_point(field_release:communicator.Internal.setr)
  if (has_setr()) {
    clear_has_payload();
    ::communicator::Set_r* temp = payload_.setr_;
    payload_.setr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_setr(::communicator::Set_r* setr) {
  clear_payload();
  if (setr) {
    set_has_setr();
    payload_.setr_ = setr;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.setr)
}

// .communicator.Send send = 7;
bool Internal::has_send() const {
  return payload_case() == kSend;
}
void Internal::set_has_send() {
  _oneof_case_[0] = kSend;
}
void Internal::clear_send() {
  if (has_send()) {
    delete payload_.send_;
    clear_has_payload();
  }
}
 const ::communicator::Send& Internal::send() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.send)
  return has_send()
      ? *payload_.send_
      : ::communicator::Send::default_instance();
}
::communicator::Send* Internal::mutable_send() {
  if (!has_send()) {
    clear_payload();
    set_has_send();
    payload_.send_ = new ::communicator::Send;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.send)
  return payload_.send_;
}
::communicator::Send* Internal::release_send() {
  // @@protoc_insertion_point(field_release:communicator.Internal.send)
  if (has_send()) {
    clear_has_payload();
    ::communicator::Send* temp = payload_.send_;
    payload_.send_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_send(::communicator::Send* send) {
  clear_payload();
  if (send) {
    set_has_send();
    payload_.send_ = send;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.send)
}

// .communicator.Send_r sendr = 8;
bool Internal::has_sendr() const {
  return payload_case() == kSendr;
}
void Internal::set_has_sendr() {
  _oneof_case_[0] = kSendr;
}
void Internal::clear_sendr() {
  if (has_sendr()) {
    delete payload_.sendr_;
    clear_has_payload();
  }
}
 const ::communicator::Send_r& Internal::sendr() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.sendr)
  return has_sendr()
      ? *payload_.sendr_
      : ::communicator::Send_r::default_instance();
}
::communicator::Send_r* Internal::mutable_sendr() {
  if (!has_sendr()) {
    clear_payload();
    set_has_sendr();
    payload_.sendr_ = new ::communicator::Send_r;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.sendr)
  return payload_.sendr_;
}
::communicator::Send_r* Internal::release_sendr() {
  // @@protoc_insertion_point(field_release:communicator.Internal.sendr)
  if (has_sendr()) {
    clear_has_payload();
    ::communicator::Send_r* temp = payload_.sendr_;
    payload_.sendr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_sendr(::communicator::Send_r* sendr) {
  clear_payload();
  if (sendr) {
    set_has_sendr();
    payload_.sendr_ = sendr;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.sendr)
}

// .communicator.Receive receive = 9;
bool Internal::has_receive() const {
  return payload_case() == kReceive;
}
void Internal::set_has_receive() {
  _oneof_case_[0] = kReceive;
}
void Internal::clear_receive() {
  if (has_receive()) {
    delete payload_.receive_;
    clear_has_payload();
  }
}
 const ::communicator::Receive& Internal::receive() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.receive)
  return has_receive()
      ? *payload_.receive_
      : ::communicator::Receive::default_instance();
}
::communicator::Receive* Internal::mutable_receive() {
  if (!has_receive()) {
    clear_payload();
    set_has_receive();
    payload_.receive_ = new ::communicator::Receive;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.receive)
  return payload_.receive_;
}
::communicator::Receive* Internal::release_receive() {
  // @@protoc_insertion_point(field_release:communicator.Internal.receive)
  if (has_receive()) {
    clear_has_payload();
    ::communicator::Receive* temp = payload_.receive_;
    payload_.receive_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_receive(::communicator::Receive* receive) {
  clear_payload();
  if (receive) {
    set_has_receive();
    payload_.receive_ = receive;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.receive)
}

// .communicator.Receive_r receiver = 10;
bool Internal::has_receiver() const {
  return payload_case() == kReceiver;
}
void Internal::set_has_receiver() {
  _oneof_case_[0] = kReceiver;
}
void Internal::clear_receiver() {
  if (has_receiver()) {
    delete payload_.receiver_;
    clear_has_payload();
  }
}
 const ::communicator::Receive_r& Internal::receiver() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.receiver)
  return has_receiver()
      ? *payload_.receiver_
      : ::communicator::Receive_r::default_instance();
}
::communicator::Receive_r* Internal::mutable_receiver() {
  if (!has_receiver()) {
    clear_payload();
    set_has_receiver();
    payload_.receiver_ = new ::communicator::Receive_r;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.receiver)
  return payload_.receiver_;
}
::communicator::Receive_r* Internal::release_receiver() {
  // @@protoc_insertion_point(field_release:communicator.Internal.receiver)
  if (has_receiver()) {
    clear_has_payload();
    ::communicator::Receive_r* temp = payload_.receiver_;
    payload_.receiver_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_receiver(::communicator::Receive_r* receiver) {
  clear_payload();
  if (receiver) {
    set_has_receiver();
    payload_.receiver_ = receiver;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.receiver)
}

// .communicator.Stats stats = 11;
bool Internal::has_stats() const {
  return payload_case() == kStats;
}
void Internal::set_has_stats() {
  _oneof_case_[0] = kStats;
}
void Internal::clear_stats() {
  if (has_stats()) {
    delete payload_.stats_;
    clear_has_payload();
  }
}
 const ::communicator::Stats& Internal::stats() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.stats)
  return has_stats()
      ? *payload_.stats_
      : ::communicator::Stats::default_instance();
}
::communicator::Stats* Internal::mutable_stats() {
  if (!has_stats()) {
    clear_payload();
    set_has_stats();
    payload_.stats_ = new ::communicator::Stats;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.stats)
  return payload_.stats_;
}
::communicator::Stats* Internal::release_stats() {
  // @@protoc_insertion_point(field_release:communicator.Internal.stats)
  if (has_stats()) {
    clear_has_payload();
    ::communicator::Stats* temp = payload_.stats_;
    payload_.stats_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_stats(::communicator::Stats* stats) {
  clear_payload();
  if (stats) {
    set_has_stats();
    payload_.stats_ = stats;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.stats)
}

// .aiCommunicator.InternalAI externalAImessage = 12;
bool Internal::has_externalaimessage() const {
  return payload_case() == kExternalAImessage;
}
void Internal::set_has_externalaimessage() {
  _oneof_case_[0] = kExternalAImessage;
}
void Internal::clear_externalaimessage() {
  if (has_externalaimessage()) {
    delete payload_.externalaimessage_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::InternalAI& Internal::externalaimessage() const {
  // @@protoc_insertion_point(field_get:communicator.Internal.externalAImessage)
  return has_externalaimessage()
      ? *payload_.externalaimessage_
      : ::aiCommunicator::InternalAI::default_instance();
}
::aiCommunicator::InternalAI* Internal::mutable_externalaimessage() {
  if (!has_externalaimessage()) {
    clear_payload();
    set_has_externalaimessage();
    payload_.externalaimessage_ = new ::aiCommunicator::InternalAI;
  }
  // @@protoc_insertion_point(field_mutable:communicator.Internal.externalAImessage)
  return payload_.externalaimessage_;
}
::aiCommunicator::InternalAI* Internal::release_externalaimessage() {
  // @@protoc_insertion_point(field_release:communicator.Internal.externalAImessage)
  if (has_externalaimessage()) {
    clear_has_payload();
    ::aiCommunicator::InternalAI* temp = payload_.externalaimessage_;
    payload_.externalaimessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Internal::set_allocated_externalaimessage(::aiCommunicator::InternalAI* externalaimessage) {
  clear_payload();
  if (externalaimessage) {
    set_has_externalaimessage();
    payload_.externalaimessage_ = externalaimessage;
  }
  // @@protoc_insertion_point(field_set_allocated:communicator.Internal.externalAImessage)
}

bool Internal::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Internal::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Internal::PayloadCase Internal::payload_case() const {
  return Internal::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace communicator

// @@protoc_insertion_point(global_scope)
