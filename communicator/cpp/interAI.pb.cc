// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interAI.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interAI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aiCommunicator {
class LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Location> {
} _Location_default_instance_;
class InternalVoxelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InternalVoxel> {
} _InternalVoxel_default_instance_;
class TXSlotAllocatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TXSlotAllocated> {
} _TXSlotAllocated_default_instance_;
class TXSlotRemovedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TXSlotRemoved> {
} _TXSlotRemoved_default_instance_;
class TXGainChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TXGainChanged> {
} _TXGainChanged_default_instance_;
class NodePerformanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodePerformance> {
} _NodePerformance_default_instance_;
class FlowPerformanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlowPerformance> {
} _FlowPerformance_default_instance_;
class GatewayReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GatewayReport> {
} _GatewayReport_default_instance_;
class InternalAIDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InternalAI> {
  public:
  const ::aiCommunicator::GatewayReport* gw_report_;
  const ::aiCommunicator::TXSlotAllocated* slot_alloc_;
  const ::aiCommunicator::TXSlotRemoved* slot_removed_;
  const ::aiCommunicator::TXGainChanged* gain_changed_;
  const ::aiCommunicator::NodePerformance* nodeperf_;
  int query_;
} _InternalAI_default_instance_;

namespace protobuf_interAI_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, elevation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, timeslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, validitystart_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalVoxel, tx_gain_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotAllocated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotAllocated, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotAllocated, timeslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotAllocated, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotRemoved, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotRemoved, timeslot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXSlotRemoved, channel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXGainChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXGainChanged, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TXGainChanged, gain_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePerformance, flows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowPerformance, flow_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowPerformance, bps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, start_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatewayReport, flows_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, statementid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, mac_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, nodeindex_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), gw_report_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), slot_alloc_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), slot_removed_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), gain_changed_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), nodeperf_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_InternalAI_default_instance_), query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalAI, payload_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Location)},
  { 8, -1, sizeof(InternalVoxel)},
  { 18, -1, sizeof(TXSlotAllocated)},
  { 26, -1, sizeof(TXSlotRemoved)},
  { 33, -1, sizeof(TXGainChanged)},
  { 40, -1, sizeof(NodePerformance)},
  { 46, -1, sizeof(FlowPerformance)},
  { 53, -1, sizeof(GatewayReport)},
  { 63, -1, sizeof(InternalAI)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InternalVoxel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TXSlotAllocated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TXSlotRemoved_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TXGainChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodePerformance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlowPerformance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GatewayReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InternalAI_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "interAI.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _Location_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _InternalVoxel_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _TXSlotAllocated_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TXSlotRemoved_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TXGainChanged_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NodePerformance_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FlowPerformance_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GatewayReport_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _InternalAI_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Location_default_instance_.DefaultConstruct();
  _InternalVoxel_default_instance_.DefaultConstruct();
  _TXSlotAllocated_default_instance_.DefaultConstruct();
  _TXSlotRemoved_default_instance_.DefaultConstruct();
  _TXGainChanged_default_instance_.DefaultConstruct();
  _NodePerformance_default_instance_.DefaultConstruct();
  _FlowPerformance_default_instance_.DefaultConstruct();
  _GatewayReport_default_instance_.DefaultConstruct();
  _InternalAI_default_instance_.DefaultConstruct();
  _GatewayReport_default_instance_.get_mutable()->location_ = const_cast< ::aiCommunicator::Location*>(
      ::aiCommunicator::Location::internal_default_instance());
  _InternalAI_default_instance_.gw_report_ = const_cast< ::aiCommunicator::GatewayReport*>(
      ::aiCommunicator::GatewayReport::internal_default_instance());
  _InternalAI_default_instance_.slot_alloc_ = const_cast< ::aiCommunicator::TXSlotAllocated*>(
      ::aiCommunicator::TXSlotAllocated::internal_default_instance());
  _InternalAI_default_instance_.slot_removed_ = const_cast< ::aiCommunicator::TXSlotRemoved*>(
      ::aiCommunicator::TXSlotRemoved::internal_default_instance());
  _InternalAI_default_instance_.gain_changed_ = const_cast< ::aiCommunicator::TXGainChanged*>(
      ::aiCommunicator::TXGainChanged::internal_default_instance());
  _InternalAI_default_instance_.nodeperf_ = const_cast< ::aiCommunicator::NodePerformance*>(
      ::aiCommunicator::NodePerformance::internal_default_instance());
  _InternalAI_default_instance_.query_ = 0;
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rinterAI.proto\022\016aiCommunicator\"B\n\010Locat"
      "ion\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001"
      "\022\021\n\televation\030\003 \001(\001\"g\n\rInternalVoxel\022\020\n\010"
      "timeslot\030\001 \001(\r\022\017\n\007channel\030\002 \001(\r\022\013\n\003dst\030\003"
      " \001(\004\022\025\n\rvaliditystart\030\004 \001(\004\022\017\n\007tx_gain\030\005"
      " \001(\r\"A\n\017TXSlotAllocated\022\013\n\003dst\030\001 \001(\004\022\020\n\010"
      "timeslot\030\002 \001(\r\022\017\n\007channel\030\003 \001(\r\"2\n\rTXSlo"
      "tRemoved\022\020\n\010timeslot\030\001 \001(\r\022\017\n\007channel\030\002 "
      "\001(\r\"*\n\rTXGainChanged\022\013\n\003dst\030\001 \001(\004\022\014\n\004gai"
      "n\030\002 \001(\r\"A\n\017NodePerformance\022.\n\005flows\030\001 \003("
      "\0132\037.aiCommunicator.FlowPerformance\"/\n\017Fl"
      "owPerformance\022\017\n\007flow_id\030\001 \001(\r\022\013\n\003bps\030\002 "
      "\001(\r\"\311\001\n\rGatewayReport\022\027\n\017start_timestamp"
      "\030\001 \001(\004\022\025\n\rend_timestamp\030\002 \001(\004\022*\n\010locatio"
      "n\030\003 \001(\0132\030.aiCommunicator.Location\022,\n\005slo"
      "ts\030\004 \003(\0132\035.aiCommunicator.InternalVoxel\022"
      ".\n\005flows\030\005 \003(\0132\037.aiCommunicator.FlowPerf"
      "ormance\"\222\003\n\nInternalAI\022\023\n\013statementID\030\001 "
      "\001(\004\022\023\n\013mac_address\030\002 \001(\004\022\021\n\tnodeIndex\030\003 "
      "\001(\005\0222\n\tgw_report\030e \001(\0132\035.aiCommunicator."
      "GatewayReportH\000\0225\n\nslot_alloc\030f \001(\0132\037.ai"
      "Communicator.TXSlotAllocatedH\000\0225\n\014slot_r"
      "emoved\030g \001(\0132\035.aiCommunicator.TXSlotRemo"
      "vedH\000\0225\n\014gain_changed\030h \001(\0132\035.aiCommunic"
      "ator.TXGainChangedH\000\0223\n\010nodeperf\030i \001(\0132\037"
      ".aiCommunicator.NodePerformanceH\000\022\'\n\005que"
      "ry\030\312\001 \001(\0162\025.aiCommunicator.QueryH\000B\t\n\007pa"
      "yloadJ\005\010k\020\311\001*N\n\005Query\022\021\n\rQUERY_UNKNOWN\020\000"
      "\022\031\n\024QUERY_WHO_IS_GATEWAY\020\201\002\022\027\n\022QUERY_I_A"
      "M_GATEWAY\020\202\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interAI.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_interAI_2eproto

const ::google::protobuf::EnumDescriptor* Query_descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_enum_descriptors[0];
}
bool Query_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kLongitudeFieldNumber;
const int Location::kLatitudeFieldNumber;
const int Location::kElevationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(elevation_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.Location)
}

void Location::SharedCtor() {
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(elevation_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:aiCommunicator.Location)
  SharedDtor();
}

void Location::SharedDtor() {
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Location& Location::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.Location)
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&elevation_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(elevation_));
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double elevation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double elevation = 3;
  if (this->elevation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->elevation(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.Location)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double elevation = 3;
  if (this->elevation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->elevation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.Location)
  size_t total_size = 0;

  // double longitude = 1;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double elevation = 3;
  if (this->elevation() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.elevation() != 0) {
    set_elevation(from.elevation());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(elevation_, other->elevation_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// double longitude = 1;
void Location::clear_longitude() {
  longitude_ = 0;
}
double Location::longitude() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.Location.longitude)
  return longitude_;
}
void Location::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.Location.longitude)
}

// double latitude = 2;
void Location::clear_latitude() {
  latitude_ = 0;
}
double Location::latitude() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.Location.latitude)
  return latitude_;
}
void Location::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.Location.latitude)
}

// double elevation = 3;
void Location::clear_elevation() {
  elevation_ = 0;
}
double Location::elevation() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.Location.elevation)
  return elevation_;
}
void Location::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.Location.elevation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalVoxel::kTimeslotFieldNumber;
const int InternalVoxel::kChannelFieldNumber;
const int InternalVoxel::kDstFieldNumber;
const int InternalVoxel::kValiditystartFieldNumber;
const int InternalVoxel::kTxGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalVoxel::InternalVoxel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.InternalVoxel)
}
InternalVoxel::InternalVoxel(const InternalVoxel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timeslot_, &from.timeslot_,
    reinterpret_cast<char*>(&tx_gain_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(tx_gain_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.InternalVoxel)
}

void InternalVoxel::SharedCtor() {
  ::memset(&timeslot_, 0, reinterpret_cast<char*>(&tx_gain_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(tx_gain_));
  _cached_size_ = 0;
}

InternalVoxel::~InternalVoxel() {
  // @@protoc_insertion_point(destructor:aiCommunicator.InternalVoxel)
  SharedDtor();
}

void InternalVoxel::SharedDtor() {
}

void InternalVoxel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalVoxel::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InternalVoxel& InternalVoxel::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

InternalVoxel* InternalVoxel::New(::google::protobuf::Arena* arena) const {
  InternalVoxel* n = new InternalVoxel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalVoxel::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.InternalVoxel)
  ::memset(&timeslot_, 0, reinterpret_cast<char*>(&tx_gain_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(tx_gain_));
}

bool InternalVoxel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.InternalVoxel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timeslot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dst = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 validitystart = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &validitystart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tx_gain = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.InternalVoxel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.InternalVoxel)
  return false;
#undef DO_
}

void InternalVoxel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.InternalVoxel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeslot(), output);
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // uint64 dst = 3;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst(), output);
  }

  // uint64 validitystart = 4;
  if (this->validitystart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->validitystart(), output);
  }

  // uint32 tx_gain = 5;
  if (this->tx_gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tx_gain(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.InternalVoxel)
}

::google::protobuf::uint8* InternalVoxel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.InternalVoxel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeslot(), target);
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // uint64 dst = 3;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst(), target);
  }

  // uint64 validitystart = 4;
  if (this->validitystart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->validitystart(), target);
  }

  // uint32 tx_gain = 5;
  if (this->tx_gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tx_gain(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.InternalVoxel)
  return target;
}

size_t InternalVoxel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.InternalVoxel)
  size_t total_size = 0;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeslot());
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // uint64 dst = 3;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst());
  }

  // uint64 validitystart = 4;
  if (this->validitystart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->validitystart());
  }

  // uint32 tx_gain = 5;
  if (this->tx_gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_gain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalVoxel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.InternalVoxel)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalVoxel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalVoxel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.InternalVoxel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.InternalVoxel)
    MergeFrom(*source);
  }
}

void InternalVoxel::MergeFrom(const InternalVoxel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.InternalVoxel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeslot() != 0) {
    set_timeslot(from.timeslot());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.validitystart() != 0) {
    set_validitystart(from.validitystart());
  }
  if (from.tx_gain() != 0) {
    set_tx_gain(from.tx_gain());
  }
}

void InternalVoxel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.InternalVoxel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalVoxel::CopyFrom(const InternalVoxel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.InternalVoxel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalVoxel::IsInitialized() const {
  return true;
}

void InternalVoxel::Swap(InternalVoxel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalVoxel::InternalSwap(InternalVoxel* other) {
  std::swap(timeslot_, other->timeslot_);
  std::swap(channel_, other->channel_);
  std::swap(dst_, other->dst_);
  std::swap(validitystart_, other->validitystart_);
  std::swap(tx_gain_, other->tx_gain_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalVoxel::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalVoxel

// uint32 timeslot = 1;
void InternalVoxel::clear_timeslot() {
  timeslot_ = 0u;
}
::google::protobuf::uint32 InternalVoxel::timeslot() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalVoxel.timeslot)
  return timeslot_;
}
void InternalVoxel::set_timeslot(::google::protobuf::uint32 value) {
  
  timeslot_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalVoxel.timeslot)
}

// uint32 channel = 2;
void InternalVoxel::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 InternalVoxel::channel() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalVoxel.channel)
  return channel_;
}
void InternalVoxel::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalVoxel.channel)
}

// uint64 dst = 3;
void InternalVoxel::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InternalVoxel::dst() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalVoxel.dst)
  return dst_;
}
void InternalVoxel::set_dst(::google::protobuf::uint64 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalVoxel.dst)
}

// uint64 validitystart = 4;
void InternalVoxel::clear_validitystart() {
  validitystart_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InternalVoxel::validitystart() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalVoxel.validitystart)
  return validitystart_;
}
void InternalVoxel::set_validitystart(::google::protobuf::uint64 value) {
  
  validitystart_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalVoxel.validitystart)
}

// uint32 tx_gain = 5;
void InternalVoxel::clear_tx_gain() {
  tx_gain_ = 0u;
}
::google::protobuf::uint32 InternalVoxel::tx_gain() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalVoxel.tx_gain)
  return tx_gain_;
}
void InternalVoxel::set_tx_gain(::google::protobuf::uint32 value) {
  
  tx_gain_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalVoxel.tx_gain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TXSlotAllocated::kDstFieldNumber;
const int TXSlotAllocated::kTimeslotFieldNumber;
const int TXSlotAllocated::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TXSlotAllocated::TXSlotAllocated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.TXSlotAllocated)
}
TXSlotAllocated::TXSlotAllocated(const TXSlotAllocated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&dst_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.TXSlotAllocated)
}

void TXSlotAllocated::SharedCtor() {
  ::memset(&dst_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&dst_) + sizeof(channel_));
  _cached_size_ = 0;
}

TXSlotAllocated::~TXSlotAllocated() {
  // @@protoc_insertion_point(destructor:aiCommunicator.TXSlotAllocated)
  SharedDtor();
}

void TXSlotAllocated::SharedDtor() {
}

void TXSlotAllocated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TXSlotAllocated::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TXSlotAllocated& TXSlotAllocated::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

TXSlotAllocated* TXSlotAllocated::New(::google::protobuf::Arena* arena) const {
  TXSlotAllocated* n = new TXSlotAllocated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TXSlotAllocated::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.TXSlotAllocated)
  ::memset(&dst_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&dst_) + sizeof(channel_));
}

bool TXSlotAllocated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.TXSlotAllocated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeslot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.TXSlotAllocated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.TXSlotAllocated)
  return false;
#undef DO_
}

void TXSlotAllocated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.TXSlotAllocated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst(), output);
  }

  // uint32 timeslot = 2;
  if (this->timeslot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeslot(), output);
  }

  // uint32 channel = 3;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.TXSlotAllocated)
}

::google::protobuf::uint8* TXSlotAllocated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.TXSlotAllocated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst(), target);
  }

  // uint32 timeslot = 2;
  if (this->timeslot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeslot(), target);
  }

  // uint32 channel = 3;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.TXSlotAllocated)
  return target;
}

size_t TXSlotAllocated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.TXSlotAllocated)
  size_t total_size = 0;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst());
  }

  // uint32 timeslot = 2;
  if (this->timeslot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeslot());
  }

  // uint32 channel = 3;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TXSlotAllocated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.TXSlotAllocated)
  GOOGLE_DCHECK_NE(&from, this);
  const TXSlotAllocated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TXSlotAllocated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.TXSlotAllocated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.TXSlotAllocated)
    MergeFrom(*source);
  }
}

void TXSlotAllocated::MergeFrom(const TXSlotAllocated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.TXSlotAllocated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.timeslot() != 0) {
    set_timeslot(from.timeslot());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void TXSlotAllocated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.TXSlotAllocated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXSlotAllocated::CopyFrom(const TXSlotAllocated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.TXSlotAllocated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXSlotAllocated::IsInitialized() const {
  return true;
}

void TXSlotAllocated::Swap(TXSlotAllocated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TXSlotAllocated::InternalSwap(TXSlotAllocated* other) {
  std::swap(dst_, other->dst_);
  std::swap(timeslot_, other->timeslot_);
  std::swap(channel_, other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TXSlotAllocated::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TXSlotAllocated

// uint64 dst = 1;
void TXSlotAllocated::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TXSlotAllocated::dst() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXSlotAllocated.dst)
  return dst_;
}
void TXSlotAllocated::set_dst(::google::protobuf::uint64 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXSlotAllocated.dst)
}

// uint32 timeslot = 2;
void TXSlotAllocated::clear_timeslot() {
  timeslot_ = 0u;
}
::google::protobuf::uint32 TXSlotAllocated::timeslot() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXSlotAllocated.timeslot)
  return timeslot_;
}
void TXSlotAllocated::set_timeslot(::google::protobuf::uint32 value) {
  
  timeslot_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXSlotAllocated.timeslot)
}

// uint32 channel = 3;
void TXSlotAllocated::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 TXSlotAllocated::channel() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXSlotAllocated.channel)
  return channel_;
}
void TXSlotAllocated::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXSlotAllocated.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TXSlotRemoved::kTimeslotFieldNumber;
const int TXSlotRemoved::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TXSlotRemoved::TXSlotRemoved()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.TXSlotRemoved)
}
TXSlotRemoved::TXSlotRemoved(const TXSlotRemoved& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timeslot_, &from.timeslot_,
    reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.TXSlotRemoved)
}

void TXSlotRemoved::SharedCtor() {
  ::memset(&timeslot_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(channel_));
  _cached_size_ = 0;
}

TXSlotRemoved::~TXSlotRemoved() {
  // @@protoc_insertion_point(destructor:aiCommunicator.TXSlotRemoved)
  SharedDtor();
}

void TXSlotRemoved::SharedDtor() {
}

void TXSlotRemoved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TXSlotRemoved::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TXSlotRemoved& TXSlotRemoved::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

TXSlotRemoved* TXSlotRemoved::New(::google::protobuf::Arena* arena) const {
  TXSlotRemoved* n = new TXSlotRemoved;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TXSlotRemoved::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.TXSlotRemoved)
  ::memset(&timeslot_, 0, reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&timeslot_) + sizeof(channel_));
}

bool TXSlotRemoved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.TXSlotRemoved)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 timeslot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeslot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.TXSlotRemoved)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.TXSlotRemoved)
  return false;
#undef DO_
}

void TXSlotRemoved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.TXSlotRemoved)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeslot(), output);
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.TXSlotRemoved)
}

::google::protobuf::uint8* TXSlotRemoved::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.TXSlotRemoved)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeslot(), target);
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.TXSlotRemoved)
  return target;
}

size_t TXSlotRemoved::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.TXSlotRemoved)
  size_t total_size = 0;

  // uint32 timeslot = 1;
  if (this->timeslot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timeslot());
  }

  // uint32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TXSlotRemoved::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.TXSlotRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  const TXSlotRemoved* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TXSlotRemoved>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.TXSlotRemoved)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.TXSlotRemoved)
    MergeFrom(*source);
  }
}

void TXSlotRemoved::MergeFrom(const TXSlotRemoved& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.TXSlotRemoved)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeslot() != 0) {
    set_timeslot(from.timeslot());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void TXSlotRemoved::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.TXSlotRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXSlotRemoved::CopyFrom(const TXSlotRemoved& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.TXSlotRemoved)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXSlotRemoved::IsInitialized() const {
  return true;
}

void TXSlotRemoved::Swap(TXSlotRemoved* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TXSlotRemoved::InternalSwap(TXSlotRemoved* other) {
  std::swap(timeslot_, other->timeslot_);
  std::swap(channel_, other->channel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TXSlotRemoved::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TXSlotRemoved

// uint32 timeslot = 1;
void TXSlotRemoved::clear_timeslot() {
  timeslot_ = 0u;
}
::google::protobuf::uint32 TXSlotRemoved::timeslot() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXSlotRemoved.timeslot)
  return timeslot_;
}
void TXSlotRemoved::set_timeslot(::google::protobuf::uint32 value) {
  
  timeslot_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXSlotRemoved.timeslot)
}

// uint32 channel = 2;
void TXSlotRemoved::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 TXSlotRemoved::channel() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXSlotRemoved.channel)
  return channel_;
}
void TXSlotRemoved::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXSlotRemoved.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TXGainChanged::kDstFieldNumber;
const int TXGainChanged::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TXGainChanged::TXGainChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.TXGainChanged)
}
TXGainChanged::TXGainChanged(const TXGainChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&dst_) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.TXGainChanged)
}

void TXGainChanged::SharedCtor() {
  ::memset(&dst_, 0, reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&dst_) + sizeof(gain_));
  _cached_size_ = 0;
}

TXGainChanged::~TXGainChanged() {
  // @@protoc_insertion_point(destructor:aiCommunicator.TXGainChanged)
  SharedDtor();
}

void TXGainChanged::SharedDtor() {
}

void TXGainChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TXGainChanged::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TXGainChanged& TXGainChanged::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

TXGainChanged* TXGainChanged::New(::google::protobuf::Arena* arena) const {
  TXGainChanged* n = new TXGainChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TXGainChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.TXGainChanged)
  ::memset(&dst_, 0, reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&dst_) + sizeof(gain_));
}

bool TXGainChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.TXGainChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 dst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.TXGainChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.TXGainChanged)
  return false;
#undef DO_
}

void TXGainChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.TXGainChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst(), output);
  }

  // uint32 gain = 2;
  if (this->gain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gain(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.TXGainChanged)
}

::google::protobuf::uint8* TXGainChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.TXGainChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst(), target);
  }

  // uint32 gain = 2;
  if (this->gain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gain(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.TXGainChanged)
  return target;
}

size_t TXGainChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.TXGainChanged)
  size_t total_size = 0;

  // uint64 dst = 1;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dst());
  }

  // uint32 gain = 2;
  if (this->gain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TXGainChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.TXGainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const TXGainChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TXGainChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.TXGainChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.TXGainChanged)
    MergeFrom(*source);
  }
}

void TXGainChanged::MergeFrom(const TXGainChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.TXGainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void TXGainChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.TXGainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXGainChanged::CopyFrom(const TXGainChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.TXGainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXGainChanged::IsInitialized() const {
  return true;
}

void TXGainChanged::Swap(TXGainChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TXGainChanged::InternalSwap(TXGainChanged* other) {
  std::swap(dst_, other->dst_);
  std::swap(gain_, other->gain_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TXGainChanged::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TXGainChanged

// uint64 dst = 1;
void TXGainChanged::clear_dst() {
  dst_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TXGainChanged::dst() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXGainChanged.dst)
  return dst_;
}
void TXGainChanged::set_dst(::google::protobuf::uint64 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXGainChanged.dst)
}

// uint32 gain = 2;
void TXGainChanged::clear_gain() {
  gain_ = 0u;
}
::google::protobuf::uint32 TXGainChanged::gain() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.TXGainChanged.gain)
  return gain_;
}
void TXGainChanged::set_gain(::google::protobuf::uint32 value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.TXGainChanged.gain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePerformance::kFlowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePerformance::NodePerformance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.NodePerformance)
}
NodePerformance::NodePerformance(const NodePerformance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      flows_(from.flows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.NodePerformance)
}

void NodePerformance::SharedCtor() {
  _cached_size_ = 0;
}

NodePerformance::~NodePerformance() {
  // @@protoc_insertion_point(destructor:aiCommunicator.NodePerformance)
  SharedDtor();
}

void NodePerformance::SharedDtor() {
}

void NodePerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePerformance::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodePerformance& NodePerformance::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodePerformance* NodePerformance::New(::google::protobuf::Arena* arena) const {
  NodePerformance* n = new NodePerformance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.NodePerformance)
  flows_.Clear();
}

bool NodePerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.NodePerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .aiCommunicator.FlowPerformance flows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.NodePerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.NodePerformance)
  return false;
#undef DO_
}

void NodePerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.NodePerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aiCommunicator.FlowPerformance flows = 1;
  for (unsigned int i = 0, n = this->flows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.NodePerformance)
}

::google::protobuf::uint8* NodePerformance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.NodePerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .aiCommunicator.FlowPerformance flows = 1;
  for (unsigned int i = 0, n = this->flows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->flows(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.NodePerformance)
  return target;
}

size_t NodePerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.NodePerformance)
  size_t total_size = 0;

  // repeated .aiCommunicator.FlowPerformance flows = 1;
  {
    unsigned int count = this->flows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flows(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePerformance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.NodePerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePerformance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePerformance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.NodePerformance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.NodePerformance)
    MergeFrom(*source);
  }
}

void NodePerformance::MergeFrom(const NodePerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.NodePerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flows_.MergeFrom(from.flows_);
}

void NodePerformance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.NodePerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePerformance::CopyFrom(const NodePerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.NodePerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePerformance::IsInitialized() const {
  return true;
}

void NodePerformance::Swap(NodePerformance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePerformance::InternalSwap(NodePerformance* other) {
  flows_.InternalSwap(&other->flows_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePerformance::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePerformance

// repeated .aiCommunicator.FlowPerformance flows = 1;
int NodePerformance::flows_size() const {
  return flows_.size();
}
void NodePerformance::clear_flows() {
  flows_.Clear();
}
const ::aiCommunicator::FlowPerformance& NodePerformance::flows(int index) const {
  // @@protoc_insertion_point(field_get:aiCommunicator.NodePerformance.flows)
  return flows_.Get(index);
}
::aiCommunicator::FlowPerformance* NodePerformance::mutable_flows(int index) {
  // @@protoc_insertion_point(field_mutable:aiCommunicator.NodePerformance.flows)
  return flows_.Mutable(index);
}
::aiCommunicator::FlowPerformance* NodePerformance::add_flows() {
  // @@protoc_insertion_point(field_add:aiCommunicator.NodePerformance.flows)
  return flows_.Add();
}
::google::protobuf::RepeatedPtrField< ::aiCommunicator::FlowPerformance >*
NodePerformance::mutable_flows() {
  // @@protoc_insertion_point(field_mutable_list:aiCommunicator.NodePerformance.flows)
  return &flows_;
}
const ::google::protobuf::RepeatedPtrField< ::aiCommunicator::FlowPerformance >&
NodePerformance::flows() const {
  // @@protoc_insertion_point(field_list:aiCommunicator.NodePerformance.flows)
  return flows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowPerformance::kFlowIdFieldNumber;
const int FlowPerformance::kBpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowPerformance::FlowPerformance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.FlowPerformance)
}
FlowPerformance::FlowPerformance(const FlowPerformance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flow_id_, &from.flow_id_,
    reinterpret_cast<char*>(&bps_) -
    reinterpret_cast<char*>(&flow_id_) + sizeof(bps_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.FlowPerformance)
}

void FlowPerformance::SharedCtor() {
  ::memset(&flow_id_, 0, reinterpret_cast<char*>(&bps_) -
    reinterpret_cast<char*>(&flow_id_) + sizeof(bps_));
  _cached_size_ = 0;
}

FlowPerformance::~FlowPerformance() {
  // @@protoc_insertion_point(destructor:aiCommunicator.FlowPerformance)
  SharedDtor();
}

void FlowPerformance::SharedDtor() {
}

void FlowPerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowPerformance::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowPerformance& FlowPerformance::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlowPerformance* FlowPerformance::New(::google::protobuf::Arena* arena) const {
  FlowPerformance* n = new FlowPerformance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.FlowPerformance)
  ::memset(&flow_id_, 0, reinterpret_cast<char*>(&bps_) -
    reinterpret_cast<char*>(&flow_id_) + sizeof(bps_));
}

bool FlowPerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.FlowPerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flow_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flow_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.FlowPerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.FlowPerformance)
  return false;
#undef DO_
}

void FlowPerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.FlowPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flow_id = 1;
  if (this->flow_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flow_id(), output);
  }

  // uint32 bps = 2;
  if (this->bps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bps(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.FlowPerformance)
}

::google::protobuf::uint8* FlowPerformance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.FlowPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flow_id = 1;
  if (this->flow_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flow_id(), target);
  }

  // uint32 bps = 2;
  if (this->bps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bps(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.FlowPerformance)
  return target;
}

size_t FlowPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.FlowPerformance)
  size_t total_size = 0;

  // uint32 flow_id = 1;
  if (this->flow_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flow_id());
  }

  // uint32 bps = 2;
  if (this->bps() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bps());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowPerformance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.FlowPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowPerformance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowPerformance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.FlowPerformance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.FlowPerformance)
    MergeFrom(*source);
  }
}

void FlowPerformance::MergeFrom(const FlowPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.FlowPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flow_id() != 0) {
    set_flow_id(from.flow_id());
  }
  if (from.bps() != 0) {
    set_bps(from.bps());
  }
}

void FlowPerformance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.FlowPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowPerformance::CopyFrom(const FlowPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.FlowPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowPerformance::IsInitialized() const {
  return true;
}

void FlowPerformance::Swap(FlowPerformance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowPerformance::InternalSwap(FlowPerformance* other) {
  std::swap(flow_id_, other->flow_id_);
  std::swap(bps_, other->bps_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlowPerformance::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowPerformance

// uint32 flow_id = 1;
void FlowPerformance::clear_flow_id() {
  flow_id_ = 0u;
}
::google::protobuf::uint32 FlowPerformance::flow_id() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.FlowPerformance.flow_id)
  return flow_id_;
}
void FlowPerformance::set_flow_id(::google::protobuf::uint32 value) {
  
  flow_id_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.FlowPerformance.flow_id)
}

// uint32 bps = 2;
void FlowPerformance::clear_bps() {
  bps_ = 0u;
}
::google::protobuf::uint32 FlowPerformance::bps() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.FlowPerformance.bps)
  return bps_;
}
void FlowPerformance::set_bps(::google::protobuf::uint32 value) {
  
  bps_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.FlowPerformance.bps)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GatewayReport::kStartTimestampFieldNumber;
const int GatewayReport::kEndTimestampFieldNumber;
const int GatewayReport::kLocationFieldNumber;
const int GatewayReport::kSlotsFieldNumber;
const int GatewayReport::kFlowsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GatewayReport::GatewayReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.GatewayReport)
}
GatewayReport::GatewayReport(const GatewayReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_(from.slots_),
      flows_(from.flows_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::aiCommunicator::Location(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.GatewayReport)
}

void GatewayReport::SharedCtor() {
  ::memset(&location_, 0, reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&location_) + sizeof(end_timestamp_));
  _cached_size_ = 0;
}

GatewayReport::~GatewayReport() {
  // @@protoc_insertion_point(destructor:aiCommunicator.GatewayReport)
  SharedDtor();
}

void GatewayReport::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void GatewayReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatewayReport::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GatewayReport& GatewayReport::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

GatewayReport* GatewayReport::New(::google::protobuf::Arena* arena) const {
  GatewayReport* n = new GatewayReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GatewayReport::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.GatewayReport)
  slots_.Clear();
  flows_.Clear();
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(end_timestamp_));
}

bool GatewayReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.GatewayReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 end_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.Location location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aiCommunicator.InternalVoxel slots = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aiCommunicator.FlowPerformance flows = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flows()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.GatewayReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.GatewayReport)
  return false;
#undef DO_
}

void GatewayReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.GatewayReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp(), output);
  }

  // .aiCommunicator.Location location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // repeated .aiCommunicator.InternalVoxel slots = 4;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slots(i), output);
  }

  // repeated .aiCommunicator.FlowPerformance flows = 5;
  for (unsigned int i = 0, n = this->flows_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->flows(i), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.GatewayReport)
}

::google::protobuf::uint8* GatewayReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.GatewayReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp(), target);
  }

  // .aiCommunicator.Location location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, deterministic, target);
  }

  // repeated .aiCommunicator.InternalVoxel slots = 4;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->slots(i), deterministic, target);
  }

  // repeated .aiCommunicator.FlowPerformance flows = 5;
  for (unsigned int i = 0, n = this->flows_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->flows(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.GatewayReport)
  return target;
}

size_t GatewayReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.GatewayReport)
  size_t total_size = 0;

  // repeated .aiCommunicator.InternalVoxel slots = 4;
  {
    unsigned int count = this->slots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slots(i));
    }
  }

  // repeated .aiCommunicator.FlowPerformance flows = 5;
  {
    unsigned int count = this->flows_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flows(i));
    }
  }

  // .aiCommunicator.Location location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp());
  }

  // uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatewayReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.GatewayReport)
  GOOGLE_DCHECK_NE(&from, this);
  const GatewayReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GatewayReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.GatewayReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.GatewayReport)
    MergeFrom(*source);
  }
}

void GatewayReport::MergeFrom(const GatewayReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.GatewayReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  flows_.MergeFrom(from.flows_);
  if (from.has_location()) {
    mutable_location()->::aiCommunicator::Location::MergeFrom(from.location());
  }
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
}

void GatewayReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.GatewayReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatewayReport::CopyFrom(const GatewayReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.GatewayReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayReport::IsInitialized() const {
  return true;
}

void GatewayReport::Swap(GatewayReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GatewayReport::InternalSwap(GatewayReport* other) {
  slots_.InternalSwap(&other->slots_);
  flows_.InternalSwap(&other->flows_);
  std::swap(location_, other->location_);
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GatewayReport::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GatewayReport

// uint64 start_timestamp = 1;
void GatewayReport::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GatewayReport::start_timestamp() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.GatewayReport.start_timestamp)
  return start_timestamp_;
}
void GatewayReport::set_start_timestamp(::google::protobuf::uint64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.GatewayReport.start_timestamp)
}

// uint64 end_timestamp = 2;
void GatewayReport::clear_end_timestamp() {
  end_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GatewayReport::end_timestamp() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.GatewayReport.end_timestamp)
  return end_timestamp_;
}
void GatewayReport::set_end_timestamp(::google::protobuf::uint64 value) {
  
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.GatewayReport.end_timestamp)
}

// .aiCommunicator.Location location = 3;
bool GatewayReport::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void GatewayReport::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::aiCommunicator::Location& GatewayReport::location() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.GatewayReport.location)
  return location_ != NULL ? *location_
                         : *::aiCommunicator::Location::internal_default_instance();
}
::aiCommunicator::Location* GatewayReport::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::aiCommunicator::Location;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.GatewayReport.location)
  return location_;
}
::aiCommunicator::Location* GatewayReport::release_location() {
  // @@protoc_insertion_point(field_release:aiCommunicator.GatewayReport.location)
  
  ::aiCommunicator::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void GatewayReport::set_allocated_location(::aiCommunicator::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.GatewayReport.location)
}

// repeated .aiCommunicator.InternalVoxel slots = 4;
int GatewayReport::slots_size() const {
  return slots_.size();
}
void GatewayReport::clear_slots() {
  slots_.Clear();
}
const ::aiCommunicator::InternalVoxel& GatewayReport::slots(int index) const {
  // @@protoc_insertion_point(field_get:aiCommunicator.GatewayReport.slots)
  return slots_.Get(index);
}
::aiCommunicator::InternalVoxel* GatewayReport::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:aiCommunicator.GatewayReport.slots)
  return slots_.Mutable(index);
}
::aiCommunicator::InternalVoxel* GatewayReport::add_slots() {
  // @@protoc_insertion_point(field_add:aiCommunicator.GatewayReport.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::aiCommunicator::InternalVoxel >*
GatewayReport::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:aiCommunicator.GatewayReport.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::aiCommunicator::InternalVoxel >&
GatewayReport::slots() const {
  // @@protoc_insertion_point(field_list:aiCommunicator.GatewayReport.slots)
  return slots_;
}

// repeated .aiCommunicator.FlowPerformance flows = 5;
int GatewayReport::flows_size() const {
  return flows_.size();
}
void GatewayReport::clear_flows() {
  flows_.Clear();
}
const ::aiCommunicator::FlowPerformance& GatewayReport::flows(int index) const {
  // @@protoc_insertion_point(field_get:aiCommunicator.GatewayReport.flows)
  return flows_.Get(index);
}
::aiCommunicator::FlowPerformance* GatewayReport::mutable_flows(int index) {
  // @@protoc_insertion_point(field_mutable:aiCommunicator.GatewayReport.flows)
  return flows_.Mutable(index);
}
::aiCommunicator::FlowPerformance* GatewayReport::add_flows() {
  // @@protoc_insertion_point(field_add:aiCommunicator.GatewayReport.flows)
  return flows_.Add();
}
::google::protobuf::RepeatedPtrField< ::aiCommunicator::FlowPerformance >*
GatewayReport::mutable_flows() {
  // @@protoc_insertion_point(field_mutable_list:aiCommunicator.GatewayReport.flows)
  return &flows_;
}
const ::google::protobuf::RepeatedPtrField< ::aiCommunicator::FlowPerformance >&
GatewayReport::flows() const {
  // @@protoc_insertion_point(field_list:aiCommunicator.GatewayReport.flows)
  return flows_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalAI::kStatementIDFieldNumber;
const int InternalAI::kMacAddressFieldNumber;
const int InternalAI::kNodeIndexFieldNumber;
const int InternalAI::kGwReportFieldNumber;
const int InternalAI::kSlotAllocFieldNumber;
const int InternalAI::kSlotRemovedFieldNumber;
const int InternalAI::kGainChangedFieldNumber;
const int InternalAI::kNodeperfFieldNumber;
const int InternalAI::kQueryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalAI::InternalAI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_interAI_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:aiCommunicator.InternalAI)
}
InternalAI::InternalAI(const InternalAI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statementid_, &from.statementid_,
    reinterpret_cast<char*>(&nodeindex_) -
    reinterpret_cast<char*>(&statementid_) + sizeof(nodeindex_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kGwReport: {
      mutable_gw_report()->::aiCommunicator::GatewayReport::MergeFrom(from.gw_report());
      break;
    }
    case kSlotAlloc: {
      mutable_slot_alloc()->::aiCommunicator::TXSlotAllocated::MergeFrom(from.slot_alloc());
      break;
    }
    case kSlotRemoved: {
      mutable_slot_removed()->::aiCommunicator::TXSlotRemoved::MergeFrom(from.slot_removed());
      break;
    }
    case kGainChanged: {
      mutable_gain_changed()->::aiCommunicator::TXGainChanged::MergeFrom(from.gain_changed());
      break;
    }
    case kNodeperf: {
      mutable_nodeperf()->::aiCommunicator::NodePerformance::MergeFrom(from.nodeperf());
      break;
    }
    case kQuery: {
      set_query(from.query());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:aiCommunicator.InternalAI)
}

void InternalAI::SharedCtor() {
  ::memset(&statementid_, 0, reinterpret_cast<char*>(&nodeindex_) -
    reinterpret_cast<char*>(&statementid_) + sizeof(nodeindex_));
  clear_has_payload();
  _cached_size_ = 0;
}

InternalAI::~InternalAI() {
  // @@protoc_insertion_point(destructor:aiCommunicator.InternalAI)
  SharedDtor();
}

void InternalAI::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void InternalAI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalAI::descriptor() {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InternalAI& InternalAI::default_instance() {
  protobuf_interAI_2eproto::InitDefaults();
  return *internal_default_instance();
}

InternalAI* InternalAI::New(::google::protobuf::Arena* arena) const {
  InternalAI* n = new InternalAI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalAI::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:aiCommunicator.InternalAI)
  switch (payload_case()) {
    case kGwReport: {
      delete payload_.gw_report_;
      break;
    }
    case kSlotAlloc: {
      delete payload_.slot_alloc_;
      break;
    }
    case kSlotRemoved: {
      delete payload_.slot_removed_;
      break;
    }
    case kGainChanged: {
      delete payload_.gain_changed_;
      break;
    }
    case kNodeperf: {
      delete payload_.nodeperf_;
      break;
    }
    case kQuery: {
      // No need to clear
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void InternalAI::Clear() {
// @@protoc_insertion_point(message_clear_start:aiCommunicator.InternalAI)
  ::memset(&statementid_, 0, reinterpret_cast<char*>(&nodeindex_) -
    reinterpret_cast<char*>(&statementid_) + sizeof(nodeindex_));
  clear_payload();
}

bool InternalAI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aiCommunicator.InternalAI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 statementID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &statementid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 mac_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nodeIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.GatewayReport gw_report = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(810u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.TXSlotAllocated slot_alloc = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(818u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_alloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.TXSlotRemoved slot_removed = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(826u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot_removed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.TXGainChanged gain_changed = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(834u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gain_changed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.NodePerformance nodeperf = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(842u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodeperf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aiCommunicator.Query query = 202;
      case 202: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1616u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query(static_cast< ::aiCommunicator::Query >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aiCommunicator.InternalAI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aiCommunicator.InternalAI)
  return false;
#undef DO_
}

void InternalAI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aiCommunicator.InternalAI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 statementID = 1;
  if (this->statementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->statementid(), output);
  }

  // uint64 mac_address = 2;
  if (this->mac_address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mac_address(), output);
  }

  // int32 nodeIndex = 3;
  if (this->nodeindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nodeindex(), output);
  }

  // .aiCommunicator.GatewayReport gw_report = 101;
  if (has_gw_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *payload_.gw_report_, output);
  }

  // .aiCommunicator.TXSlotAllocated slot_alloc = 102;
  if (has_slot_alloc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, *payload_.slot_alloc_, output);
  }

  // .aiCommunicator.TXSlotRemoved slot_removed = 103;
  if (has_slot_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, *payload_.slot_removed_, output);
  }

  // .aiCommunicator.TXGainChanged gain_changed = 104;
  if (has_gain_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, *payload_.gain_changed_, output);
  }

  // .aiCommunicator.NodePerformance nodeperf = 105;
  if (has_nodeperf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, *payload_.nodeperf_, output);
  }

  // .aiCommunicator.Query query = 202;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      202, this->query(), output);
  }

  // @@protoc_insertion_point(serialize_end:aiCommunicator.InternalAI)
}

::google::protobuf::uint8* InternalAI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aiCommunicator.InternalAI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 statementID = 1;
  if (this->statementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->statementid(), target);
  }

  // uint64 mac_address = 2;
  if (this->mac_address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mac_address(), target);
  }

  // int32 nodeIndex = 3;
  if (this->nodeindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nodeindex(), target);
  }

  // .aiCommunicator.GatewayReport gw_report = 101;
  if (has_gw_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        101, *payload_.gw_report_, deterministic, target);
  }

  // .aiCommunicator.TXSlotAllocated slot_alloc = 102;
  if (has_slot_alloc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        102, *payload_.slot_alloc_, deterministic, target);
  }

  // .aiCommunicator.TXSlotRemoved slot_removed = 103;
  if (has_slot_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        103, *payload_.slot_removed_, deterministic, target);
  }

  // .aiCommunicator.TXGainChanged gain_changed = 104;
  if (has_gain_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        104, *payload_.gain_changed_, deterministic, target);
  }

  // .aiCommunicator.NodePerformance nodeperf = 105;
  if (has_nodeperf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        105, *payload_.nodeperf_, deterministic, target);
  }

  // .aiCommunicator.Query query = 202;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      202, this->query(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:aiCommunicator.InternalAI)
  return target;
}

size_t InternalAI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aiCommunicator.InternalAI)
  size_t total_size = 0;

  // uint64 statementID = 1;
  if (this->statementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->statementid());
  }

  // uint64 mac_address = 2;
  if (this->mac_address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->mac_address());
  }

  // int32 nodeIndex = 3;
  if (this->nodeindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nodeindex());
  }

  switch (payload_case()) {
    // .aiCommunicator.GatewayReport gw_report = 101;
    case kGwReport: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.gw_report_);
      break;
    }
    // .aiCommunicator.TXSlotAllocated slot_alloc = 102;
    case kSlotAlloc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_alloc_);
      break;
    }
    // .aiCommunicator.TXSlotRemoved slot_removed = 103;
    case kSlotRemoved: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.slot_removed_);
      break;
    }
    // .aiCommunicator.TXGainChanged gain_changed = 104;
    case kGainChanged: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.gain_changed_);
      break;
    }
    // .aiCommunicator.NodePerformance nodeperf = 105;
    case kNodeperf: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.nodeperf_);
      break;
    }
    // .aiCommunicator.Query query = 202;
    case kQuery: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->query());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalAI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aiCommunicator.InternalAI)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalAI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalAI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aiCommunicator.InternalAI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aiCommunicator.InternalAI)
    MergeFrom(*source);
  }
}

void InternalAI::MergeFrom(const InternalAI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aiCommunicator.InternalAI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statementid() != 0) {
    set_statementid(from.statementid());
  }
  if (from.mac_address() != 0) {
    set_mac_address(from.mac_address());
  }
  if (from.nodeindex() != 0) {
    set_nodeindex(from.nodeindex());
  }
  switch (from.payload_case()) {
    case kGwReport: {
      mutable_gw_report()->::aiCommunicator::GatewayReport::MergeFrom(from.gw_report());
      break;
    }
    case kSlotAlloc: {
      mutable_slot_alloc()->::aiCommunicator::TXSlotAllocated::MergeFrom(from.slot_alloc());
      break;
    }
    case kSlotRemoved: {
      mutable_slot_removed()->::aiCommunicator::TXSlotRemoved::MergeFrom(from.slot_removed());
      break;
    }
    case kGainChanged: {
      mutable_gain_changed()->::aiCommunicator::TXGainChanged::MergeFrom(from.gain_changed());
      break;
    }
    case kNodeperf: {
      mutable_nodeperf()->::aiCommunicator::NodePerformance::MergeFrom(from.nodeperf());
      break;
    }
    case kQuery: {
      set_query(from.query());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void InternalAI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aiCommunicator.InternalAI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalAI::CopyFrom(const InternalAI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aiCommunicator.InternalAI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalAI::IsInitialized() const {
  return true;
}

void InternalAI::Swap(InternalAI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalAI::InternalSwap(InternalAI* other) {
  std::swap(statementid_, other->statementid_);
  std::swap(mac_address_, other->mac_address_);
  std::swap(nodeindex_, other->nodeindex_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalAI::GetMetadata() const {
  protobuf_interAI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_interAI_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalAI

// uint64 statementID = 1;
void InternalAI::clear_statementid() {
  statementid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InternalAI::statementid() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.statementID)
  return statementid_;
}
void InternalAI::set_statementid(::google::protobuf::uint64 value) {
  
  statementid_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalAI.statementID)
}

// uint64 mac_address = 2;
void InternalAI::clear_mac_address() {
  mac_address_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 InternalAI::mac_address() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.mac_address)
  return mac_address_;
}
void InternalAI::set_mac_address(::google::protobuf::uint64 value) {
  
  mac_address_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalAI.mac_address)
}

// int32 nodeIndex = 3;
void InternalAI::clear_nodeindex() {
  nodeindex_ = 0;
}
::google::protobuf::int32 InternalAI::nodeindex() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.nodeIndex)
  return nodeindex_;
}
void InternalAI::set_nodeindex(::google::protobuf::int32 value) {
  
  nodeindex_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalAI.nodeIndex)
}

// .aiCommunicator.GatewayReport gw_report = 101;
bool InternalAI::has_gw_report() const {
  return payload_case() == kGwReport;
}
void InternalAI::set_has_gw_report() {
  _oneof_case_[0] = kGwReport;
}
void InternalAI::clear_gw_report() {
  if (has_gw_report()) {
    delete payload_.gw_report_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::GatewayReport& InternalAI::gw_report() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.gw_report)
  return has_gw_report()
      ? *payload_.gw_report_
      : ::aiCommunicator::GatewayReport::default_instance();
}
::aiCommunicator::GatewayReport* InternalAI::mutable_gw_report() {
  if (!has_gw_report()) {
    clear_payload();
    set_has_gw_report();
    payload_.gw_report_ = new ::aiCommunicator::GatewayReport;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.InternalAI.gw_report)
  return payload_.gw_report_;
}
::aiCommunicator::GatewayReport* InternalAI::release_gw_report() {
  // @@protoc_insertion_point(field_release:aiCommunicator.InternalAI.gw_report)
  if (has_gw_report()) {
    clear_has_payload();
    ::aiCommunicator::GatewayReport* temp = payload_.gw_report_;
    payload_.gw_report_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InternalAI::set_allocated_gw_report(::aiCommunicator::GatewayReport* gw_report) {
  clear_payload();
  if (gw_report) {
    set_has_gw_report();
    payload_.gw_report_ = gw_report;
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.InternalAI.gw_report)
}

// .aiCommunicator.TXSlotAllocated slot_alloc = 102;
bool InternalAI::has_slot_alloc() const {
  return payload_case() == kSlotAlloc;
}
void InternalAI::set_has_slot_alloc() {
  _oneof_case_[0] = kSlotAlloc;
}
void InternalAI::clear_slot_alloc() {
  if (has_slot_alloc()) {
    delete payload_.slot_alloc_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::TXSlotAllocated& InternalAI::slot_alloc() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.slot_alloc)
  return has_slot_alloc()
      ? *payload_.slot_alloc_
      : ::aiCommunicator::TXSlotAllocated::default_instance();
}
::aiCommunicator::TXSlotAllocated* InternalAI::mutable_slot_alloc() {
  if (!has_slot_alloc()) {
    clear_payload();
    set_has_slot_alloc();
    payload_.slot_alloc_ = new ::aiCommunicator::TXSlotAllocated;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.InternalAI.slot_alloc)
  return payload_.slot_alloc_;
}
::aiCommunicator::TXSlotAllocated* InternalAI::release_slot_alloc() {
  // @@protoc_insertion_point(field_release:aiCommunicator.InternalAI.slot_alloc)
  if (has_slot_alloc()) {
    clear_has_payload();
    ::aiCommunicator::TXSlotAllocated* temp = payload_.slot_alloc_;
    payload_.slot_alloc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InternalAI::set_allocated_slot_alloc(::aiCommunicator::TXSlotAllocated* slot_alloc) {
  clear_payload();
  if (slot_alloc) {
    set_has_slot_alloc();
    payload_.slot_alloc_ = slot_alloc;
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.InternalAI.slot_alloc)
}

// .aiCommunicator.TXSlotRemoved slot_removed = 103;
bool InternalAI::has_slot_removed() const {
  return payload_case() == kSlotRemoved;
}
void InternalAI::set_has_slot_removed() {
  _oneof_case_[0] = kSlotRemoved;
}
void InternalAI::clear_slot_removed() {
  if (has_slot_removed()) {
    delete payload_.slot_removed_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::TXSlotRemoved& InternalAI::slot_removed() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.slot_removed)
  return has_slot_removed()
      ? *payload_.slot_removed_
      : ::aiCommunicator::TXSlotRemoved::default_instance();
}
::aiCommunicator::TXSlotRemoved* InternalAI::mutable_slot_removed() {
  if (!has_slot_removed()) {
    clear_payload();
    set_has_slot_removed();
    payload_.slot_removed_ = new ::aiCommunicator::TXSlotRemoved;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.InternalAI.slot_removed)
  return payload_.slot_removed_;
}
::aiCommunicator::TXSlotRemoved* InternalAI::release_slot_removed() {
  // @@protoc_insertion_point(field_release:aiCommunicator.InternalAI.slot_removed)
  if (has_slot_removed()) {
    clear_has_payload();
    ::aiCommunicator::TXSlotRemoved* temp = payload_.slot_removed_;
    payload_.slot_removed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InternalAI::set_allocated_slot_removed(::aiCommunicator::TXSlotRemoved* slot_removed) {
  clear_payload();
  if (slot_removed) {
    set_has_slot_removed();
    payload_.slot_removed_ = slot_removed;
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.InternalAI.slot_removed)
}

// .aiCommunicator.TXGainChanged gain_changed = 104;
bool InternalAI::has_gain_changed() const {
  return payload_case() == kGainChanged;
}
void InternalAI::set_has_gain_changed() {
  _oneof_case_[0] = kGainChanged;
}
void InternalAI::clear_gain_changed() {
  if (has_gain_changed()) {
    delete payload_.gain_changed_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::TXGainChanged& InternalAI::gain_changed() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.gain_changed)
  return has_gain_changed()
      ? *payload_.gain_changed_
      : ::aiCommunicator::TXGainChanged::default_instance();
}
::aiCommunicator::TXGainChanged* InternalAI::mutable_gain_changed() {
  if (!has_gain_changed()) {
    clear_payload();
    set_has_gain_changed();
    payload_.gain_changed_ = new ::aiCommunicator::TXGainChanged;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.InternalAI.gain_changed)
  return payload_.gain_changed_;
}
::aiCommunicator::TXGainChanged* InternalAI::release_gain_changed() {
  // @@protoc_insertion_point(field_release:aiCommunicator.InternalAI.gain_changed)
  if (has_gain_changed()) {
    clear_has_payload();
    ::aiCommunicator::TXGainChanged* temp = payload_.gain_changed_;
    payload_.gain_changed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InternalAI::set_allocated_gain_changed(::aiCommunicator::TXGainChanged* gain_changed) {
  clear_payload();
  if (gain_changed) {
    set_has_gain_changed();
    payload_.gain_changed_ = gain_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.InternalAI.gain_changed)
}

// .aiCommunicator.NodePerformance nodeperf = 105;
bool InternalAI::has_nodeperf() const {
  return payload_case() == kNodeperf;
}
void InternalAI::set_has_nodeperf() {
  _oneof_case_[0] = kNodeperf;
}
void InternalAI::clear_nodeperf() {
  if (has_nodeperf()) {
    delete payload_.nodeperf_;
    clear_has_payload();
  }
}
 const ::aiCommunicator::NodePerformance& InternalAI::nodeperf() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.nodeperf)
  return has_nodeperf()
      ? *payload_.nodeperf_
      : ::aiCommunicator::NodePerformance::default_instance();
}
::aiCommunicator::NodePerformance* InternalAI::mutable_nodeperf() {
  if (!has_nodeperf()) {
    clear_payload();
    set_has_nodeperf();
    payload_.nodeperf_ = new ::aiCommunicator::NodePerformance;
  }
  // @@protoc_insertion_point(field_mutable:aiCommunicator.InternalAI.nodeperf)
  return payload_.nodeperf_;
}
::aiCommunicator::NodePerformance* InternalAI::release_nodeperf() {
  // @@protoc_insertion_point(field_release:aiCommunicator.InternalAI.nodeperf)
  if (has_nodeperf()) {
    clear_has_payload();
    ::aiCommunicator::NodePerformance* temp = payload_.nodeperf_;
    payload_.nodeperf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void InternalAI::set_allocated_nodeperf(::aiCommunicator::NodePerformance* nodeperf) {
  clear_payload();
  if (nodeperf) {
    set_has_nodeperf();
    payload_.nodeperf_ = nodeperf;
  }
  // @@protoc_insertion_point(field_set_allocated:aiCommunicator.InternalAI.nodeperf)
}

// .aiCommunicator.Query query = 202;
bool InternalAI::has_query() const {
  return payload_case() == kQuery;
}
void InternalAI::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void InternalAI::clear_query() {
  if (has_query()) {
    payload_.query_ = 0;
    clear_has_payload();
  }
}
::aiCommunicator::Query InternalAI::query() const {
  // @@protoc_insertion_point(field_get:aiCommunicator.InternalAI.query)
  if (has_query()) {
    return static_cast< ::aiCommunicator::Query >(payload_.query_);
  }
  return static_cast< ::aiCommunicator::Query >(0);
}
void InternalAI::set_query(::aiCommunicator::Query value) {
  if (!has_query()) {
    clear_payload();
    set_has_query();
  }
  payload_.query_ = value;
  // @@protoc_insertion_point(field_set:aiCommunicator.InternalAI.query)
}

bool InternalAI::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void InternalAI::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
InternalAI::PayloadCase InternalAI::payload_case() const {
  return InternalAI::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace aiCommunicator

// @@protoc_insertion_point(global_scope)
